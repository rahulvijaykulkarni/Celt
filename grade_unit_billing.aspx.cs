using System;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using MySql.Data.MySqlClient;
using System.Drawing;
using System.Web;
using CrystalDecisions.Shared;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Collections.Generic;
using CrystalDecisions.CrystalReports.Engine;

using System.IO.Compression;


public partial class Billing_rates : System.Web.UI.Page
{
    DAL d = new DAL();
    DAL d1 = new DAL();
    DAL d_cg = new DAL();
    public int arrears_invoice = 0, ot_invoice = 0;
    int invoice_fl_man = 0, invoice_fl = 0, invoice_fl_dr = 0, invoice_fl_ma = 0, invoice_fl_dep = 0, invoice_arrear = 0, invoice_machine_rental = 0;

    BillingSalary bs = new BillingSalary();
    public double bfl_total_amount = 0, bfl_gst = 0;
    public static string month_name = "";
    //arrears
    public string Message = "0", policy = "0", appro_attendannce = "0", reject_attendance = "0", appro_attendannce_finanace = "0", deployment = "0", closed_branch = "0", billing_selection = "", month_list2 = "", year2 = "";
    public string Emp_Message = "0", Emp_reject_attendance = "0", Emp_appro_attendannce = "0", Emp_appro_attendannce_finanace = "0", Emp_deployment = "0", Emp_closed_branch = "0";
    public string emp_con_remaing = "0", driver_con_remaing = "0", emp_con_approve_finance = "0", driver_con_approve_finance = "0", emp_con_approve_admin = "0", driver_con_approve_admin = "0", emp_con_reject_finance = "0", driver_con_reject_finance = "0", Conv_deployment = "0", Conv_closed_branch = "0";
    public string Material_Message = "0", Material_reject_attendance = "0", Material_appro_attendannce = "0", Material_appro_attendannce_finanace = "0", Material_deployment = "0", Material_closed_branch = "0";

    CrystalDecisions.CrystalReports.Engine.ReportDocument crystalReport = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["comp_code"] == null || Session["comp_code"].ToString() == "")
        {
            Response.Redirect("Home.aspx");
        }

        if (!IsPostBack)
        {
            ViewState["ALL_STATE"] = "0";
            txt_month_year.Text = d.getCurrentMonthYear();
            arrears_invoice = 0;
            ddl_client.Items.Clear();
            System.Data.DataTable dt_item = new System.Data.DataTable();
            MySqlDataAdapter cmd_item = new MySqlDataAdapter("Select CASE WHEN  client_code  = 'BALIK HK' THEN CONCAT( client_name , ' HK') WHEN  client_code  = 'BALIC SG' THEN CONCAT( client_name , ' SG') WHEN  client_code  = 'BAG' THEN CONCAT( client_name , ' HK') WHEN  client_code  = 'BG' THEN CONCAT( client_name , ' SG') ELSE  client_name  END AS 'client_name', client_code from pay_client_master where comp_code='" + Session["comp_code"].ToString() + "' and client_active_close='0' ORDER BY client_code", d.con);//AND client_code in(select distinct(client_code) from pay_client_state_role_grade where  COMP_CODE='" + Session["COMP_CODE"].ToString() + "' AND  EMP_CODE='" + Session["LOGIN_ID"].ToString() + "')
            d.con.Open();
            try
            {
                cmd_item.Fill(dt_item);
                if (dt_item.Rows.Count > 0)
                {
                    ddl_client.DataSource = dt_item;
                    ddl_client.DataTextField = dt_item.Columns[0].ToString();
                    ddl_client.DataValueField = dt_item.Columns[1].ToString();
                    ddl_client.DataBind();
                }
                dt_item.Dispose();
                hide_controls();
                d.con.Close();
                ddl_client.Items.Insert(0, "Select");
                ddl_client.Items.Insert(1, "ALL");
                desigpanel.Visible = false;
            }
            catch (Exception ex) { throw ex; }
            finally
            {
                d.con.Close();
            }
            ViewState["Message"] = 0;
            ViewState["policy"] = 0;
            ViewState["appro_attendannce"] = 0;
            ViewState["reject_attendance"] = 0;
            ViewState["appro_attendannce_finanace"] = 0;
            ViewState["deployment"] = 0;
            ViewState["closed_branch"] = 0;

            ViewState["Emp_Message"] = 0;
            ViewState["Emp_reject_attendance"] = 0;
            ViewState["Emp_appro_attendannce"] = 0;
            ViewState["Emp_appro_attendannce_finanace"] = 0;
            ViewState["Emp_deployment"] = 0;
            ViewState["Emp_closed_branch"] = 0;
            remaining_panel.Visible = false; policy_panel.Visible = false; approval_panel.Visible = false; reject_panel.Visible = false; approval_finance_panel.Visible = false; panel_deployment.Visible = false; Notification_panel.Visible = false; panel_clo_branch.Visible = false; btn_material_bill.Visible = false; btn_material_invoice.Visible = false; btn_material_Export.Visible = false;
            tabs.Visible = false;
            pnl_show_btn.Visible = false;
            pnl_send_email.Visible = false;

            ViewState["Material_Message"] = 0;
            ViewState["Material_reject_attendance"] = 0;
            ViewState["Material_appro_attendannce"] = 0;
            ViewState["Material_appro_attendannce_finanace"] = 0;
            ViewState["Material_deployment"] = 0;
            ViewState["Material_closed_branch"] = 0;

            Panel_notification_material.Visible = false;
            Panel_not_appr_material.Visible = false;
            Panel_appro_atte_material.Visible = false;
            Panel_reject_Material.Visible = false;
            Panel_approv_finance_material.Visible = false;

            ViewState["emp_con_remaing"] = 0;
            ViewState["emp_con_approve_finance"] = 0;
            ViewState["emp_con_approve_admin"] = 0;
            ViewState["emp_con_reject_finance"] = 0;
            ViewState["Conv_deployment"] = 0;
            ViewState["Conv_closed_branch"] = 0;

            ViewState["driver_con_remaing"] = 0;
            ViewState["driver_con_approve_finance"] = 0;
            ViewState["driver_con_approve_admin"] = 0;
            ViewState["driver_con_reject_finance"] = 0;


        }
        //Panel1.Visible = false;
        Message = ViewState["Message"].ToString();
        policy = ViewState["policy"].ToString();
        appro_attendannce = ViewState["appro_attendannce"].ToString();
        appro_attendannce_finanace = ViewState["appro_attendannce_finanace"].ToString();
        reject_attendance = ViewState["reject_attendance"].ToString();
        deployment = ViewState["deployment"].ToString();
        closed_branch = ViewState["closed_branch"].ToString();

        Emp_Message = ViewState["Emp_Message"].ToString();
        Emp_reject_attendance = ViewState["Emp_reject_attendance"].ToString();
        Emp_appro_attendannce = ViewState["Emp_appro_attendannce"].ToString();
        Emp_appro_attendannce_finanace = ViewState["Emp_appro_attendannce_finanace"].ToString();
        Emp_deployment = ViewState["Emp_deployment"].ToString();
        Emp_closed_branch = ViewState["Emp_closed_branch"].ToString();
        btn_save.Visible = true;

        //if (Session["ROLE"].ToString().Equals("Managing Director"))
        //{ btn_attendace_chk.Visible = true; }

        //    if (ddl_client.SelectedValue.Equals("MAX")) { btn_support_format.Visible = true; } else { btn_support_format.Visible = false; }
        //if (Session["ROLE"].ToString().Equals("Managing Director")) { btn_attendace_chk.Visible = true; } else { btn_attendace_chk.Visible = false; }
        gv_attendance_panel.Visible = false;
        gv_material_panel.Visible = false;
        gv_con_emp_panel.Visible = false;
        gv_con_driver_panel.Visible = false;
        gv_deployment_panel.Visible = false;
        arrears_invoice = 0;
        //R&M 
        gv_r_m_load_panel.Visible = false;
        //administrative
        gv_admini_load_panel.Visible = false;
        //load_billing_state_gridview();

        // for material

        Material_Message = ViewState["Material_Message"].ToString();
        Material_reject_attendance = ViewState["Material_reject_attendance"].ToString();
        Material_appro_attendannce = ViewState["Material_appro_attendannce"].ToString();
        Material_appro_attendannce_finanace = ViewState["Material_appro_attendannce_finanace"].ToString();
        Panel_not_appr_material.Visible = false; Panel_appro_atte_material.Visible = false; Panel_reject_Material.Visible = false; Panel_approv_finance_material.Visible = false; Panel_notification_material.Visible = false;


        emp_con_remaing = ViewState["emp_con_remaing"].ToString();
        emp_con_approve_finance = ViewState["emp_con_approve_finance"].ToString();
        emp_con_approve_admin = ViewState["emp_con_approve_admin"].ToString();
        emp_con_reject_finance = ViewState["emp_con_reject_finance"].ToString();
        Conv_deployment = ViewState["Conv_deployment"].ToString();
        Conv_closed_branch = ViewState["Conv_closed_branch"].ToString();
        Panel_notification_conv.Visible = false; Panel_not_approve_conv.Visible = false; Panel_appro_con.Visible = false; Panel_reject_con.Visible = false; Panel_appro_finance_con.Visible = false;

        driver_con_remaing = ViewState["driver_con_remaing"].ToString();
        emp_con_approve_finance = ViewState["driver_con_approve_finance"].ToString();
        driver_con_approve_admin = ViewState["driver_con_approve_admin"].ToString();
        driver_con_reject_finance = ViewState["driver_con_reject_finance"].ToString();
        Panel_notification_conv_driver.Visible = false; Panel_appro_con_driver.Visible = false; Panel_reject_con_driver.Visible = false; Panel_appro_finance_con_driver.Visible = false;
    }
    //load attendance gridview 
    protected void gv_attendace_load()
    {

        try
        {
            System.Data.DataTable dt = new System.Data.DataTable();

            //apporve_attendace gridview
            gv_approve_attendace.DataSource = null;
            gv_approve_attendace.DataBind();

            dt = d.approve_attendance_download(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 1, ddlregion.SelectedValue);

            if (dt.Rows.Count > 0)
            {
                gv_approve_attendace.DataSource = dt;
                gv_approve_attendace.DataBind();
                gv_attendance_panel.Visible = true;
                btn_approve.Visible = true;

            }
            //vinod for region
            string where_state = "";
            if (ddl_billing_state.SelectedValue.Equals("Maharashtra") && ddl_client.SelectedValue.Equals("BAGIC") && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020 && billing_type.SelectedValue.Equals("1")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "' and billingwise_id = 5"; }
            if (d.getsinglestring("select billingwise_id from pay_client_billing_details where client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
            {
                where_state = " and pay_billing_unit_rate_history.zone = '" + ddlregion.SelectedValue + "'";
            }
            else
            { where_state = ""; }
            //vikas add hidde aproval button
            if (ddl_billing_state.SelectedValue != "ALL")
            {
                if (ddl_unitcode.SelectedValue != "ALL")
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_unit_rate_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  " + where_state + "AND unit_code = '" + ddl_unitcode.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        btn_approve.Visible = false;
                    }
                    else
                    {
                        btn_approve.Visible = true;
                    }
                }
                else
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_unit_rate_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "' " + where_state + " AND unit_code in(SELECT unit_code FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND state_name = '" + ddl_billing_state.SelectedValue + "' AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) ORDER BY 1)  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        btn_approve.Visible = false;

                    }
                    else
                    {
                        btn_approve.Visible = true;
                    }
                }

            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

        }

    }
    protected void bntclose_Click(object sender, EventArgs e)
    {
        Response.Redirect("Home.aspx");
    }
    protected void btn_save_Click(object sender, EventArgs e)
    {
        hidtab.Value = "0";
        ////suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        ////suraj close

        string where_state = "";
        if (!ddl_billing_state.Equals("ALL")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "'"; }
        if (ddl_billing_state.SelectedValue.Equals("Maharashtra") && ddl_client.SelectedValue.Equals("BAGIC") && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020 && billing_type.SelectedValue.Equals("1")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "' and billingwise_id = 5"; }
        if (d.getsinglestring("select billingwise_id from pay_client_billing_details where client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
        {
            where_state = " and region = '" + ddlregion.SelectedValue + "' ";
        }
        else
        { where_state = ""; }

        display_ClientBilling();

        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue == "0") { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Select End Date.');", true); ddl_start_date_common.SelectedValue = "0"; return; }
        if (ddl_end_date_common.SelectedValue != "0" && ddl_start_date_common.SelectedValue == "0") { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Select Start Date.');", true); ddl_end_date_common.SelectedValue = "0"; return; }

        if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
        {
            string function = " and (left_date >= str_to_date('1/" + txt_month_year.Text.Substring(0, 2) + "/" + txt_month_year.Text.Substring(3) + "','%d/%m/%Y') || left_date is null || left_date < str_to_date('" + DateTime.DaysInMonth(int.Parse(txt_month_year.Text.Substring(3)), int.Parse(txt_month_year.Text.Substring(0, 2))) + "/" + txt_month_year.Text.Substring(0, 2) + "/" + txt_month_year.Text.Substring(3) + "','%d/%m/%Y')) and joining_date <=  str_to_date('" + DateTime.DaysInMonth(int.Parse(txt_month_year.Text.Substring(3)), int.Parse(txt_month_year.Text.Substring(0, 2))) + "/" + txt_month_year.Text.Substring(0, 2) + "/" + txt_month_year.Text.Substring(3) + "','%d/%m/%Y')";
            d.update_joining_left_date(function, ddl_unitcode.SelectedValue, Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, "1", int.Parse(txt_month_year.Text.Substring(0, 2)), int.Parse(txt_month_year.Text.Substring(3)));
            if (int.Parse(ddl_end_date_common.SelectedValue) <= int.Parse(ddl_start_date_common.SelectedValue)) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('End Date Should Be Grether than Start Date .');", true); ddl_end_date_common.SelectedValue = "0"; return; }
        }

        string where_check = "";
        string where = " and billing_unit_code in (select unit_Code from pay_unit_master where client_code = '" + ddl_client.SelectedValue + "' and state_name='" + ddl_billing_state.SelectedValue + "')";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            //where = " and billing_unit_code in (select unit_Code from pay_unit_master where client_code = '" + ddl_client.SelectedValue + "' and comp_code='" + Session["COMP_CODE"].ToString() + "')";
            where = " and billing_client_code = '" + ddl_client.SelectedValue + "' ";
        }
        else if (ddl_unitcode.SelectedValue != "ALL")
        {
            where = " and billing_unit_code  = '" + ddl_unitcode.SelectedValue + "'";
        }
        string temp = d1.getsinglestring("SELECT distinct(month_end) FROM pay_billing_master_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' " + where_state + " and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "'" + where);
        if (temp == "0" || temp == "")
        {
            where_check = " and client_code = '" + ddl_client.SelectedValue + "'";

            if (ddl_billing_state.SelectedValue != "ALL")
            {


                where_check = " and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'";
            }
            if (ddl_unitcode.SelectedValue != "ALL")
            {

                where_check = " and client_code = '" + ddl_client.SelectedValue + "'  and unit_code  = '" + ddl_unitcode.SelectedValue + "'";
            }
            string unit_name = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_unit_rate_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag != 0 And (bill_type is null || bill_type ='') and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' " + where_check + (where_state == "" ? "" : " and zone = '" + ddlregion.SelectedValue + "'"));
            if (!unit_name.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + "  Already Approve You can not Proceed!!!');", true); return; }
            if (int.Parse(ddl_process_data.SelectedValue).Equals(0))
            {
                int counter = 0;
                if (!ddl_start_date_common.SelectedValue.Equals("0"))
                {
                    int last_date = DateTime.DaysInMonth(int.Parse(txt_month_year.Text.Substring(3)), int.Parse(txt_month_year.Text.Substring(0, 2)));


                    if (last_date < int.Parse(ddl_end_date_common.SelectedValue)) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('End Date Not Valid In this Month !!!');", true); return; }
                    counter = 1;
                }
                //arrears
                bs.Billing(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), Session["LOGIN_ID"].ToString(), counter, int.Parse(ddl_start_date_common.SelectedValue), 1, null, null, ddlregion.SelectedValue);
                //calculate_costing();
            }

            insert_finance_data(1);

        }
        else
        {
            gv_attendance_panel.Visible = false;
            gv_deployment_panel.Visible = false;
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('You Cannot Make Changes as Month End Process have Completed !!!');", true);
            hide_controls();
            desigpanel.Visible = false;
        }

        Notification_panel.Visible = false;
        gv_attendace_load();

    }


    protected void ddl_client_SelectedIndexChanged(object sender, EventArgs e)
    {
        // billing_rate_modal.Visible = true;
        if (ddl_client.SelectedValue != "Select")
        {
            //ddl_unitcode.Items.Clear();

            //State
            ddl_billing_state.Items.Clear();
            System.Data.DataTable dt_item = new System.Data.DataTable();
            MySqlDataAdapter cmd_item = null;
            if (ddl_client.SelectedValue == "DHFL" || ddl_client.SelectedValue == "BAGIC")
            {
                cmd_item = new MySqlDataAdapter("SELECT DISTINCT( STATE_NAME ) FROM  pay_unit_master  INNER JOIN  pay_zone_master  ON  pay_unit_master . comp_code  =  pay_zone_master . comp_code  AND  pay_unit_master . client_code  =  pay_zone_master . client_code  WHERE pay_zone_master. comp_code  = '" + Session["comp_code"].ToString() + "' AND pay_zone_master. client_code  = '" + Session["client_code"].ToString() + "' AND pay_zone_master. type  = 'region' ORDER BY 1", d.con);
            }
            else
            {

                cmd_item = new MySqlDataAdapter("SELECT DISTINCT ( STATE_NAME ) FROM  pay_unit_master  WHERE  comp_code  = '" + Session["comp_code"].ToString() + "' AND  client_code  = '" + ddl_client.SelectedValue + "' ORDER BY 1", d.con);

            }
            d.con.Open();
            try
            {
                ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true);
                cmd_item.Fill(dt_item);
                if (dt_item.Rows.Count > 0)
                {
                    ddl_billing_state.DataSource = dt_item;
                    ddl_billing_state.DataTextField = dt_item.Columns[0].ToString();
                    ddl_billing_state.DataValueField = dt_item.Columns[0].ToString();
                    ddl_billing_state.DataBind();
                }
                dt_item.Dispose();
                d.con.Close();
                ddl_billing_state.Items.Insert(0, "ALL");
                ddl_state_SelectedIndexChanged(null, null);
                region();
            }
            catch (Exception ex) { throw ex; }
            finally
            {
                d.con.Close();
                ddcomp_group.Visible = false;
                //Akshay 23-04-2019

                if (ddl_client.SelectedValue == "RCPL")
                {
                    ddcomp_group.Visible = true;
                    company_groups();
                }
                // display_ClientBilling();
                billing_type1();
            }
            grd_material_billing.DataSource = null;
            grd_material_billing.DataBind();
            //invoice and date 
            Notification_panel.Visible = false;
            tabs.Visible = true;
            billing_rate_modal.Visible = false;
            pnl_show_btn.Visible = true;
            pnl_send_email.Visible = false;
        }
    }


    public void display_ClientBilling()
    {

        try
        {

            gv_client_billing.DataSource = null;
            gv_client_billing.DataBind();

            string pay_billing_unit_rate_history = " pay_billing_unit_rate_history ";
            string state_name = "state_name";

            string billingtype = billing_type.SelectedValue == "1" ? "" : billing_type.SelectedValue == "2" ? "and type = 'Material'" : billing_type.SelectedValue == "3" ? "and type = 'Conveyance'" : billing_type.SelectedValue == "4" ? "and type = 'DeepClean'" : billing_type.SelectedValue == "5" ? "and type = 'PestControl'" : billing_type.SelectedValue == "7" ? " " : "";
            d.con.Open();
            d.con1.Open();
            MySqlCommand cmd = new MySqlCommand("select billing_wise,state from pay_client_billing_details where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and billing_id = '" + billing_type.SelectedValue + "' order by billingwise_id desc", d.con1);
            MySqlDataReader dr = cmd.ExecuteReader();

            if (billing_type.SelectedValue != "1")
            {
                if (billing_type.SelectedValue != "7")
                {
                    pay_billing_unit_rate_history = " pay_billing_material_history ";

                }
                if (billing_type.SelectedValue == "7")
                {
                    pay_billing_unit_rate_history = " pay_billing_rental_machine ";
                    state_name = "state";
                }
            }
            MySqlDataAdapter cmd1 = null;
            System.Data.DataTable dt1 = new System.Data.DataTable();
            System.Data.DataTable dt = new System.Data.DataTable();
            while (dr.Read())
            {
                dt1.Clear();
                if (dr.GetValue(0).ToString() == "Statewise")
                {
                    cmd1 = new MySqlDataAdapter("SELECT (SELECT client_name FROM pay_client_master WHERE comp_code = pay_client_billing_details.comp_code AND client_code = pay_client_billing_details.client_code) AS 'CLIENT_NAME', pay_client_billing_details.state as 'STATE_NAME', billing_name, 'ALL' AS 'unit_name', 'ALL' AS 'designation', (CASE WHEN status_flag = 0 THEN 'Pending' WHEN status_flag = 1 THEN 'Closed' WHEN status_flag = 2 THEN 'Rejected' ELSE 'Pending' END) AS 'status' FROM pay_client_billing_details LEFT OUTER JOIN " + pay_billing_unit_rate_history + "  ON pay_client_billing_details.client_code = " + pay_billing_unit_rate_history + ".client_code AND pay_client_billing_details.state = " + pay_billing_unit_rate_history + "." + state_name + " AND  month = '" + txt_month_year.Text.Substring(0, 2) + "' AND year = '" + txt_month_year.Text.Substring(3) + "' " + billingtype + " WHERE pay_client_billing_details.comp_code = '" + Session["comp_code"].ToString() + "' and pay_client_billing_details.client_code = '" + ddl_client.SelectedValue + "' AND pay_client_billing_details.state = '" + dr.GetValue(1).ToString() + "' AND billing_id = '" + billing_type.SelectedValue + "'  GROUP BY  " + pay_billing_unit_rate_history + "." + state_name, d.con);
                }
                else if (dr.GetValue(0).ToString() == "Branchwise")
                {

                    cmd1 = new MySqlDataAdapter("SELECT (SELECT client_name FROM pay_client_master WHERE comp_code = pay_client_billing_details.comp_code AND client_code = pay_client_billing_details.client_code) AS 'CLIENT_NAME', pay_client_billing_details.state as 'STATE_NAME', billing_name, pay_unit_master.unit_name, 'ALL' AS 'designation', (CASE WHEN status_flag = 0 THEN 'Pending' WHEN status_flag = 1 THEN 'Closed' WHEN status_flag = 2 THEN 'Rejected' ELSE 'Pending' END) AS 'status' FROM pay_client_billing_details INNER JOIN pay_unit_master ON pay_client_billing_details.comp_code = pay_unit_master.comp_code AND pay_client_billing_details.client_code = pay_unit_master.client_code AND pay_client_billing_details.state = pay_unit_master.state_name LEFT OUTER JOIN " + pay_billing_unit_rate_history + "  ON pay_client_billing_details.client_code = " + pay_billing_unit_rate_history + ".client_code AND pay_client_billing_details.state = " + pay_billing_unit_rate_history + "." + state_name + " AND pay_unit_master.UNIT_CODE = " + pay_billing_unit_rate_history + ".UNIT_CODE AND  month = '" + txt_month_year.Text.Substring(0, 2) + "' AND year = '" + txt_month_year.Text.Substring(3) + "' " + billingtype + " WHERE pay_client_billing_details.comp_code = '" + Session["comp_code"].ToString() + "' and pay_client_billing_details.client_code = '" + ddl_client.SelectedValue + "' AND pay_client_billing_details.state = '" + dr.GetValue(1).ToString() + "' AND billing_id = '" + billing_type.SelectedValue + "' AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) GROUP BY  pay_unit_master.unit_Code", d.con);
                }
                else if (dr.GetValue(0).ToString() == "Statewisedesignation")
                {
                    cmd1 = new MySqlDataAdapter("SELECT t1.CLIENT_NAME, t1.STATE_NAME , t1.billing_name,  t1.unit_name,t1.designation, (CASE WHEN status_flag = 0 THEN 'Pending' WHEN status_flag = 1 THEN 'Closed' WHEN status_flag = 2 THEN 'Rejected' ELSE 'Pending' END) AS 'status' FROM (SELECT pay_client_billing_details.client_code, (SELECT client_name FROM pay_client_master WHERE comp_code = pay_client_billing_details.comp_code AND client_code = pay_client_billing_details.client_code) AS 'CLIENT_NAME', pay_client_billing_details.state AS 'STATE_NAME', pay_designation_count.designation, billing_name, 'ALL' AS 'unit_name' FROM pay_client_billing_details INNER JOIN pay_unit_master ON pay_client_billing_details.comp_code = pay_unit_master.comp_code AND pay_client_billing_details.client_code = pay_unit_master.client_code AND pay_client_billing_details.state = pay_unit_master.state_name INNER JOIN pay_designation_count ON pay_client_billing_details.comp_code = pay_designation_count.comp_code AND pay_client_billing_details.client_code = pay_designation_count.client_code and pay_designation_count.unit_code is null  WHERE pay_client_billing_details.comp_code = '" + Session["comp_code"].ToString() + "' and pay_client_billing_details.client_code = '" + ddl_client.SelectedValue + "' AND pay_client_billing_details.state = '" + dr.GetValue(1).ToString() + "' AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) AND billing_id = '" + billing_type.SelectedValue + "'  ) AS t1 LEFT JOIN  " + pay_billing_unit_rate_history + " ON t1.client_code = " + pay_billing_unit_rate_history + ".client_code AND t1.STATE_NAME = " + pay_billing_unit_rate_history + "." + state_name + " AND t1.designation = " + pay_billing_unit_rate_history + ".grade_desc and month = '" + txt_month_year.Text.Substring(0, 2) + "' AND year = '" + txt_month_year.Text.Substring(3) + "'  " + billingtype + "   GROUP BY t1.STATE_NAME, t1.designation ", d.con);

                }
                else if (dr.GetValue(0).ToString() == "Branchwisedesignation")
                {
                    cmd1 = new MySqlDataAdapter("SELECT (SELECT client_name FROM pay_client_master WHERE comp_code = pay_client_billing_details.comp_code AND client_code = pay_client_billing_details.client_code) AS 'CLIENT_NAME', pay_client_billing_details.state as 'STATE_NAME', billing_name, pay_unit_master.unit_name, pay_designation_count.designation, (CASE WHEN status_flag = 0 THEN 'Pending' WHEN status_flag = 1 THEN 'Closed' WHEN status_flag = 2 THEN 'Rejected' ELSE 'Pending' END) AS 'status' FROM pay_client_billing_details INNER JOIN pay_unit_master ON pay_client_billing_details.comp_code = pay_unit_master.comp_code AND pay_client_billing_details.client_code = pay_unit_master.client_code AND pay_client_billing_details.state = pay_unit_master.state_name  INNER JOIN  pay_designation_count  ON  pay_client_billing_details . comp_code  =  pay_designation_count . comp_code  AND  pay_client_billing_details .client_code  =  pay_designation_count.client_code AND pay_unit_master.unit_code = pay_designation_count.unit_code  LEFT OUTER JOIN " + pay_billing_unit_rate_history + "  ON pay_client_billing_details.client_code = " + pay_billing_unit_rate_history + ".client_code AND pay_client_billing_details.state = " + pay_billing_unit_rate_history + "." + state_name + "  AND pay_unit_master.UNIT_CODE = " + pay_billing_unit_rate_history + ".UNIT_CODE AND  month = '" + txt_month_year.Text.Substring(0, 2) + "' AND year = '" + txt_month_year.Text.Substring(3) + "'  " + billingtype + " WHERE pay_client_billing_details.comp_code = '" + Session["comp_code"].ToString() + "' and pay_client_billing_details.client_code = '" + ddl_client.SelectedValue + "' AND pay_client_billing_details.state = '" + dr.GetValue(1).ToString() + "' AND billing_id = '" + billing_type.SelectedValue + "' AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y'))  GROUP BY    pay_unit_master.unit_Code,pay_designation_count.designation", d.con);

                }
                else if (dr.GetValue(0).ToString() == "Regionwise")
                {
                    cmd1 = new MySqlDataAdapter("SELECT (SELECT client_name FROM pay_client_master WHERE comp_code = pay_client_billing_details.comp_code AND client_code = pay_client_billing_details.client_code) AS 'CLIENT_NAME', pay_client_billing_details.state as 'STATE_NAME', billing_name, 'ALL' AS 'unit_name', 'ALL' AS 'designation', (CASE WHEN status_flag = 0 THEN 'Pending' WHEN status_flag = 1 THEN 'Closed' WHEN status_flag = 2 THEN 'Rejected' ELSE 'Pending' END) AS 'status' FROM pay_client_billing_details LEFT OUTER JOIN " + pay_billing_unit_rate_history + "  ON pay_client_billing_details.client_code = " + pay_billing_unit_rate_history + ".client_code AND pay_client_billing_details.state = " + pay_billing_unit_rate_history + "." + state_name + " AND  month = '" + txt_month_year.Text.Substring(0, 2) + "' AND year = '" + txt_month_year.Text.Substring(3) + "' " + billingtype + " WHERE pay_client_billing_details.comp_code = '" + Session["comp_code"].ToString() + "' and pay_client_billing_details.client_code = '" + ddl_client.SelectedValue + "' AND pay_client_billing_details.state = '" + dr.GetValue(1).ToString() + "' AND billing_id = '" + billing_type.SelectedValue + "'  GROUP BY  " + pay_billing_unit_rate_history + "." + state_name, d.con);
                }
                cmd1.Fill(dt1);
                dt.Merge(dt1);
            }
            dr.Close();

            cmd1.Dispose();
            gv_client_billing.DataSource = dt;
            gv_client_billing.DataBind();

            dt.Dispose();
            d.con.Close();
        }
        catch (Exception ex) { throw ex; }
        finally
        {
            d.con.Close();
            d.con1.Close();
        }

    }


    public void company_groups()
    {
        ddl_company_group.Items.Clear();
        System.Data.DataTable dt_cg = new System.Data.DataTable();
        MySqlDataAdapter cmd_cg = new MySqlDataAdapter("select comp_name from pay_company_group where comp_code='" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and (unit_code is null or unit_code ='' ) order by 1", d.con);//and state_name in(select state_name from pay_client_state_role_grade where  COMP_CODE='" + Session["COMP_CODE"].ToString() + "' AND  EMP_CODE='" + Session["LOGIN_ID"].ToString() + "' AND client_code='" + ddl_client.SelectedValue + "')
        d.con.Open();
        try
        {
            cmd_cg.Fill(dt_cg);
            if (dt_cg.Rows.Count > 0)
            {
                ddl_company_group.DataSource = dt_cg;
                ddl_company_group.DataTextField = dt_cg.Columns[0].ToString();
                ddl_company_group.DataValueField = dt_cg.Columns[0].ToString();
                ddl_company_group.DataBind();
            }
            dt_cg.Dispose();
            d.con.Close();
        }
        catch (Exception ex) { throw ex; }
        finally
        {
            d.con.Close();
        }
    }

    //MD change start
    protected void attendance_status()
    {
        if (d.con1.State == ConnectionState.Open)
        {
            d.con1.Close();
            d.con1.Dispose();
            d.con1.ClearPoolAsync(d.con1);
        }

        try
        {
            ViewState["policy"] = 0;
            ViewState["Message"] = 0;
            ViewState["reject_attendance"] = 0;
            ViewState["appro_attendannce"] = 0;
            ViewState["appro_attendannce_finanace"] = 0;
            ViewState["deployment"] = 0;
            ViewState["closed_branch"] = 0;
            System.Data.DataTable dt_item = new System.Data.DataTable();

            employee_count();
            remaining_panel.Visible = true; policy_panel.Visible = true; approval_panel.Visible = true; reject_panel.Visible = true; approval_finance_panel.Visible = true; panel_deployment.Visible = true; Notification_panel.Visible = true; panel_clo_branch.Visible = true;

            if (txt_month_year.Text.Length > 0)
            {
                //remaining attendance

                gv_remain_attendance.DataSource = null;
                gv_remain_attendance.DataBind();
                dt_item = d.chk_attendance(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 0, "");
                Message = "0";
                if (dt_item.Rows.Count > 0)
                {
                    ViewState["Message"] = dt_item.Rows.Count.ToString();
                    Message = ViewState["Message"].ToString();

                    gv_remain_attendance.DataSource = dt_item;
                    gv_remain_attendance.DataBind();
                    remaining_panel.Visible = true;
                }
                dt_item.Dispose();

                //policy attendance
                grd_policy.DataSource = null;
                grd_policy.DataBind();
                dt_item = d.chk_attendance(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 1, "");
                policy = "0";
                if (dt_item.Rows.Count > 0)
                {
                    ViewState["policy"] = dt_item.Rows.Count.ToString();
                    policy = ViewState["policy"].ToString();

                    grd_policy.DataSource = dt_item;
                    grd_policy.DataBind();
                    policy_panel.Visible = true;
                }
                dt_item.Dispose();

                //approval attendance

                gv_approved_attendance.DataSource = null;
                gv_approved_attendance.DataBind();
                dt_item = d.chk_attendance(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 2, "");
                appro_attendannce = "0";
                if (dt_item.Rows.Count > 0)
                {
                    ViewState["appro_attendannce"] = dt_item.Rows.Count.ToString();
                    appro_attendannce = ViewState["appro_attendannce"].ToString();

                    gv_approved_attendance.DataSource = dt_item;
                    gv_approved_attendance.DataBind();
                    approval_panel.Visible = true;
                }
                dt_item.Dispose();

                //reject Attendance

                gv_reject_attendance.DataSource = null;
                gv_reject_attendance.DataBind();
                dt_item = d.chk_attendance(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 3, "");
                reject_attendance = "0";
                if (dt_item.Rows.Count > 0)
                {
                    ViewState["reject_attendance"] = dt_item.Rows.Count.ToString();
                    reject_attendance = ViewState["reject_attendance"].ToString();

                    gv_reject_attendance.DataSource = dt_item;
                    gv_reject_attendance.DataBind();
                    reject_panel.Visible = true;
                }
                dt_item.Dispose();

                //approve by finance


                gv_appr_att_finance.DataSource = null;
                gv_appr_att_finance.DataBind();

                dt_item = d.chk_attendance(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 4, "");
                appro_attendannce_finanace = "0";
                if (dt_item.Rows.Count > 0)
                {
                    ViewState["appro_attendannce_finanace"] = dt_item.Rows.Count.ToString();
                    appro_attendannce_finanace = ViewState["appro_attendannce_finanace"].ToString();

                    gv_appr_att_finance.DataSource = dt_item;
                    gv_appr_att_finance.DataBind();

                }
                dt_item.Dispose();

                gv_branch_deployment.DataSource = null;
                gv_branch_deployment.DataBind();
                //branch having no deployment
                dt_item = d.chk_attendance(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 5, "");
                deployment = "0";
                if (dt_item.Rows.Count > 0)
                {
                    ViewState["deployment"] = dt_item.Rows.Count.ToString();
                    deployment = ViewState["deployment"].ToString();
                    gv_branch_deployment.DataSource = dt_item;
                    gv_branch_deployment.DataBind();

                }
                dt_item.Dispose();

                gv_branch_close.DataSource = null;
                gv_branch_close.DataBind();
                //branch have closed
                dt_item = d.chk_attendance(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 6, "");
                closed_branch = "0";
                if (dt_item.Rows.Count > 0)
                {
                    ViewState["closed_branch"] = dt_item.Rows.Count.ToString();
                    closed_branch = ViewState["closed_branch"].ToString();
                    gv_branch_close.DataSource = dt_item;
                    gv_branch_close.DataBind();

                }
                dt_item.Dispose();
            }
            else
            { remaining_panel.Visible = false; grd_policy.Visible = false; approval_panel.Visible = false; gv_reject_attendance.Visible = false; gv_branch_deployment.Visible = false; }
        }
        catch (Exception ex) { throw ex; }
        finally
        {

        }

    }
    protected void employee_count()
    {

        try
        {
            ViewState["Emp_closed_branch"] = d.emp_count(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 0);
            ViewState["Emp_Message"] = d.emp_count(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 1);
            ViewState["Emp_appro_attendannce"] = d.emp_count(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 2);
            ViewState["Emp_reject_attendance"] = d.emp_count(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 3);

            ViewState["Emp_appro_attendannce_finanace"] = d.emp_count(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text, 4);

            ViewState["Emp_deployment"] = 0;


            Emp_Message = ViewState["Emp_Message"].ToString();
            Emp_reject_attendance = ViewState["Emp_reject_attendance"].ToString();
            Emp_appro_attendannce = ViewState["Emp_appro_attendannce"].ToString();
            Emp_appro_attendannce_finanace = ViewState["Emp_appro_attendannce_finanace"].ToString();
            Emp_deployment = ViewState["Emp_deployment"].ToString();
            Emp_closed_branch = ViewState["Emp_closed_branch"].ToString();
        }
        catch (Exception ex)
        {

        }
        finally
        {

        }

    }
    private void show_controls()
    {
        unit_panel.Visible = true;
        unit_panel2.Visible = true;
        btn_save.Visible = true;
    }

    private void hide_controls()
    {
        unit_panel.Visible = false;
        unit_panel2.Visible = false;
        btn_save.Visible = false;
    }

    int CountDay(int month, int year, int counter)
    {
        string start_date_common = get_start_date();
        string end_date_common = get_end_date();

        int NoOfSunday = 0;

        var firstDay = (dynamic)null;

        if (start_date_common != "1")
        {
            firstDay = new DateTime(year, (month - 1), int.Parse(start_date_common));
        }
        else { firstDay = new DateTime(year, month, 1); }

        var day29 = firstDay.AddDays(28);
        var day30 = firstDay.AddDays(29);
        var day31 = firstDay.AddDays(30);
        if ((day29.Month == month && day29.DayOfWeek == DayOfWeek.Sunday)
       || (day30.Month == month && day30.DayOfWeek == DayOfWeek.Sunday)
       || (day31.Month == month && day31.DayOfWeek == DayOfWeek.Sunday))
        {
            NoOfSunday = 5;
        }
        else
        {
            NoOfSunday = 4;
        }

        int NumOfDay = 0;
        if (start_date_common != "1")
        {
            int year1 = year;
            if (month == 12)
            {
                year1 = year - 1;
            }
            else { year1 = year; }

            var start_date = new DateTime(year1, (month - 1), int.Parse(start_date_common));
            var end_date = new DateTime(year1, (month), int.Parse(end_date_common));
            if ((end_date.Date - start_date.Date).Days == 29)
            {
                day31 = day30;
            }
            if ((day29.Month == month && day29.DayOfWeek == DayOfWeek.Sunday)
        || (day30.Month == month && day30.DayOfWeek == DayOfWeek.Sunday)
        || (day31.Month == month && day31.DayOfWeek == DayOfWeek.Sunday))
            {
                NoOfSunday = 5;
            }
            else
            {
                NoOfSunday = 4;
            }

            NumOfDay = (end_date.Date - start_date.Date).Days;
            NumOfDay = ++NumOfDay;
        }
        else
        {
            NumOfDay = DateTime.DaysInMonth(year, month);
        }


        if (counter == 1)
        {//calendar days
            return NumOfDay;
        }
        else
        { //working days
            return NumOfDay - NoOfSunday;
        }
    }



    protected void btnExport_Click(object sender, EventArgs e)
    {
        hidtab.Value = "0";
        // attendance_status();
        Notification_panel.Visible = false;
        //suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        //suraj close
        if (ddl_client.SelectedValue == "ALL")
        {
            string client_name = d1.getsinglestring("SELECT group_concat(distinct client) FROM pay_billing_unit_rate_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag = 0 And (bill_type is null || bill_type ='')");
            string state_name = d1.getsinglestring("SELECT group_concat(distinct state_name) FROM pay_billing_unit_rate_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag = 0 And (bill_type is null || bill_type ='')");
            if ((!state_name.Equals("")) || (!state_name.Equals(""))) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Client : " + client_name + " And State : " + state_name + " Not Final So You Can Not Generate BreakUp Sheet For ALL Client !!!');", true); return; }
        }
        generate_report(1, 0, billing_type.SelectedValue);
    }

    protected string get_selected_days()
    {
        int month = int.Parse(txt_month_year.Text.Substring(0, 2));
        int year = int.Parse(txt_month_year.Text.Substring(3));
        int monthdays = 0;
        monthdays = DateTime.DaysInMonth(year, month);
        string getdays = "";
        //int n = 1;
        if (ddl_start_date_common.SelectedValue == "0" || ddl_end_date_common.SelectedValue == "0")
        {
            return "";
        }
        for (int n = 1; monthdays >= n; n++)
        {
            if (int.Parse(ddl_start_date_common.SelectedValue) <= n && int.Parse(ddl_end_date_common.SelectedValue) >= n)
            {
                if (n < 10)
                {
                    getdays = getdays + "pay_attendance_muster.DAY" + "0" + n + " as 'DAY0" + n + "',";
                }
                else { getdays = getdays + "pay_attendance_muster.DAY" + n + " as 'DAY" + n + "',"; }
            }
            else
            {
                if (n < 10)
                {
                    getdays = getdays + "'A'" + " as 'DAY0" + n + "',";
                }
                else { getdays = getdays + "'A'" + " as 'DAY" + n + "',"; }
            }
        }
        return getdays;
    }
    private StringWriter generate_report(int i, int type_cl, string billing_type1)
    {
        //for region changes vinod pol

        string where_state = "", region_order = "";
        if (ddl_billing_state.SelectedValue.Equals("Maharashtra") && ddl_client.SelectedValue.Equals("BAGIC") && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020 && billing_type1.Equals("1")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "' and billingwise_id = 5"; }
        if (d.getsinglestring("select billingwise_id from pay_client_billing_details where client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
        {
            if (!ddlregion.SelectedValue.Equals("ALL") && !ddlregion.SelectedValue.Equals("Select"))
            {
                if (!ddl_billing_state.SelectedValue.Equals("ALL")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "'"; }

                where_state = " and pay_billing_unit_rate_history.zone = '" + ddlregion.SelectedValue + "'";

            }
            else
            {
                ddl_billing_state.SelectedValue = "ALL";
                ddl_unitcode.SelectedValue = "ALL";
                region_order = " pay_billing_unit_rate_history.txt_zone, pay_billing_unit_rate_history.Zone, ";
            }
        }
        else
        { where_state = ""; }

        double cell = 0;
        DateTimeFormatInfo mfi = new DateTimeFormatInfo();
        month_name = mfi.GetMonthName(int.Parse(txt_month_year.Text.Substring(0, 2))).ToString();
        month_name = month_name + " " + txt_month_year.Text.Substring(3).ToUpper();

        string where = "", from_to_date = " and pay_billing_unit_rate_history.start_date = '" + ddl_start_date_common.SelectedValue + "' and pay_billing_unit_rate_history.end_date  = '" + ddl_end_date_common.SelectedValue + "'  ";
        string order_by_clause = "   ORDER BY " + region_order + " pay_billing_unit_rate_history.client,pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.unit_name,pay_billing_unit_rate_history.emp_name";
        string R_M_order_by_clause = "   ORDER BY client,state_name,unit_name,emp_name";
        string grade = "";
        string pay_attendance_muster = " pay_attendance_muster ", pay_billing_master_history = "pay_billing_master_history", pay_billing_unit_rate = "pay_billing_unit_rate";

        string sql = null, flag = "and pay_attendance_muster.flag != 0 ";

        string invoice = "";
        string bill_date = "", billing_type = "And (bill_type is null || bill_type ='')";
        int month_days = 0;
        if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
        {

            from_to_date = " and pay_billing_unit_rate_history.start_date  = '" + ddl_start_date_common.SelectedValue + "' and pay_billing_unit_rate_history.end_date  = '" + ddl_end_date_common.SelectedValue + "'  ";
            pay_billing_master_history = "pay_billing_from_to_history as pay_billing_master_history";
            pay_billing_unit_rate = "pay_billing_from_to_unit_rate as pay_billing_unit_rate";
            flag = "";
        }


        //invoice and bill date 
        string invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text, int.Parse(ddl_start_date_common.SelectedValue), int.Parse(ddl_end_date_common.SelectedValue), billing_type, ddlregion.SelectedValue, arrears_invoice, txt_month_year.Text, ddl_arrears_type.SelectedValue, ot_invoice);
        if (i == 11) { invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, "4", ddl_designation.SelectedValue, txt_month_year.Text, int.Parse(ddl_start_date_common.SelectedValue), int.Parse(ddl_end_date_common.SelectedValue), "r_m_bill", ddlregion.SelectedValue, arrears_invoice, txt_month_year.Text, ddl_arrears_type.SelectedValue, ot_invoice); }
        if (i == 12) { invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, "5", ddl_designation.SelectedValue, txt_month_year.Text, int.Parse(ddl_start_date_common.SelectedValue), int.Parse(ddl_end_date_common.SelectedValue), "administrative_bill", ddlregion.SelectedValue, arrears_invoice, txt_month_year.Text, ddl_arrears_type.SelectedValue, ot_invoice); }
        if (invoice_bill_date.Equals(""))
        {
            invoice = "";
            bill_date = "";
        }
        else
        {
            var invoice_bill = invoice_bill_date.Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
            invoice = invoice_bill[0].ToString();
            bill_date = invoice_bill[1].ToString();
        }

        string start_date_common = get_start_date();

        if (ddl_invoice_type.SelectedValue == "2")
        {
            grade = " and pay_billing_unit_rate_history.grade_code = '" + ddl_designation.SelectedValue + "'";

        }
        if (ddl_invoice_type.SelectedValue == "2" && ddl_arrears_type.SelectedValue != "Select")
        {
            grade = " and pay_billing_unit_rate_history_arrears.grade_code = '" + ddl_designation.SelectedValue + "'";

        }


        d.con.Open();
        try
        {
            if (i == 1)
            {
                grade = grade + " " + from_to_date;
                string hdfc="";
                if(ddl_client.SelectedValue=="HDFC")
                { hdfc = "AND pay_billing_unit_rate_history.hdfc_type='manpower_bill'"; }
                if (ddl_client.SelectedValue != "ALL")
                {
                    where = " WHERE pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history . state_name  = '" + ddl_billing_state.SelectedValue + "' and pay_billing_unit_rate_history.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' "+hdfc+" and pay_billing_unit_rate_history.tot_days_present > 0  " + where_state + grade;
                }
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = " WHERE pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "'  and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' " + hdfc + "  and pay_billing_unit_rate_history.tot_days_present > 0 " + where_state + grade;
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = " WHERE pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history . state_name  = '" + ddl_billing_state.SelectedValue + "'  and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' " + hdfc + " and pay_billing_unit_rate_history.tot_days_present > 0 " + where_state + grade;
                }
                if (ddl_client.SelectedValue == "ALL")
                {
                    where = " WHERE pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "'  and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' " + hdfc + " and pay_billing_unit_rate_history.tot_days_present > 0 " + where_state + grade;
                }
                //sql = "SELECT  state_name ,  unit_name ,  unit_city ,  emp_name ,  grade_desc ,DUTYHRS ,  tot_days_present ,  basic ,  vda ,  emp_basic_vda ,  bonus_rate ,  washing ,  travelling ,  education ,  allowances_esic ,  cca_billing ,  other_allow ,  bonus_gross ,  leave_gross ,  gratuity_gross ,  hra ,  special_allowance ,  gross ,  bonus_after_gross ,  leave_after_gross ,  gratuity_after_gross ,  NH ,  pf ,  esic ,  uniform_ser ,  group_insurance_billing ,  lwf ,  operational_cost ,  allowances_no_esic , ( gross  +  bonus_after_gross  +  leave_after_gross  +  gratuity_after_gross  +  NH  +  pf  +  esic  +  lwf  +  uniform_ser  +  operational_cost  +  allowances_no_esic ) AS 'sub_total_a',  ot_pr_hr_rate ,  esi_on_ot_amount ,  ot_hours , ( ot_pr_hr_rate  +  esi_on_ot_amount ) AS 'sub_total_b', ( gross  +  bonus_after_gross  +  leave_after_gross  +  gratuity_after_gross  +  NH  +  pf  +  esic  +  lwf  +  uniform_ser  +  operational_cost  +  allowances_no_esic  +  ot_pr_hr_rate  +  esi_on_ot_amount ) AS 'sub_total_ab',  relieving_charg , CASE WHEN  emp_cca  = 0 AND  branch_cca  != 0 THEN ((baseamount-bill_ot_rate)) WHEN  emp_cca  != 0 AND  branch_cca  != 0 THEN ((baseamount-bill_ot_rate)) WHEN  emp_cca  = 0 AND  branch_cca  = 0 THEN ((baseamount-bill_ot_rate)) ELSE ( bill_gross  + (( bill_gross  *  esic_percent ) / 100) +  bill_pf +lwf +  bill_uniform  +  group_insurance_billing_ser  +  bonus_after_gross  +  leave_after_gross  +  gratuity_after_gross ) END AS 'sub_total_c',  uniform_no_ser ,  operational_cost_no_ser , IF(((( Total  +  pf  +  esic  + ( ot_rate  *  ot_hours ) +  group_insurance_billing_ser ) *  bill_service_charge ) / 100) = 0,  bill_service_charge_amount , ((( Total  +  pf  +  esic  + ( ot_rate  *  ot_hours ) +  group_insurance_billing_ser ) *  bill_service_charge ) / 100)) AS 'Service_charge', (( Total  + ( ot_rate  *  ot_hours ) +  pf  +  esic  +  group_insurance_billing_ser  +  uniform_no_ser  +  operational_cost_no_ser  +  group_insurance_billing ) + IF(((( Total  +  pf  +  esic  + ( ot_rate  *  ot_hours ) +  group_insurance_billing_ser ) *  bill_service_charge ) / 100) = 0,  bill_service_charge_amount , ((( Total  +  pf  +  esic  + ( ot_rate  *  ot_hours ) +  group_insurance_billing_ser ) *  bill_service_charge ) / 100))) AS 'Amount',  pf_percent  AS 'bill_pf_percent',  esic_percent  AS 'bill_esic_percent',  gratuity_percent ,  hra_percent ,  bill_bonus_percent ,  leave_days ,  bill_service_charge,group_insurance_billing_ser,(ot_rate * ot_hours) as 'ot_amount'  FROM (SELECT  client ,  company_state ,  unit_name ,  state_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc ,  emp_basic_vda ,  hra ,  bonus_gross ,  leave_gross ,  gratuity_gross ,  washing ,  travelling ,  education ,  cca_billing ,  other_allow , ( emp_basic_vda  +  hra  +  bonus_gross  +  leave_gross  +  washing  +  travelling  +  education  +  allowances  +  cca_billing  +  other_allow  +  gratuity_gross  +  hrs_12_ot ) AS 'gross',  bonus_after_gross ,  leave_after_gross ,  gratuity_after_gross , ((( emp_basic_vda ) / 100) *  pf_percent ) AS 'pf', ((( emp_basic_vda  +  hra  +  bonus_gross  +  leave_gross  +  washing  +  travelling  +  education  + IF( esic_oa_billing  = 1,  allowances , 0) +  cca_billing  +  other_allow  +  gratuity_gross  +  hrs_12_ot ) / 100) *  esic_percent ) AS 'esic',  hrs_12_ot  AS 'special_allowance', ((( hrs_12_ot ) *  esic_percent ) / 100) AS 'esic_ot',  lwf , CASE WHEN  bill_ser_uniform  = 1 THEN  uniform  ELSE 0 END AS 'uniform_ser', CASE WHEN  bill_ser_uniform  = 0 THEN  uniform  ELSE 0 END AS 'uniform_no_ser',  relieving_charg , CASE WHEN  bill_ser_operations  = 1 THEN  operational_cost  ELSE 0 END AS 'operational_cost', CASE WHEN  bill_ser_operations  = 0 THEN  operational_cost  ELSE 0 END AS 'operational_cost_no_ser',  tot_days_present , ( emp_basic_vda  +  hra  +  bonus_gross  +  leave_gross  +  washing  +  travelling  +  education  +  allowances  +  cca_billing  +  other_allow  +  gratuity_gross  +  bonus_after_gross  +  leave_after_gross  +  gratuity_after_gross  +  lwf + CASE WHEN  bill_ser_uniform  = 0 THEN 0 ELSE  uniform  END +  relieving_charg  + CASE WHEN  bill_ser_operations  = 0 THEN 0 ELSE  operational_cost  END +  NH  +  hrs_12_ot  + IF( esic_common_allow  = 0,  common_allow , 0)) AS 'Total',  bill_service_charge ,  NH ,  hours , ( bill_gross ) AS 'bill_gross',  sub_total_c ,  bill_ser_uniform ,  bill_ser_operations , (IF(ot_hours > 0,ot_rate,0) + IF(ot_hours > 0 and ot_rate > 0,esi_on_ot_amount,0)) AS 'ot_rate',(ot_rate+esi_on_ot_amount) as 'bill_ot_rate',  ot_hours ,  esic_amount ,  IF(ot_hours > 0,ot_rate,0) AS 'ot_pr_hr_rate',IF(ot_hours > 0 and ot_rate > 0,esi_on_ot_amount,0) as 'esi_on_ot_amount',  emp_cca ,  branch_cca ,  bill_pf ,  bill_uniform , CASE WHEN  service_group_insurance_billing  = 0 THEN  group_insurance_billing  ELSE 0 END AS 'group_insurance_billing', CASE WHEN  service_group_insurance_billing  = 1 THEN  group_insurance_billing  ELSE 0 END AS 'group_insurance_billing_ser',  bill_service_charge_amount ,  branch_type ,  DUTYHRS ,  basic ,  vda ,  bonus_rate , IF( esic_oa_billing  = 1,  allowances , 0) AS 'allowances_esic', IF( esic_oa_billing  = 0,  allowances , 0) AS 'allowances_no_esic',  baseamount ,  pf_percent ,  esic_percent ,  gratuity_percent ,  hra_percent ,  bill_bonus_percent ,  leave_days  FROM (SELECT (SELECT  client_name  FROM  pay_client_master  WHERE  client_code  =  pay_unit_master . client_code  AND  comp_code  =  pay_unit_master . comp_code ) AS 'client',  pay_company_master . state  AS 'company_state',  pay_unit_master . unit_name ,  pay_unit_master . state_name ,  pay_unit_master . unit_city ,  pay_unit_master . client_branch_code ,  pay_employee_master . emp_name ,  pay_grade_master . grade_desc ,  pay_billing_unit_rate . basic ,  pay_billing_unit_rate . vda ,  pay_billing_unit_rate . bonus_rate , CAST(CONCAT( pay_billing_master_history . hours , 'HRS ',  pay_billing_unit_rate . month_days , ' DAYS ') AS char) AS 'DUTYHRS', ((( pay_billing_master_history . basic  +  pay_billing_master_history . vda ) /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'emp_basic_vda', (( pay_billing_unit_rate . hra  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'hra', CASE WHEN  bonus_taxable  = '1' THEN (( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'bonus_gross', CASE WHEN  bonus_taxable  = '0' THEN (( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'bonus_after_gross', CASE WHEN  leave_taxable  = '1' THEN (( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'leave_gross', CASE WHEN  leave_taxable  = '0' THEN (( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'leave_after_gross', CASE WHEN  gratuity_taxable  = '1' THEN (( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'gratuity_gross', CASE WHEN  gratuity_taxable  = '0' THEN (( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'gratuity_after_gross', (( pay_billing_unit_rate . washing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'washing', (( pay_billing_unit_rate . traveling  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'travelling', (( pay_billing_unit_rate . education  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'education', (( pay_billing_unit_rate . national_holiday_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'NH', (( pay_billing_unit_rate . allowances  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'allowances', CASE WHEN  pay_employee_master . cca  = 0 THEN (( pay_billing_unit_rate . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE (( pay_employee_master . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) END AS 'cca_billing', CASE WHEN  pay_employee_master . special_allow  = 0 THEN (( pay_billing_unit_rate . otherallowance  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE (( pay_employee_master . special_allow  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) END AS 'other_allow', CASE WHEN  pay_billing_master_history . ot_policy_billing  = '1' THEN (( pay_billing_master_history . ot_amount_billing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'hrs_12_ot',  pay_billing_master_history . bill_esic_percent  AS 'esic_percent',  pay_billing_master_history . bill_pf_percent  AS 'pf_percent',  gratuity_percent ,  pay_billing_master_history . hra_percent ,  pay_billing_master_history . bill_bonus_percent ,  pay_billing_master_history . leave_days , (( pay_billing_unit_rate . lwf  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'lwf', (( pay_billing_unit_rate . uniform  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'uniform', (( pay_billing_unit_rate . relieving_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'relieving_charg', (( pay_billing_unit_rate . operational_cost  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'operational_cost',  pay_attendance_muster . tot_days_present , ROUND((( pay_billing_unit_rate . sub_total_c  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ), 2) AS 'baseamount',  bill_service_charge ,  pay_billing_master_history . hours ,  pay_billing_unit_rate . sub_total_c ,  pay_billing_master_history . bill_ser_operations ,  pay_billing_master_history . bill_ser_uniform , pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate',  pay_attendance_muster . ot_hours ,  pay_billing_unit_rate . esic_amount ,  pay_billing_unit_rate.esi_on_ot_amount as 'esi_on_ot_amount',  pay_employee_master . cca  AS 'emp_cca',  pay_billing_unit_rate . cca  AS 'branch_cca', ( pay_billing_unit_rate . gross  + (( pay_employee_master . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'bill_gross',  pay_billing_unit_rate . pf_amount  AS 'bill_pf',  pay_billing_unit_rate . uniform  AS 'bill_uniform', (( pay_billing_master_history . group_insurance_billing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'group_insurance_billing',  service_group_insurance_billing ,  pay_employee_master . Employee_type , (( bill_service_charge_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'bill_service_charge_amount',  pay_billing_master_history . esic_common_allow , CASE WHEN  pay_employee_master . special_allow  = 0 THEN (( pay_billing_unit_rate . common_allowance  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE (( pay_employee_master . special_allow  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) END AS 'common_allow', IFNULL( branch_type , 0) AS 'branch_type',  pay_billing_master_history . esic_oa_billing  FROM pay_employee_master INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE WHERE  " + where;
                sql = "SELECT  distinct(emp_code),pay_billing_unit_rate_history.zone, pay_billing_unit_rate_history.txt_zone,client ,  state_name , branch_type, unit_name ,  pay_billing_unit_rate_history . comp_code ,  emp_name ,  grade_desc , cast(CONCAT( pay_billing_unit_rate_history . hours , ' HRS ',  pay_billing_unit_rate_history . month_days , ' DAYS') as char) AS 'DUTYHRS',  tot_days_present ,  emp_basic_vda ,  bonus_amount_billing ,  pay_billing_unit_rate_history . washing ,  pay_billing_unit_rate_history . travelling ,  pay_billing_unit_rate_history . education , IF( esic_oa_billing  = 1,  pay_billing_unit_rate_history . allowances , 0) AS 'allowances_esic',  cca_billing ,  pay_billing_unit_rate_history . other_allow ,  bonus_gross ,  leave_gross ,  gratuity_gross ,  pay_billing_unit_rate_history . hra , CASE WHEN  pay_billing_master_history . ot_policy_billing  = '1' THEN (( pay_billing_master_history . ot_amount_billing  /  pay_billing_unit_rate_history . month_days ) *  pay_billing_unit_rate_history . tot_days_present ) ELSE 0 END AS 'special_allowance',  pay_billing_unit_rate_history . gross ,  bonus_after_gross ,  leave_after_gross ,  gratuity_after_gross ,  NH ,  pf ,  esic , IF( bill_ser_uniform  = 1, (( pay_billing_unit_rate . uniform  /  pay_billing_unit_rate . month_days ) *  pay_billing_unit_rate_history . tot_days_present ), 0) AS 'uniform_ser',  pay_billing_unit_rate_history . group_insurance_billing ,  pay_billing_unit_rate_history . lwf , IF( bill_ser_operations  = 1, (( pay_billing_unit_rate . operational_cost  /  pay_billing_unit_rate . month_days ) *  pay_billing_unit_rate_history . tot_days_present ), 0) AS 'operational_cost',  pay_billing_unit_rate_history . allowances_no_esic  AS allowances_no_esic, amount AS 'sub_total_a', IF((ot_rate - esi_on_ot_amount) > 0, (ot_rate - esi_on_ot_amount), 0) AS 'ot_rate' ,  pay_billing_unit_rate_history . esic_ot ,  ot_hours , ( ot_rate ) AS 'sub_total_b', amount AS 'sub_total_ab',  relieving_charg , amount as sub_total_c , IF( bill_ser_uniform  = 0, (( pay_billing_unit_rate . uniform  /  pay_billing_unit_rate . month_days ) *  pay_billing_unit_rate_history . tot_days_present ), 0) AS 'uniform_no_ser', IF( bill_ser_operations  = 0, (( pay_billing_unit_rate . operational_cost  /  pay_billing_unit_rate . month_days ) *  pay_billing_unit_rate_history . tot_days_present ), 0) AS 'operational_cost_no_ser',  Service_charge ,(amount + IF(bill_ser_uniform = 0, ((pay_billing_unit_rate.uniform / pay_billing_unit_rate.month_days) * pay_billing_unit_rate_history.tot_days_present), 0)+ IF(bill_ser_operations = 0, ((pay_billing_unit_rate.operational_cost / pay_billing_unit_rate.month_days) * pay_billing_unit_rate_history.tot_days_present), 0)+Service_charge+(ot_rate * ot_hours)) as Amount,pay_billing_master_history.bill_bonus_percent ,pay_billing_master_history.leave_days,pay_billing_master_history.gratuity_percent , pay_billing_master_history.hra_percent, pay_billing_master_history.bill_pf_percent, pay_billing_master_history.bill_esic_percent,pay_billing_master_history.bill_service_charge,pay_billing_master_history.basic, pay_billing_master_history.vda ,pay_billing_unit_rate.bonus_rate,   ((pay_billing_master_history.group_insurance_billing/ pay_billing_unit_rate.month_days) * pay_billing_unit_rate_history.tot_days_present) AS 'group_insurance_billing_ser',IF(ot_hours > 0, ( ot_rate - esi_on_ot_amount), 0) AS 'ot_pr_hr_rate' , IF(ot_hours > 0 AND ot_rate > 0, esi_on_ot_amount, 0) AS 'esi_on_ot_amount',(ot_rate * ot_hours) AS 'ot_amount', pay_billing_unit_rate_history.conveyance_amount FROM  pay_billing_unit_rate_history  INNER JOIN  " + pay_billing_unit_rate + "   ON  pay_billing_unit_rate_history . comp_code  =  pay_billing_unit_rate . comp_code  AND  pay_billing_unit_rate_history . unit_code  =  pay_billing_unit_rate . unit_code  AND  pay_billing_unit_rate_history . month  =  pay_billing_unit_rate . month  AND  pay_billing_unit_rate_history . year  =  pay_billing_unit_rate . year  AND  pay_billing_unit_rate_history . grade_code  =  pay_billing_unit_rate.designation  INNER JOIN  " + pay_billing_master_history + "  ON  pay_billing_master_history . comp_code  =  pay_billing_unit_rate_history . comp_code   AND  pay_billing_master_history . billing_client_code  =  pay_billing_unit_rate_history . client_code  AND  pay_billing_master_history . billing_unit_code  =  pay_billing_unit_rate_history . unit_code  AND  pay_billing_master_history . month  =  pay_billing_unit_rate_history . month  AND  pay_billing_master_history . year  =  pay_billing_unit_rate_history . year  AND  pay_billing_master_history . designation  =  pay_billing_unit_rate_history . grade_code  AND  pay_billing_master_history . hours  =  pay_billing_unit_rate_history . hours  AND  pay_billing_master_history . type  = 'billing'   " + where + "  group by emp_code " + order_by_clause;
            }
            //finance copy
            else if (i == 2)
            {
                string rg_terms = "";

                //Akshay 23-04-2019
                if (ddl_client.SelectedValue == "RCPL")
                {
                    rg_terms = "AND (emp_code != '' OR emp_code IS NOT NULL)";
                }
                string start_end_date = "AND (start_date = 0 AND end_date = 0) " + billing_type;
                if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
                {
                    start_end_date = "AND (start_date = " + ddl_start_date_common.SelectedValue + " AND end_date = " + ddl_end_date_common.SelectedValue + ") " + billing_type;
                }

                where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + "  and flag != 0  " + where_state + rg_terms + " " + start_end_date;
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " and flag != 0 " + where_state + rg_terms + " " + start_end_date;
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " and flag != 0  " + where_state + rg_terms + " " + start_end_date;
                }
                if (ddl_client.SelectedValue == "HDFC")
                {
                    where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.unit_code='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and hdfc_type='manpower_bill' " + grade + " and pay_billing_unit_rate_history.flag != 0 " + start_end_date + "  group by pay_billing_unit_rate_history.unit_code,grade_desc  order by pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.unit_name";
                    if (ddl_billing_state.SelectedValue == "ALL")
                    {
                        where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and hdfc_type='manpower_bill' " + grade + " and pay_billing_unit_rate_history.flag != 0 " + start_end_date + " group by pay_billing_unit_rate_history.unit_code,grade_desc order by pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.unit_name";
                    }
                    else if (ddl_unitcode.SelectedValue == "ALL")
                    {
                        where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and hdfc_type='manpower_bill' " + grade + "  and pay_billing_unit_rate_history.flag != 0 " + start_end_date + " group by pay_billing_unit_rate_history.unit_code,grade_desc order by pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.unit_name";
                    }
                    //sql = "SELECT client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esic_ot, lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN LOCATE(company_state, state_name) THEN 0 ELSE ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 18) / 100), 2) END AS 'IGST18', CASE WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours, " + daterange + ", CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + ((bill_gross * esic_percent) / 100) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,(tot_days_present) as 'no_of_duties',zone,TOT_WORKING_DAYS,GRADE_CODE,month_days FROM (SELECT client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, (((emp_basic_vda) / 100) * pf_percent) AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing =1, allowances,0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent,  CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing',  CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing_ser', bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,zone,TOT_WORKING_DAYS,GRADE_CODE,month_days FROM (SELECT (SELECT client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code AND comp_code = '" + Session["COMP_CODE"].ToString() + "') AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, pay_employee_master.emp_name, pay_grade_master.grade_desc, SUM(((( pay_billing_master_history . basic  +  pay_billing_master_history . vda ) /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'emp_basic_vda', SUM((( pay_billing_unit_rate . hra  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'hra', CASE WHEN  bonus_taxable  = '1' THEN SUM((( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_gross', CASE WHEN  bonus_taxable  = '0' THEN SUM((( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_after_gross', CASE WHEN  leave_taxable  = '1' THEN SUM((( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_gross', CASE WHEN  leave_taxable  = '0' THEN SUM((( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_after_gross', CASE WHEN  gratuity_taxable  = '1' THEN SUM((( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_gross', CASE WHEN  gratuity_taxable  = '0' THEN SUM((( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_after_gross', SUM((( pay_billing_unit_rate . washing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'washing', SUM((( pay_billing_unit_rate . traveling  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'travelling', SUM((( pay_billing_unit_rate . education  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'education', SUM((( pay_billing_unit_rate . national_holiday_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'NH', SUM((( pay_billing_unit_rate . allowances  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'allowances', SUM(CASE WHEN  pay_employee_master . cca  = 0 THEN ((( pay_billing_unit_rate . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE ((( pay_employee_master . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) END) AS 'cca_billing', SUM(CASE WHEN  pay_employee_master . special_allow  = 0 THEN ((( pay_billing_master_history . other_allow  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE ( pay_employee_master . special_allow ) END) AS 'other_allow', CASE WHEN  pay_billing_master_history . ot_policy_billing  = '1' THEN SUM((( pay_billing_master_history . ot_amount_billing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'hrs_12_ot',  pay_billing_master_history . bill_esic_percent  AS 'esic_percent',  pay_billing_master_history . bill_pf_percent  AS 'pf_percent', SUM((((pay_billing_unit_rate.lwf) / (pay_billing_unit_rate.month_days)) * (pay_attendance_muster.tot_days_present))) AS 'lwf', SUM((( pay_billing_unit_rate . uniform  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'uniform', SUM((( pay_billing_unit_rate . relieving_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'relieving_charg', SUM((( pay_billing_unit_rate . operational_cost  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'operational_cost', SUM(pay_attendance_muster.tot_days_present) as tot_days_present, ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate',  SUM(pay_attendance_muster.ot_hours) as 'ot_hours', pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', sum(IF(pay_employee_master.Employee_type = 'Permanent' OR pay_employee_master.Employee_type = 'Reliever' OR pay_employee_master.Employee_type ='PermanentReliever',((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present),0)) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, bill_service_charge_amount,pay_unit_master.txt_zone, branch_cost_centre_code, adminhead_name, 'IH&MS'as ihms	, pay_unit_master.location_type, pay_unit_master.	unit_add1, case emp_count when '1' then 'A' when '2' then 'B' else 'C' end as emp_count , case emp_count when '1' then 'Single - 8 Hrs. Shift (1 SG)' when '2' then 'Double - 16 Hrs. Shift (2 SG)' ELSE concat('Triple - 24 Hrs. Shift (', emp_count ,'SG)') end as emp_count1 , 'STATE ' as 'state_per',emp_count as 'total_emp_count',zone,TOT_WORKING_DAYS,pay_grade_master.GRADE_CODE,pay_billing_master_history.esic_oa_billing,pay_billing_unit_rate.month_days FROM pay_employee_master INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE WHERE " + where;
                    // sql = "SELECT CASE WHEN invoice_flag != 0 AND pay_billing_unit_rate_history.month <= 3 AND pay_billing_unit_rate_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', client_code, client, state_name,branch_type, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, SUM(hra) as 'hra', SUM(bonus_gross) as 'bonus_gross', SUM(leave_gross) as 'leave_gross', SUM(gratuity_gross) as 'gratuity_gross', SUM(washing) as 'washing', SUM(travelling) as 'travelling', SUM(education) as 'education', SUM(allowances) as 'allowances', SUM(cca_billing) as 'cca_billing', SUM(other_allow) as 'other_allow', SUM(gross) as 'gross', SUM(bonus_after_gross) as 'bonus_after_gross', SUM(leave_after_gross) as 'leave_after_gross', SUM(gratuity_after_gross) as 'gratuity_after_gross', SUM(pf) as 'pf', SUM(esic) as 'esic', SUM(hrs_12_ot) as 'hrs_12_ot' , SUM(esic_ot) as 'esic_ot', SUM(lwf) as 'lwf', SUM(uniform) as 'uniform', SUM(relieving_charg) as 'relieving_charg', SUM(operational_cost) as 'operational_cost', SUM(tot_days_present) as 'tot_days_present',sum(Amount) as 'Amount', SUM(Service_charge) as 'Service_charge', SUM(CGST9) as 'CGST9', SUM(IGST18) as 'IGST18', SUM(SGST9) as 'SGST9', bill_service_charge , NH, hours, fromtodate,sub_total_c, max(ot_rate) as 'ot_rate', SUM(ot_hours) as 'ot_hours', SUM(ot_amount) as 'ot_amount', group_insurance_billing, bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count2 AS 'emp_count', emp_count1, state_per, branch_cost_centre_code, SUM(IF(EMP_TYPE = 'Permanent', 1, 0)) as 'total_emp_count', sum(no_of_duties) as 'no_of_duties', zone, TOT_WORKING_DAYS, GRADE_CODE, month_days FROM pay_billing_unit_rate_history " + where;
                    sql = "SELECT CASE WHEN invoice_flag != 0 AND pay_billing_unit_rate_history.month <= 3 AND pay_billing_unit_rate_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', pay_billing_unit_rate_history.client_code, client, pay_billing_unit_rate_history.state_name, pay_billing_unit_rate_history.branch_type, pay_billing_unit_rate_history.unit_name, pay_billing_unit_rate_history.unit_city, pay_billing_unit_rate_history.client_branch_code, emp_name, grade_desc, emp_basic_vda, SUM(hra) AS 'hra', SUM(bonus_gross) AS 'bonus_gross', SUM(leave_gross) AS 'leave_gross', SUM(gratuity_gross) AS 'gratuity_gross', SUM(washing) AS 'washing', SUM(travelling) AS 'travelling', SUM(education) AS 'education', SUM(allowances) AS 'allowances', SUM(cca_billing) AS 'cca_billing', SUM(other_allow) AS 'other_allow', SUM(gross) AS 'gross', SUM(bonus_after_gross) AS 'bonus_after_gross', SUM(leave_after_gross) AS 'leave_after_gross', SUM(gratuity_after_gross) AS 'gratuity_after_gross', SUM(pf) AS 'pf', SUM(esic) AS 'esic', SUM(hrs_12_ot) AS 'hrs_12_ot', SUM(esic_ot) AS 'esic_ot', SUM(lwf) AS 'lwf', SUM(uniform) AS 'uniform', SUM(relieving_charg) AS 'relieving_charg', SUM(operational_cost) AS 'operational_cost', SUM(tot_days_present) AS 'tot_days_present', SUM(Amount) AS 'Amount', SUM(Service_charge) AS 'Service_charge', SUM(CGST9) AS 'CGST9', SUM(IGST18) AS 'IGST18', SUM(SGST9) AS 'SGST9', bill_service_charge, NH, hours, fromtodate, (amount * month_days/tot_days_present) as 'sub_total_c', MAX(ot_rate) AS 'ot_rate', SUM(ot_hours) AS 'ot_hours', SUM(ot_amount) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount, pay_billing_unit_rate_history.txt_zone, pay_billing_unit_rate_history.adminhead_name, ihms, pay_billing_unit_rate_history.location_type, pay_billing_unit_rate_history.unit_add1, emp_count2 AS 'emp_count', emp_count1, state_per, pay_billing_unit_rate_history.branch_cost_centre_code, SUM(IF(EMP_TYPE = 'Permanent', 1, 0)) AS 'total_emp_count', SUM(no_of_duties) AS 'no_of_duties', pay_billing_unit_rate_history.zone, TOT_WORKING_DAYS, GRADE_CODE, month_days, material_area,(SELECT  field2 FROM pay_zone_master WHERE pay_zone_master.comp_code = pay_billing_unit_rate_history.comp_code AND pay_zone_master.CLIENT_CODE = pay_billing_unit_rate_history.CLIENT_CODE AND pay_zone_master.ZONE = pay_unit_master.txt_zone AND type = 'ZONE' AND field1 = 'admin') AS 'zonal_name' FROM pay_billing_unit_rate_history INNER JOIN pay_unit_master ON pay_billing_unit_rate_history.comp_code = pay_unit_master.comp_code AND pay_billing_unit_rate_history.unit_code = pay_unit_master.unit_code " + where;
                }
                //Changes 02-10-2019 BAGICTM FC
                else if (ddl_client.SelectedValue == "BAGICTM")
                {
                    where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_billing_unit_rate_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.year = '" + txt_month_year.Text.Substring(3) + "' " + grade + "  and flag != 0  " + rg_terms + " " + start_end_date;
                    if (ddl_billing_state.SelectedValue == "ALL")
                    {
                        where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "'  and pay_billing_unit_rate_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " and flag != 0 " + rg_terms + " " + start_end_date;
                    }
                    else if (ddl_unitcode.SelectedValue == "ALL")
                    {
                        where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedValue + "'  and pay_billing_unit_rate_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " and flag != 0  " + rg_terms + " " + start_end_date;
                    }
                    //sql = "SELECT client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esic_ot, lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN LOCATE(company_state, state_name) THEN 0 ELSE ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 18) / 100), 2) END AS 'IGST18', CASE WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours, " + daterange + ", CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + ((bill_gross * esic_percent) / 100) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,(tot_days_present) as 'no_of_duties',zone,TOT_WORKING_DAYS,GRADE_CODE,month_days FROM (SELECT client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, (((emp_basic_vda) / 100) * pf_percent) AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing =1, allowances,0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent,  CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing',  CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing_ser', bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,zone,TOT_WORKING_DAYS,GRADE_CODE,month_days FROM (SELECT (SELECT client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code AND comp_code = '" + Session["COMP_CODE"].ToString() + "') AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, pay_employee_master.emp_name, pay_grade_master.grade_desc, SUM(((( pay_billing_master_history . basic  +  pay_billing_master_history . vda ) /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'emp_basic_vda', SUM((( pay_billing_unit_rate . hra  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'hra', CASE WHEN  bonus_taxable  = '1' THEN SUM((( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_gross', CASE WHEN  bonus_taxable  = '0' THEN SUM((( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_after_gross', CASE WHEN  leave_taxable  = '1' THEN SUM((( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_gross', CASE WHEN  leave_taxable  = '0' THEN SUM((( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_after_gross', CASE WHEN  gratuity_taxable  = '1' THEN SUM((( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_gross', CASE WHEN  gratuity_taxable  = '0' THEN SUM((( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_after_gross', SUM((( pay_billing_unit_rate . washing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'washing', SUM((( pay_billing_unit_rate . traveling  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'travelling', SUM((( pay_billing_unit_rate . education  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'education', SUM((( pay_billing_unit_rate . national_holiday_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'NH', SUM((( pay_billing_unit_rate . allowances  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'allowances', SUM(CASE WHEN  pay_employee_master . cca  = 0 THEN ((( pay_billing_unit_rate . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE ((( pay_employee_master . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) END) AS 'cca_billing', SUM(CASE WHEN  pay_employee_master . special_allow  = 0 THEN ((( pay_billing_master_history . other_allow  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE ( pay_employee_master . special_allow ) END) AS 'other_allow', CASE WHEN  pay_billing_master_history . ot_policy_billing  = '1' THEN SUM((( pay_billing_master_history . ot_amount_billing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'hrs_12_ot',  pay_billing_master_history . bill_esic_percent  AS 'esic_percent',  pay_billing_master_history . bill_pf_percent  AS 'pf_percent', SUM((((pay_billing_unit_rate.lwf) / (pay_billing_unit_rate.month_days)) * (pay_attendance_muster.tot_days_present))) AS 'lwf', SUM((( pay_billing_unit_rate . uniform  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'uniform', SUM((( pay_billing_unit_rate . relieving_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'relieving_charg', SUM((( pay_billing_unit_rate . operational_cost  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'operational_cost', SUM(pay_attendance_muster.tot_days_present) as tot_days_present, ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate',  SUM(pay_attendance_muster.ot_hours) as 'ot_hours', pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', sum(IF(pay_employee_master.Employee_type = 'Permanent' OR pay_employee_master.Employee_type = 'Reliever' OR pay_employee_master.Employee_type ='PermanentReliever',((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present),0)) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, bill_service_charge_amount,pay_unit_master.txt_zone, branch_cost_centre_code, adminhead_name, 'IH&MS'as ihms	, pay_unit_master.location_type, pay_unit_master.	unit_add1, case emp_count when '1' then 'A' when '2' then 'B' else 'C' end as emp_count , case emp_count when '1' then 'Single - 8 Hrs. Shift (1 SG)' when '2' then 'Double - 16 Hrs. Shift (2 SG)' ELSE concat('Triple - 24 Hrs. Shift (', emp_count ,'SG)') end as emp_count1 , 'STATE ' as 'state_per',emp_count as 'total_emp_count',zone,TOT_WORKING_DAYS,pay_grade_master.GRADE_CODE,pay_billing_master_history.esic_oa_billing,pay_billing_unit_rate.month_days FROM pay_employee_master INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE WHERE " + where;

                    sql = "SELECT txt_zone,zone,CASE WHEN invoice_flag != 0 AND pay_billing_unit_rate_history.month <= 3 AND pay_billing_unit_rate_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', pay_billing_unit_rate_history.client_code, CASE WHEN pay_billing_unit_rate_history.client_code = 'BAGIC TM' THEN 'BAJAJ ALLIANZ GENERAL INSURANCE CO. LTD' ELSE client END AS 'client', state_name, unit_name, unit_city, client_branch_code, pay_billing_unit_rate_history.emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esic_ot, lwf, uniform, relieving_charg, operational_cost, tot_days_present, amount AS 'Amount', Service_charge,CGST9, SGST9, IGST18, bill_service_charge, NH, hours, fromtodate, (amount * month_days / tot_days_present) AS 'sub_total_c', ot_rate, ot_hours, ot_amount, group_insurance_billing, bill_service_charge_amount, bill_service_charge_amount, branch_type, month_days, gst_applicable, OPus_NO, pay_billing_unit_rate_history.unit_code, conveyance_amount AS 'conveyance_rate'  FROM  pay_billing_unit_rate_history " + where + " order by 7,8,11";
                }
                else
                {
                    //sql = "SELECT client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esic_ot, lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN LOCATE(company_state, state_name) THEN 0 ELSE ROUND(((((Total + pf + esic + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 18) / 100), 2) END AS 'IGST18', CASE WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours," + daterange + ", CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + ((bill_gross * esic_percent) / 100) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount,branch_type,month_days,gst_applicable,OPus_NO FROM (SELECT client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, (((emp_basic_vda) / 100) * pf_percent) AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing =1, allowances,0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot+IF(esic_common_allow = 0, common_allow, 0)) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent, IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing', IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing_ser', bill_service_charge_amount,branch_type,month_days,gst_applicable,OPus_NO FROM (SELECT client_name  AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, pay_employee_master.emp_name, pay_grade_master.grade_desc, (((pay_billing_master_history.basic + pay_billing_master_history.vda) / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'emp_basic_vda', ((pay_billing_unit_rate.hra / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'hra', CASE WHEN bonus_taxable = '1' THEN ((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN ((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN ((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN ((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN ((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN ((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_after_gross', ((pay_billing_unit_rate.washing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'washing', ((pay_billing_unit_rate.traveling / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'travelling', ((pay_billing_unit_rate.education / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'education', ((pay_billing_unit_rate.national_holiday_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'NH', ((pay_billing_unit_rate.allowances / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'allowances', CASE WHEN pay_employee_master.cca = 0 THEN ((pay_billing_unit_rate.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE ((pay_employee_master.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) END AS 'cca_billing', CASE WHEN pay_employee_master.special_allow = 0 THEN ((pay_billing_unit_rate.otherallowance / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE pay_employee_master.special_allow END AS 'other_allow', CASE WHEN pay_billing_master_history.ot_policy_billing = '1' THEN ((pay_billing_master_history.ot_amount_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history.bill_esic_percent AS 'esic_percent', pay_billing_master_history.bill_pf_percent AS 'pf_percent', ((pay_billing_unit_rate.lwf / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'lwf', ((pay_billing_unit_rate.uniform / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'uniform', ((pay_billing_unit_rate.relieving_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'relieving_charg', ((pay_billing_unit_rate.operational_cost / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'operational_cost', pay_attendance_muster.tot_days_present, ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate', pay_attendance_muster.ot_hours, pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', ((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, ((bill_service_charge_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) as bill_service_charge_amount, pay_billing_master_history.esic_common_allow,CASE WHEN pay_employee_master.special_allow = 0 THEN ((pay_billing_unit_rate.common_allowance / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE (( pay_employee_master . special_allow/  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present) END AS 'common_allow',IFNULL(branch_type,0) as 'branch_type',pay_billing_master_history.esic_oa_billing,pay_billing_unit_rate.month_days,gst_applicable,OPus_NO FROM pay_employee_master INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE  " + where;
                    sql = "SELECT txt_zone,zone,CASE WHEN invoice_flag != 0 AND pay_billing_unit_rate_history.month <= 3 AND pay_billing_unit_rate_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', client_code,case when client_code = 'BAGIC TM' then 'BAJAJ ALLIANZ GENERAL INSURANCE CO. LTD' else client end AS 'client',state_name,unit_name,unit_city,client_branch_code,emp_name,grade_desc,emp_basic_vda,hra,bonus_gross,leave_gross,gratuity_gross,washing,travelling,education,allowances,cca_billing,other_allow,gross,bonus_after_gross,leave_after_gross,gratuity_after_gross,pf,esic,hrs_12_ot,esic_ot,lwf,uniform,relieving_charg,operational_cost,tot_days_present,amount as 'Amount',Service_charge,CGST9,IGST18,SGST9,bill_service_charge,NH,hours,fromtodate,(amount * month_days/tot_days_present) as 'sub_total_c',ot_rate,ot_hours,ot_amount,group_insurance_billing,bill_service_charge_amount,bill_service_charge_amount,branch_type,month_days,gst_applicable,OPus_NO,unit_code from pay_billing_unit_rate_history  " + where + " " + order_by_clause;
                }
            }
            //client attendance
            else if (i == 3)
            {
                if (ddl_invoice_type.SelectedValue == "2" && ddl_arrears_type.SelectedValue != "Select")
                {
                    grade = " and pay_billing_unit_rate_history.grade_code = '" + ddl_designation.SelectedValue + "'";

                }
                from_to_date = from_to_date + " " + billing_type;
                if (start_date_common != "" && start_date_common != "1")
                {
                    //d.update_attendance(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text, int.Parse(start_date_common));
                    where = " pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_unit_rate_history.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_billing_unit_rate_history.tot_days_present > 0  " + flag + " " + grade + "  " + from_to_date;
                    if (ddl_billing_state.SelectedValue == "ALL")
                    {
                        where = " pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_billing_unit_rate_history.tot_days_present > 0 " + flag + " " + grade + "  " + from_to_date;
                    }
                    else if (ddl_unitcode.SelectedValue == "ALL")
                    {
                        where = " pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "'  and pay_billing_unit_rate_history.tot_days_present > 0  " + flag + " " + grade + "  " + from_to_date;
                    }

                    if (ddl_invoice_type.SelectedValue == "2") { where = " pay_billing_unit_rate_history.grade_code = '" + ddl_designation.SelectedValue + "' and " + where; }
                    string getdays = "";
                    if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
                    {
                        getdays = get_selected_days();
                        month_days = DateTime.DaysInMonth(int.Parse(txt_month_year.Text.Substring(3)), int.Parse(txt_month_year.Text.Substring(0, 2)));
                    }
                    else
                    {
                        getdays = d.get_calendar_days(int.Parse(start_date_common), txt_month_year.Text, 1, 2);
                    }
                    if (!getdays.Contains("DAY31"))
                    {
                        getdays = getdays + " 0 as 'DAY31',";
                    }
                    if (!getdays.Contains("DAY30"))
                    {
                        getdays = getdays + " 0 as 'DAY30',";
                    }
                    if (!getdays.Contains("DAY29"))
                    {
                        getdays = getdays + " 0 as 'DAY29',";
                    }
                    if (!getdays.Contains("DAY28"))
                    {
                        getdays = getdays + " 0 as 'DAY28',";
                    }
                    sql = "select pay_billing_unit_rate_history.client_code,pay_billing_unit_rate_history.zone, pay_billing_unit_rate_history.txt_zone,pay_billing_unit_rate_history.state_name,branch_type, pay_billing_unit_rate_history.unit_city,pay_billing_unit_rate_history.unit_name, pay_billing_unit_rate_history.client_branch_code, pay_billing_unit_rate_history.emp_name, pay_billing_unit_rate_history.grade_desc,pay_attendance_muster.ot_hours ," + getdays + " pay_attendance_muster.tot_days_present, pay_attendance_muster.tot_days_absent as absent, pay_attendance_muster.tot_working_days as 'total days',IF(pay_employee_master.LEFT_DATE IS NULL, 'CONTINUE', 'LEFT') AS 'STATUS' from pay_billing_unit_rate_history INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_billing_unit_rate_history.emp_code and pay_attendance_muster.comp_code = pay_billing_unit_rate_history.comp_code AND   pay_attendance_muster.unit_code = pay_billing_unit_rate_history.unit_code   AND  pay_attendance_muster . month  =  pay_billing_unit_rate_history . month  AND  pay_attendance_muster . year  =  pay_billing_unit_rate_history . year INNER JOIN pay_employee_master ON pay_employee_master.COMP_CODE = pay_attendance_muster.COMP_CODE AND pay_employee_master.UNIT_CODE = pay_attendance_muster.UNIT_CODE AND pay_employee_master.EMP_CODE = pay_attendance_muster.EMP_CODE  left join pay_attendance_muster t2 on  t2.year = " + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? int.Parse(txt_month_year.Text.Substring(3)) - 1 : int.Parse(txt_month_year.Text.Substring(3))) + " and pay_attendance_muster.COMP_CODE = t2.COMP_CODE and pay_attendance_muster.UNIT_CODE = t2.UNIT_CODE and pay_attendance_muster.EMP_CODE = t2.EMP_CODE and t2.month = " + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? 12 : int.Parse(txt_month_year.Text.Substring(0, 2)) - 1) + " where " + where + " " + order_by_clause;

                }
                else
                {
                    string hdfc_type = "";
                    if (ddl_client.SelectedValue == "HDFC")
                    { hdfc_type = "  and hdfc_type='manpower_bill'"; }
                    where = " pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_unit_rate_history.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_billing_unit_rate_history.tot_days_present > 0  " + flag + "  " + grade +hdfc_type+ "  " + from_to_date;
                    if (ddl_billing_state.SelectedValue == "ALL")
                    {
                        where = " pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_billing_unit_rate_history.tot_days_present > 0  " + flag + "  " + grade +hdfc_type+ "  " + from_to_date;
                    }
                    else if (ddl_unitcode.SelectedValue == "ALL")
                    {
                        where = "pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_billing_unit_rate_history.tot_days_present > 0 " + flag + "  " + grade +hdfc_type+ "  " + from_to_date;
                    }
                    if (ddl_invoice_type.SelectedValue == "2") { where = " pay_billing_unit_rate_history.grade_code = '" + ddl_designation.SelectedValue + "' and " + where; }
                    sql = "select pay_billing_unit_rate_history.client_code, pay_billing_unit_rate_history.zone, pay_billing_unit_rate_history.txt_zone, pay_billing_unit_rate_history.state_name, branch_type, pay_billing_unit_rate_history.unit_city,pay_billing_unit_rate_history.unit_name, pay_billing_unit_rate_history.client_branch_code, pay_billing_unit_rate_history.emp_name, pay_billing_unit_rate_history.grade_desc,pay_attendance_muster.ot_hours , case when DAY01 = '0' then 'A' else DAY01 end as DAY01, case when DAY02 = '0' then 'A' else DAY02 end as DAY02, case when DAY03 = '0' then 'A' else DAY03 end as DAY03, case when DAY04 = '0' then 'A' else DAY04 end as DAY04, case when DAY05 = '0' then 'A' else DAY05 end as DAY05, case when DAY06 = '0' then 'A' else DAY06 end as DAY06, case when DAY07 = '0' then 'A' else DAY07 end as DAY07, case when DAY08 = '0' then 'A' else DAY08 end as DAY08, case when DAY09 = '0' then 'A' else DAY09 end as DAY09, case when DAY10 = '0' then 'A' else DAY10 end as DAY10, case when DAY11 = '0' then 'A' else DAY11 end as DAY11, case when DAY12 = '0' then 'A' else DAY12 end as DAY12, case when DAY13 = '0' then 'A' else DAY13 end as DAY13, case when DAY14 = '0' then 'A' else DAY14 end as DAY14, case when DAY15 = '0' then 'A' else DAY15 end as DAY15, case when DAY16 = '0' then 'A' else DAY16 end as DAY16, case when DAY17 = '0' then 'A' else DAY17 end as DAY17, case when DAY18 = '0' then 'A' else DAY18 end as DAY18, case when DAY19 = '0' then 'A' else DAY19 end as DAY19, case when DAY20 = '0' then 'A' else DAY20 end as DAY20, case when DAY21 = '0' then 'A' else DAY21 end as DAY21, case when DAY22 = '0' then 'A' else DAY22 end as DAY22, case when DAY23 = '0' then 'A' else DAY23 end as DAY23, case when DAY24 = '0' then 'A' else DAY24 end as DAY24, case when DAY25 = '0' then 'A' else DAY25 end as DAY25, case when DAY26 = '0' then 'A' else DAY26 end as DAY26, case when DAY27 = '0' then 'A' else DAY27 end as DAY27, case when DAY28 = '0' then 'A' else DAY28 end as DAY28, case when DAY29 = '0' then 'A' else DAY29 end as DAY29, case when DAY30 = '0' then 'A' else DAY30 end as DAY30, case when DAY31 = '0' then 'A' else DAY31 end as DAY31, pay_attendance_muster.tot_days_present, CASE WHEN (pay_attendance_muster.tot_working_days - pay_attendance_muster.tot_days_present) < 0 THEN 0 ELSE pay_attendance_muster.tot_working_days - pay_attendance_muster.tot_days_present END AS 'absent',DAY(LAST_DAY('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-1')) AS 'total days', IF(pay_employee_master.LEFT_DATE IS NULL, 'CONTINUE', 'LEFT') AS 'STATUS' from pay_billing_unit_rate_history INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_billing_unit_rate_history.emp_code and pay_attendance_muster.comp_code = pay_billing_unit_rate_history.comp_code  and pay_attendance_muster.unit_code = pay_billing_unit_rate_history.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate_history.month AND pay_attendance_muster.year = pay_billing_unit_rate_history.year  INNER JOIN pay_employee_master ON pay_employee_master.COMP_CODE = pay_attendance_muster.COMP_CODE AND pay_employee_master.UNIT_CODE = pay_attendance_muster.UNIT_CODE AND pay_employee_master.EMP_CODE = pay_attendance_muster.EMP_CODE where " + where + " " + order_by_clause;

                }
            }
            else if (i == 4)
            {
                if (ddl_client.SelectedValue == "UTKARSH")
                {
                    where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 group BY pay_unit_master.state_name order by 4,3) AS billing_table) as Final_billing";
                    if (ddl_billing_state.SelectedValue == "ALL")
                    {
                        where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 group BY pay_unit_master.state_name order by 4,3) AS billing_table) as Final_billing";
                    }
                    else if (ddl_unitcode.SelectedValue == "ALL")
                    {
                        where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0  order by 4,3) AS billing_table) as Final_billing";
                    }
                    sql = "SELECT client, state_name, unit_name, unit_city,uniform, relieving_charg, operational_cost,client_branch_code, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN LOCATE(company_state, state_name) THEN 0 ELSE ROUND(((((Total + pf + esic + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 18) / 100), 2) END AS 'IGST18', CASE WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge,IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount,branch_type,state_gst,client_code FROM (SELECT client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, (((emp_basic_vda) / 100) * pf_percent) AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent, IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing', CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing_ser', bill_service_charge_amount,branch_type,state_gst,client_code FROM (SELECT (SELECT client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code AND comp_code = '" + Session["COMP_CODE"].ToString() + "') AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, pay_employee_master.emp_name, pay_grade_master.grade_desc, (((pay_billing_master_history.basic + pay_billing_master_history.vda) / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'emp_basic_vda', ((pay_billing_unit_rate.hra / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'hra', CASE WHEN bonus_taxable = '1' THEN ((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN ((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN ((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN ((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN ((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN ((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_after_gross', ((pay_billing_unit_rate.washing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'washing', ((pay_billing_unit_rate.traveling / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'travelling', ((pay_billing_unit_rate.education / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'education', ((pay_billing_unit_rate.national_holiday_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'NH', ((pay_billing_unit_rate.allowances / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'allowances', CASE WHEN pay_employee_master.cca = 0 THEN ((pay_billing_unit_rate.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE ((pay_employee_master.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) END AS 'cca_billing', CASE WHEN pay_employee_master.special_allow = 0 THEN ((pay_billing_master_history.other_allow / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE pay_employee_master.special_allow END AS 'other_allow', CASE WHEN pay_billing_master_history.ot_policy_billing = '1' THEN ((pay_billing_master_history.ot_amount_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history.bill_esic_percent AS 'esic_percent', pay_billing_master_history.bill_pf_percent AS 'pf_percent', ((pay_billing_unit_rate.lwf / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'lwf', ((pay_billing_unit_rate.uniform / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'uniform', ((pay_billing_unit_rate.relieving_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'relieving_charg', ((pay_billing_unit_rate.operational_cost / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'operational_cost', pay_attendance_muster.tot_days_present, ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate', pay_attendance_muster.ot_hours, pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', ((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type,((bill_service_charge_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) as bill_service_charge_amount,IFNULL(branch_type,0) as 'branch_type',(SELECT  Field2  FROM  pay_zone_master  WHERE  comp_code  = '" + Session["COMP_CODE"].ToString() + "' AND  client_code  = '" + ddl_client.SelectedValue + "' AND  Type  = 'GST' AND  REGION  = '" + ddl_billing_state.SelectedValue + "') AS 'state_gst',pay_unit_master.client_code FROM pay_employee_master INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE WHERE " + where;
                }
                else if (ddl_client.SelectedValue == "MAX")
                {
                    if (ddl_invoice_type.SelectedValue == "1")
                    {
                        where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 group by pay_unit_master.unit_code, pay_grade_master.GRADE_CODE order by pay_unit_master.state_name,pay_unit_master.unit_name";
                        if (ddl_billing_state.SelectedValue == "ALL")
                        {
                            where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 group by pay_unit_master.unit_code, pay_grade_master.GRADE_CODE order by pay_unit_master.state_name,pay_unit_master.unit_name";
                        }
                        else if (ddl_unitcode.SelectedValue == "ALL")
                        {
                            where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 group by pay_unit_master.unit_code, pay_grade_master.GRADE_CODE order by pay_unit_master.state_name,pay_unit_master.unit_name";
                        }

                    }
                    else
                    {

                        where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 and pay_grade_master.grade_code = '" + ddl_designation.SelectedValue + "' group by pay_unit_master.unit_code, pay_grade_master.GRADE_CODE order by pay_unit_master.state_name,pay_unit_master.unit_name";
                        if (ddl_billing_state.SelectedValue == "ALL")
                        {
                            where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 and pay_grade_master.grade_code = '" + ddl_designation.SelectedValue + "' group by pay_unit_master.unit_code, pay_grade_master.GRADE_CODE order by pay_unit_master.state_name,pay_unit_master.unit_name";
                        }
                        else if (ddl_unitcode.SelectedValue == "ALL")
                        {
                            where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 and pay_grade_master.grade_code = '" + ddl_designation.SelectedValue + "' group by pay_unit_master.unit_code, pay_grade_master.GRADE_CODE order by pay_unit_master.state_name,pay_unit_master.unit_name";
                        }
                    }
                    sql = "SELECT  pay_unit_master.client_code,pay_unit_master . unit_name ,  pay_unit_master . state_name ,  pay_grade_master . grade_desc , (SELECT COUNT( pay_employee_master . emp_code ) FROM  pay_employee_master  WHERE  comp_code  =  pay_company_master . comp_code  AND  unit_code  =  pay_unit_master . unit_code  AND  grade_code  =  pay_grade_master . grade_code  AND  employee_type  = 'Permanent') AS 'emp_count', SUM( TOT_DAYS_PRESENT ) AS 'Present_Days',  pay_billing_unit_rate . grand_total , (( pay_billing_unit_rate . grand_total  /  pay_billing_unit_rate . month_days ) * SUM( TOT_DAYS_PRESENT )) AS 'Amount',date_format('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01' ,'%b-%Y') AS 'month' FROM pay_employee_master INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE WHERE " + where;
                }

                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Support Format Only for UTKARSH SMALL FINANCE BANK LTD.');", true);
                    return null;
                }
            }

            if (i == 5)
            {
                where = " WHERE pay_billing_unit_rate.month = " + txt_month_year.Text.Substring(0, 2) + " AND pay_billing_unit_rate.Year = " + txt_month_year.Text.Substring(3) + " and pay_billing_master_history.billing_state = '" + ddl_billing_state.SelectedValue + "' and  pay_billing_unit_rate.comp_code='" + Session["COMP_CODE"].ToString() + "' and pay_billing_unit_rate.client_code='" + ddl_client.SelectedValue + "'";

                if (ddl_billing_state.SelectedValue == "ALL")
                {

                    where = " WHERE pay_billing_unit_rate.month = " + txt_month_year.Text.Substring(0, 2) + " AND pay_billing_unit_rate.Year = " + txt_month_year.Text.Substring(3) + " and  pay_billing_unit_rate.comp_code='" + Session["COMP_CODE"].ToString() + "' and pay_billing_unit_rate.client_code='" + ddl_client.SelectedValue + "'";
                }

                // vinod sir query
                // sql = "SELECT client_name AS 'client', pay_billing_master_history.billing_state, pay_billing_master_history.designation, (pay_billing_master_history.basic + pay_billing_master_history.vda) AS 'emp_basic_vda', pay_billing_master_history.basic AS 'actual_basic', pay_billing_master_history.vda AS 'actual_vda', pay_billing_unit_rate.hra AS 'hra', CASE WHEN bonus_taxable = '1' THEN pay_billing_unit_rate.bonus_amount ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN pay_billing_unit_rate.bonus_amount ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN pay_billing_unit_rate.leave_amount ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN pay_billing_unit_rate.leave_amount ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN pay_billing_unit_rate.grauity_amount ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN pay_billing_unit_rate.grauity_amount ELSE 0 END AS 'gratuity_after_gross', pay_billing_unit_rate.washing AS 'washing', pay_billing_unit_rate.traveling AS 'travelling', pay_billing_unit_rate.education AS 'education', pay_billing_unit_rate.allowances AS 'allowances', pay_billing_unit_rate.cca AS 'cca_billing', pay_billing_unit_rate.otherallowance AS 'other_allow', CASE WHEN pay_billing_master_history.ot_policy_billing = '1' THEN pay_billing_master_history.ot_amount_billing ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history.bill_esic_percent AS 'esic_percent', pay_billing_master_history.bill_pf_percent AS 'pf_percent', pay_billing_unit_rate.lwf AS 'monthlwf', CASE WHEN pay_billing_master_history.pf_cmn_on = 0 THEN pay_billing_unit_rate.lwf ELSE 0 END AS 'lwf', pay_billing_unit_rate.uniform AS 'uniform', pay_billing_unit_rate.relieving_amount AS 'relieving_charg', pay_billing_unit_rate.operational_cost AS 'operational_cost', ROUND(pay_billing_unit_rate.sub_total_c, 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate', pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', pay_billing_master_history.group_insurance_billing AS 'group_insurance_billing', service_group_insurance_billing, bill_service_charge_amount AS 'bill_service_charge_amount', pay_billing_master_history.esic_common_allow, pay_billing_unit_rate.common_allowance AS 'common_allow', pay_billing_master_history.esic_oa_billing, pay_billing_master_history.pf_cmn_on FROM pay_billing_unit_rate INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_client_master ON pay_billing_master_history.billing_client_code = pay_client_master.client_code " + where + " group by pay_billing_master_history.billing_state, pay_billing_master_history.designation ORDER BY 1,2,3";
                //sql = "SELECT pay_billing_unit_rate . comp_code , client_name AS 'client', pay_billing_master_history . billing_state , grade_desc , cast(CONCAT( pay_billing_master_history . hours , ' HRS ', pay_billing_unit_rate . month_days , ' DAYS') as char) AS 'DUTYHRS', ( pay_billing_master_history . basic + pay_billing_master_history . vda ) AS 'emp_basic_vda', pay_billing_master_history . basic AS 'actual_basic', pay_billing_master_history . vda AS 'actual_vda', pay_billing_unit_rate . hra , CASE WHEN bonus_taxable = '1' THEN pay_billing_unit_rate . bonus_amount ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN pay_billing_unit_rate . bonus_amount ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN pay_billing_unit_rate . leave_amount ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN pay_billing_unit_rate . leave_amount ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN pay_billing_unit_rate . grauity_amount ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN pay_billing_unit_rate . grauity_amount ELSE 0 END AS 'gratuity_after_gross', if(esic_oa_billing=0,0, pay_billing_unit_rate . allowances ) as 'allowances', if(esic_oa_billing=1,0, pay_billing_unit_rate . allowances ) as 'allowances_after_gross', pay_billing_unit_rate . washing , pay_billing_unit_rate . traveling AS 'travelling', pay_billing_unit_rate . education , pay_billing_unit_rate . cca AS 'cca_billing', pay_billing_unit_rate . otherallowance AS 'other_allow', CASE WHEN pay_billing_master_history . ot_policy_billing = '1' THEN pay_billing_master_history . ot_amount_billing ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history . bill_esic_percent AS 'esic_percent', pay_billing_master_history . bill_pf_percent AS 'pf_percent', pay_billing_unit_rate . lwf AS 'monthlwf', CASE WHEN pay_billing_master_history . pf_cmn_on = 0 THEN pay_billing_unit_rate . lwf ELSE 0 END AS 'lwf', pay_billing_unit_rate . uniform , pay_billing_unit_rate . relieving_amount AS 'relieving_charg', pay_billing_unit_rate . operational_cost , ROUND( pay_billing_unit_rate . sub_total_c , 2) AS 'baseamount', bill_service_charge , pay_billing_master_history . hours , pay_billing_unit_rate . sub_total_c , pay_billing_master_history . bill_ser_operations , pay_billing_master_history . bill_ser_uniform , pay_billing_unit_rate . ot_1_hr_amount AS 'ot_rate', pay_billing_unit_rate . esic_amount , pay_billing_unit_rate . esi_on_ot_amount , pay_billing_unit_rate . gross AS 'bill_gross', pay_billing_unit_rate . pf_amount AS 'bill_pf', pay_billing_unit_rate . uniform AS 'bill_uniform', pay_billing_master_history . group_insurance_billing , service_group_insurance_billing , bill_service_charge_amount , pay_billing_master_history . esic_common_allow , pay_billing_unit_rate . common_allowance AS 'common_allow', pay_billing_master_history . esic_oa_billing , pay_billing_master_history . pf_cmn_on , pay_billing_master_history . bill_bonus_percent , pay_billing_master_history . leave_days , gratuity_percent , hra_percent , bonus_rate , CASE WHEN bill_ser_uniform = '1' THEN pay_billing_master_history . bill_uniform_rate ELSE 0 END AS 'uniform_gross', CASE WHEN bill_ser_uniform = '0' THEN pay_billing_master_history . bill_uniform_rate ELSE 0 END AS 'uniform_after_gross', CASE WHEN pay_billing_master_history . bill_ser_operations = '1' THEN pay_billing_master_history . bill_oper_cost_amt ELSE 0 END AS 'operational_gross', CASE WHEN pay_billing_master_history . bill_ser_operations = '0' THEN pay_billing_master_history . bill_uniform_rate ELSE 0 END AS 'operational_after_gross', 0 AS 'special_allowance', 0 AS 'NH', 0 AS 'rate', 0 AS 'grandtotoal' FROM pay_billing_unit_rate INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_client_master ON pay_billing_master_history.billing_client_code = pay_client_master.client_code  inner join pay_grade_master on  pay_billing_unit_rate.comp_code = pay_grade_master.comp_code and pay_billing_unit_rate.designation = pay_grade_master.grade_code " + where + " group by pay_billing_master_history.billing_state, pay_billing_master_history.designation ORDER BY 1,2,3";

                sql = "SELECT pay_billing_unit_rate.comp_code, client_name AS 'client', pay_billing_master_history.billing_state, unit_name, grade_desc, CAST(CONCAT(pay_billing_master_history.hours, ' HRS ', pay_billing_unit_rate.month_days, ' DAYS') AS char) AS 'DUTYHRS', (pay_billing_master_history.basic + pay_billing_master_history.vda) AS 'emp_basic_vda', pay_billing_master_history.basic AS 'actual_basic', pay_billing_master_history.vda AS 'actual_vda', pay_billing_unit_rate.hra, CASE WHEN bonus_taxable = '1' THEN pay_billing_unit_rate.bonus_amount ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN pay_billing_unit_rate.bonus_amount ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN pay_billing_unit_rate.leave_amount ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN pay_billing_unit_rate.leave_amount ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN pay_billing_unit_rate.grauity_amount ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN pay_billing_unit_rate.grauity_amount ELSE 0 END AS 'gratuity_after_gross', IF(esic_oa_billing = 0, 0, pay_billing_unit_rate.allowances) AS 'allowances', IF(esic_oa_billing = 1, 0, pay_billing_unit_rate.allowances) AS 'allowances_after_gross', pay_billing_unit_rate.washing, pay_billing_unit_rate.traveling AS 'travelling', pay_billing_unit_rate.education, pay_billing_unit_rate.cca AS 'cca_billing', pay_billing_unit_rate.otherallowance AS 'other_allow', CASE WHEN pay_billing_master_history.ot_policy_billing = '1' THEN pay_billing_master_history.ot_amount_billing ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history.bill_esic_percent AS 'esic_percent', pay_billing_master_history.bill_pf_percent AS 'pf_percent', pay_billing_unit_rate.lwf AS 'monthlwf', CASE WHEN pay_billing_master_history.pf_cmn_on = 0 THEN pay_billing_unit_rate.lwf ELSE 0 END AS 'lwf', pay_billing_unit_rate.uniform, pay_billing_unit_rate.relieving_amount AS 'relieving_charg', pay_billing_unit_rate.operational_cost, ROUND(pay_billing_unit_rate.sub_total_c, 2) AS 'baseamount', bill_service_charge, 0 AS 'hours', pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate', pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', pay_billing_master_history.group_insurance_billing, service_group_insurance_billing, bill_service_charge_amount, pay_billing_master_history.esic_common_allow, pay_billing_unit_rate.common_allowance AS 'common_allow', pay_billing_master_history.esic_oa_billing, pay_billing_master_history.pf_cmn_on, pay_billing_master_history.bill_bonus_percent, pay_billing_master_history.leave_days, gratuity_percent, hra_percent, bonus_rate, CASE WHEN bill_ser_uniform = '1' THEN pay_billing_master_history.bill_uniform_rate ELSE 0 END AS 'uniform_gross', CASE WHEN bill_ser_uniform = '0' THEN pay_billing_master_history.bill_uniform_rate ELSE 0 END AS 'uniform_after_gross', CASE WHEN pay_billing_master_history.bill_ser_operations = '1' THEN pay_billing_master_history.bill_oper_cost_amt ELSE 0 END AS 'operational_gross', CASE WHEN pay_billing_master_history.bill_ser_operations = '0' THEN pay_billing_master_history.bill_uniform_rate ELSE 0 END AS 'operational_after_gross', 0 AS 'special_allowance', 0 AS 'NH', 0 AS 'rate', 0 AS 'grandtotoal' FROM pay_billing_unit_rate INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_client_master ON pay_billing_master_history.billing_client_code = pay_client_master.client_code INNER JOIN pay_unit_master ON pay_billing_master_history.billing_client_code = pay_unit_master.client_code AND pay_billing_master_history.billing_unit_code = pay_unit_master.unit_code INNER JOIN pay_grade_master ON pay_billing_unit_rate.comp_code = pay_grade_master.comp_code AND pay_billing_unit_rate.designation = pay_grade_master.grade_code " + where + " group by pay_billing_master_history.billing_state,pay_billing_master_history.billing_unit_code,pay_billing_master_history.designation ORDER BY 1,2,3";
            }
            // vikas add arrears rate breakup
            else if (i == 6)
            {

                string old_month = "", new_month = "", new_yera = "", old_month_year = "", new_month_year = "", year = "";
                string start_date = "1";
                if (ddl_arrears_type.SelectedValue.Equals("month"))
                {

                    old_month = txt_month_year.Text.Substring(0, 2);
                    old_month_year = " and pay_billing_unit_rate_history_arrears.month in (" + txt_month_year.Text.Substring(0, 2) + ") and pay_billing_unit_rate_history_arrears.year in (" + txt_month_year.Text.Substring(3) + ")";
                    new_month_year = " and pay_billing_unit_rate_history_arrears.month in (" + txt_month_year.Text.Substring(0, 2) + ") and pay_billing_unit_rate_history_arrears.year in (" + txt_month_year.Text.Substring(3) + ")";

                }
                else
                {
                    old_month = txt_arrear_month_year.Text.Substring(3, 2);
                    old_month_year = " and pay_billing_unit_rate_history_arrears.month in (" + txt_arrear_month_year.Text.Substring(3, 2) + ") and pay_billing_unit_rate_history_arrears.year in (" + txt_arrear_month_year.Text.Substring(6) + ")";
                    new_month_year = " and pay_billing_unit_rate_history_arrears.month in (" + txt_arrear_month_year.Text.Substring(3, 2) + ") and pay_billing_unit_rate_history_arrears.year in (" + txt_arrear_month_year.Text.Substring(6) + ")";


                }
                if (start_date != "1")
                {
                    month_name = d.getmont1(old_month);
                    month_name = month_name.Substring(0, month_name.Length - 1);
                }
                else { month_name = d.getmont1(old_month); }
                month_name = month_name + " /" + year2.ToUpper();
                month_name = month_name + " " + year.ToUpper();
                // grade = grade + " " + from_to_date;
                where = " WHERE pay_billing_unit_rate_history_arrears.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history_arrears.client_code = '" + ddl_client.SelectedValue + "' and state_name  = '" + ddl_billing_state.SelectedValue + "' and pay_billing_unit_rate_history_arrears.unit_code = '" + ddl_unitcode.SelectedValue + "'  " + grade;

                if (ddl_billing_state.SelectedValue == "ALL")
                {

                    where = " WHERE pay_billing_unit_rate_history_arrears.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history_arrears.client_code = '" + ddl_client.SelectedValue + "'   " + grade;
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {

                    where = " WHERE pay_billing_unit_rate_history_arrears.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history_arrears.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history_arrears . state_name  = '" + ddl_billing_state.SelectedValue + "'  " + grade;
                }
                if (new_month != "")
                {
                    sql = "SELECT DISTINCT emp_code, 'old' as 'aa',pay_billing_unit_rate_history_arrears.month,pay_billing_unit_rate_history_arrears.year, client,  state_name,  branch_type,  unit_name,  pay_billing_unit_rate_history_arrears.comp_code,  emp_name,  grade_desc,  CONCAT(pay_billing_unit_rate_history_arrears.hours, ' HRS ', pay_billing_unit_rate_history_arrears.month_days, ' DAYS') AS 'DUTYHRS',  tot_days_present,  emp_basic_vda,  bonus_amount_billing,  pay_billing_unit_rate_history_arrears.washing,  pay_billing_unit_rate_history_arrears.travelling,  pay_billing_unit_rate_history_arrears.education,  IF(esic_oa_billing = 1, pay_billing_unit_rate_history_arrears.allowances, 0) AS 'allowances_esic',  cca_billing,  pay_billing_unit_rate_history_arrears.other_allow,  bonus_gross,  leave_gross,  gratuity_gross,  pay_billing_unit_rate_history_arrears.hra,  CASE WHEN pay_billing_master_history_arrears.ot_policy_billing = '1' THEN ((pay_billing_master_history_arrears.ot_amount_billing / pay_billing_unit_rate_history_arrears.month_days) * pay_billing_unit_rate_history_arrears.tot_days_present) ELSE 0 END AS 'special_allowance',  pay_billing_unit_rate_history_arrears.gross,  bonus_after_gross,  leave_after_gross,  gratuity_after_gross,  NH,  ifnull(pf,0) as 'pf',  ifnull(esic,0) as 'esic',   '0' AS 'uniform_ser',  pay_billing_unit_rate_history_arrears.group_insurance_billing,  pay_billing_unit_rate_history_arrears.lwf,  '0' AS 'operational_cost',  IF(esic_oa_billing = 0, pay_billing_unit_rate_history_arrears.allowances, 0) AS 'allowances_no_esic',  ifnull(amount,0) AS 'sub_total_a',  IF((ot_rate - esi_on_ot_amount) > 0, (ot_rate - esi_on_ot_amount), 0) AS 'ot_rate',  pay_billing_unit_rate_history_arrears.esic_ot,  ot_hours,  ifnull(ot_rate,0) AS 'sub_total_b',  ifnull(amount,0) AS 'sub_total_ab',  ifnull(relieving_charg,0) as 'relieving_charg',  ifnull(amount,0) AS 'sub_total_c',  '0' AS 'uniform_no_ser',   '0' AS 'operational_cost_no_ser', ifnull(Service_charge,0) as 'Service_charge',  ((ifnull(amount,0))  + (ifnull(Service_charge,0))  + (ot_rate * ot_hours)) AS 'Amount',  pay_billing_master_history_arrears.bill_bonus_percent,  pay_billing_master_history_arrears.leave_days,  pay_billing_master_history_arrears.gratuity_percent,  pay_billing_master_history_arrears.hra_percent,  pay_billing_master_history_arrears.bill_pf_percent,  pay_billing_master_history_arrears.bill_esic_percent,  pay_billing_master_history_arrears.bill_service_charge,  pay_billing_master_history_arrears.basic,  pay_billing_master_history_arrears.vda,  pay_billing_unit_rate_arrears.bonus_rate,  '0' AS 'group_insurance_billing_ser',  IF(ot_hours > 0, (ot_rate - esi_on_ot_amount), 0) AS 'ot_pr_hr_rate',  IF(ot_hours > 0 AND ot_rate > 0, esi_on_ot_amount, 0) AS 'esi_on_ot_amount',  (ot_rate * ot_hours) AS 'ot_amount'  FROM  pay_billing_unit_rate_history_arrears  INNER JOIN pay_billing_unit_rate_arrears  ON  pay_billing_unit_rate_history_arrears.comp_code = pay_billing_unit_rate_arrears.comp_code  AND pay_billing_unit_rate_history_arrears.unit_code = pay_billing_unit_rate_arrears.unit_code  AND pay_billing_unit_rate_history_arrears.month = pay_billing_unit_rate_arrears.month  AND pay_billing_unit_rate_history_arrears.year = pay_billing_unit_rate_arrears.year  AND pay_billing_unit_rate_history_arrears.grade_code = pay_billing_unit_rate_arrears.designation  INNER JOIN pay_billing_master_history_arrears  ON  pay_billing_master_history_arrears.comp_code = pay_billing_unit_rate_history_arrears.comp_code  AND pay_billing_master_history_arrears.billing_client_code = pay_billing_unit_rate_history_arrears.client_code  AND pay_billing_master_history_arrears.billing_unit_code = pay_billing_unit_rate_history_arrears.unit_code  AND pay_billing_master_history_arrears.month = pay_billing_unit_rate_history_arrears.month  AND pay_billing_master_history_arrears.year = pay_billing_unit_rate_history_arrears.year  AND pay_billing_master_history_arrears.designation = pay_billing_unit_rate_history_arrears.grade_code  AND pay_billing_master_history_arrears.hours = pay_billing_unit_rate_history_arrears.hours  AND pay_billing_master_history_arrears.type = 'billing'  " + where + " " + old_month_year + " union SELECT DISTINCT emp_code, 'old' as 'aa',pay_billing_unit_rate_history_arrears.month,pay_billing_unit_rate_history_arrears.year, client,  state_name,  branch_type,  unit_name,  pay_billing_unit_rate_history_arrears.comp_code,  emp_name,  grade_desc,  CONCAT(pay_billing_unit_rate_history_arrears.hours, ' HRS ', pay_billing_unit_rate_history_arrears.month_days, ' DAYS') AS 'DUTYHRS',  tot_days_present,  emp_basic_vda,  bonus_amount_billing,  pay_billing_unit_rate_history_arrears.washing,  pay_billing_unit_rate_history_arrears.travelling,  pay_billing_unit_rate_history_arrears.education,  IF(esic_oa_billing = 1, pay_billing_unit_rate_history_arrears.allowances, 0) AS 'allowances_esic',  cca_billing,  pay_billing_unit_rate_history_arrears.other_allow,  bonus_gross,  leave_gross,  gratuity_gross,  pay_billing_unit_rate_history_arrears.hra,  CASE WHEN pay_billing_master_history_arrears.ot_policy_billing = '1' THEN ((pay_billing_master_history_arrears.ot_amount_billing / pay_billing_unit_rate_history_arrears.month_days) * pay_billing_unit_rate_history_arrears.tot_days_present) ELSE 0 END AS 'special_allowance',  pay_billing_unit_rate_history_arrears.gross,  bonus_after_gross,  leave_after_gross,  gratuity_after_gross,  NH,  ifnull(pf,0) as 'pf',  ifnull(esic,0) as 'esic',  IF(bill_ser_uniform = 1, ((pay_billing_unit_rate_arrears.uniform / pay_billing_unit_rate_arrears.month_days) * pay_billing_unit_rate_history_arrears.tot_days_present), 0) AS 'uniform_ser',  pay_billing_unit_rate_history_arrears.group_insurance_billing,  pay_billing_unit_rate_history_arrears.lwf,  IF(bill_ser_operations = 1, ((pay_billing_unit_rate_arrears.operational_cost / pay_billing_unit_rate_arrears.month_days) * pay_billing_unit_rate_history_arrears.tot_days_present), 0) AS 'operational_cost',  IF(esic_oa_billing = 0, pay_billing_unit_rate_history_arrears.allowances, 0) AS 'allowances_no_esic',  ifnull(amount,0) AS 'sub_total_a',  IF((ot_rate - esi_on_ot_amount) > 0, (ot_rate - esi_on_ot_amount), 0) AS 'ot_rate',  pay_billing_unit_rate_history_arrears.esic_ot,  ot_hours,  ifnull(ot_rate,0) AS 'sub_total_b',  ifnull(amount,0) AS 'sub_total_ab',  ifnull(relieving_charg,0) as 'relieving_charg',  ifnull(amount,0) AS 'sub_total_c',  IF(bill_ser_uniform = 0, ((pay_billing_unit_rate_arrears.uniform / pay_billing_unit_rate_arrears.month_days) * pay_billing_unit_rate_history_arrears.tot_days_present), 0) AS 'uniform_no_ser',  IF(bill_ser_operations = 0, ((pay_billing_unit_rate_arrears.operational_cost / pay_billing_unit_rate_arrears.month_days) * pay_billing_unit_rate_history_arrears.tot_days_present), 0) AS 'operational_cost_no_ser', ifnull(Service_charge,0) as 'Service_charge',  ((ifnull(amount,0))  + IF(bill_ser_uniform = 0, ((pay_billing_unit_rate_arrears.uniform / pay_billing_unit_rate_arrears.month_days) * pay_billing_unit_rate_history_arrears.tot_days_present), 0)  + IF(bill_ser_operations = 0, ((pay_billing_unit_rate_arrears.operational_cost / pay_billing_unit_rate_arrears.month_days) * pay_billing_unit_rate_history_arrears.tot_days_present), 0)  + (ifnull(Service_charge,0))  + (ot_rate * ot_hours)) AS 'Amount',  pay_billing_master_history_arrears.bill_bonus_percent,  pay_billing_master_history_arrears.leave_days,  pay_billing_master_history_arrears.gratuity_percent,  pay_billing_master_history_arrears.hra_percent,  pay_billing_master_history_arrears.bill_pf_percent,  pay_billing_master_history_arrears.bill_esic_percent,  pay_billing_master_history_arrears.bill_service_charge,  pay_billing_master_history_arrears.basic,  pay_billing_master_history_arrears.vda,  pay_billing_unit_rate_arrears.bonus_rate,  pay_billing_master_history_arrears.group_insurance_billing AS 'group_insurance_billing_ser',  IF(ot_hours > 0, (ot_rate - esi_on_ot_amount), 0) AS 'ot_pr_hr_rate',  IF(ot_hours > 0 AND ot_rate > 0, esi_on_ot_amount, 0) AS 'esi_on_ot_amount',  (ot_rate * ot_hours) AS 'ot_amount', pay_billing_unit_rate_history_arrears.conveyance_amount  FROM  pay_billing_unit_rate_history_arrears  INNER JOIN pay_billing_unit_rate_arrears  ON  pay_billing_unit_rate_history_arrears.comp_code = pay_billing_unit_rate_arrears.comp_code  AND pay_billing_unit_rate_history_arrears.unit_code = pay_billing_unit_rate_arrears.unit_code  AND pay_billing_unit_rate_history_arrears.month = pay_billing_unit_rate_arrears.month  AND pay_billing_unit_rate_history_arrears.year = pay_billing_unit_rate_arrears.year  AND pay_billing_unit_rate_history_arrears.grade_code = pay_billing_unit_rate_arrears.designation  INNER JOIN pay_billing_master_history_arrears  ON  pay_billing_master_history_arrears.comp_code = pay_billing_unit_rate_history_arrears.comp_code  AND pay_billing_master_history_arrears.billing_client_code = pay_billing_unit_rate_history_arrears.client_code  AND pay_billing_master_history_arrears.billing_unit_code = pay_billing_unit_rate_history_arrears.unit_code  AND pay_billing_master_history_arrears.month = pay_billing_unit_rate_history_arrears.month  AND pay_billing_master_history_arrears.year = pay_billing_unit_rate_history_arrears.year  AND pay_billing_master_history_arrears.designation = pay_billing_unit_rate_history_arrears.grade_code  AND pay_billing_master_history_arrears.hours = pay_billing_unit_rate_history_arrears.hours  AND pay_billing_master_history_arrears.type = 'billing'  " + where + " " + new_month_year + "  ORDER BY month,state_name, unit_name, emp_name";
                }
                else
                {
                    sql = "SELECT DISTINCT emp_code, 'old' as 'aa',pay_billing_unit_rate_history_arrears.month,pay_billing_unit_rate_history_arrears.year, client,  state_name,  branch_type,  unit_name,  pay_billing_unit_rate_history_arrears.comp_code,  emp_name,  grade_desc,  CONCAT(pay_billing_unit_rate_history_arrears.hours, ' HRS ', pay_billing_unit_rate_history_arrears.month_days, ' DAYS') AS 'DUTYHRS',  tot_days_present,  emp_basic_vda,  bonus_amount_billing,  pay_billing_unit_rate_history_arrears.washing,  pay_billing_unit_rate_history_arrears.travelling,  pay_billing_unit_rate_history_arrears.education,  IF(esic_oa_billing = 1, pay_billing_unit_rate_history_arrears.allowances, 0) AS 'allowances_esic',  cca_billing,  pay_billing_unit_rate_history_arrears.other_allow,  bonus_gross,  leave_gross,  gratuity_gross,  pay_billing_unit_rate_history_arrears.hra,  CASE WHEN pay_billing_master_history_arrears.ot_policy_billing = '1' THEN ((pay_billing_master_history_arrears.ot_amount_billing / pay_billing_unit_rate_history_arrears.month_days) * pay_billing_unit_rate_history_arrears.tot_days_present) ELSE 0 END AS 'special_allowance',  pay_billing_unit_rate_history_arrears.gross,  bonus_after_gross,  leave_after_gross,  gratuity_after_gross,  NH,  ifnull(pf,0) as 'pf',  ifnull(esic,0) as 'esic',   '0' AS 'uniform_ser',  pay_billing_unit_rate_history_arrears.group_insurance_billing,  pay_billing_unit_rate_history_arrears.lwf,   '0' AS 'operational_cost',  IF(esic_oa_billing = 0, pay_billing_unit_rate_history_arrears.allowances, 0) AS 'allowances_no_esic',  ifnull(amount,0) AS 'sub_total_a',  IF((ot_rate - esi_on_ot_amount) > 0, (ot_rate - esi_on_ot_amount), 0) AS 'ot_rate',  pay_billing_unit_rate_history_arrears.esic_ot,  ot_hours,  ifnull(ot_rate,0) AS 'sub_total_b',  ifnull(amount,0) AS 'sub_total_ab',  ifnull(relieving_charg,0) as 'relieving_charg',  ifnull(amount,0) AS 'sub_total_c',  '0' AS 'uniform_no_ser',  '0' AS 'operational_cost_no_ser', ifnull(Service_charge,0) as 'Service_charge',  ((ifnull(amount,0))  + (ifnull(Service_charge,0))  + (ot_rate * ot_hours)) AS 'Amount',  pay_billing_master_history_arrears.bill_bonus_percent,  pay_billing_master_history_arrears.leave_days,  pay_billing_master_history_arrears.gratuity_percent,  pay_billing_master_history_arrears.hra_percent,  pay_billing_master_history_arrears.bill_pf_percent,  pay_billing_master_history_arrears.bill_esic_percent,  pay_billing_master_history_arrears.bill_service_charge,  pay_billing_master_history_arrears.basic,  pay_billing_master_history_arrears.vda,  pay_billing_unit_rate_arrears.bonus_rate,  '0' AS 'group_insurance_billing_ser',  IF(ot_hours > 0, (ot_rate - esi_on_ot_amount), 0) AS 'ot_pr_hr_rate',  IF(ot_hours > 0 AND ot_rate > 0, esi_on_ot_amount, 0) AS 'esi_on_ot_amount',  (ot_rate * ot_hours) AS 'ot_amount', pay_billing_unit_rate_history_arrears.conveyance_amount  FROM  pay_billing_unit_rate_history_arrears  INNER JOIN pay_billing_unit_rate_arrears  ON  pay_billing_unit_rate_history_arrears.comp_code = pay_billing_unit_rate_arrears.comp_code  AND pay_billing_unit_rate_history_arrears.unit_code = pay_billing_unit_rate_arrears.unit_code  AND pay_billing_unit_rate_history_arrears.month = pay_billing_unit_rate_arrears.month  AND pay_billing_unit_rate_history_arrears.year = pay_billing_unit_rate_arrears.year  AND pay_billing_unit_rate_history_arrears.grade_code = pay_billing_unit_rate_arrears.designation  INNER JOIN pay_billing_master_history_arrears  ON  pay_billing_master_history_arrears.comp_code = pay_billing_unit_rate_history_arrears.comp_code  AND pay_billing_master_history_arrears.billing_client_code = pay_billing_unit_rate_history_arrears.client_code  AND pay_billing_master_history_arrears.billing_unit_code = pay_billing_unit_rate_history_arrears.unit_code  AND pay_billing_master_history_arrears.month = pay_billing_unit_rate_history_arrears.month  AND pay_billing_master_history_arrears.year = pay_billing_unit_rate_history_arrears.year  AND pay_billing_master_history_arrears.designation = pay_billing_unit_rate_history_arrears.grade_code  AND pay_billing_master_history_arrears.hours = pay_billing_unit_rate_history_arrears.hours  AND pay_billing_master_history_arrears.type = 'billing'  " + where + " " + old_month_year + "   ORDER BY pay_billing_unit_rate_history_arrears.month,pay_billing_unit_rate_history_arrears.state_name, pay_billing_unit_rate_history_arrears.unit_name, pay_billing_unit_rate_history_arrears.emp_name";
                }

            }
            //Arrears finance copy
            else if (i == 7)
            {
                string rg_terms = "";
                string where1 = "", month_list = "", year = "", new_yera = "", new_month = "", old_month_year = "", new_month_year = "";
                string order_by_clause1 = "   ORDER BY state_name,unit_name,emp_name";
                if (ddl_arrears_type.SelectedValue == "policy")
                {
                    new_month_year = "  month in (" + txt_arrear_month_year.Text.Substring(3, 2) + ") and year in (" + txt_arrear_month_year.Text.Substring(6) + ")";
                    old_month_year = "  month in (" + txt_arrear_month_year.Text.Substring(3, 2) + ") and year in (" + txt_arrear_month_year.Text.Substring(6) + ")";
                }
                else
                {
                    new_month_year = "  month in (" + txt_month_year.Text.Substring(0, 2) + ") and year in (" + txt_month_year.Text.Substring(3) + ")";
                    old_month_year = "  month in (" + txt_month_year.Text.Substring(0, 2) + ") and year in (" + txt_month_year.Text.Substring(3) + ")";
                }
                if (ddl_client.SelectedValue == "RCPL")
                {
                    rg_terms = "AND (emp_code != '' OR emp_code IS NOT NULL)";
                }
                string start_end_date = "AND (start_date = 0 AND end_date = 0) " + billing_type;
                if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
                {
                    start_end_date = "AND (start_date = " + ddl_start_date_common.SelectedValue + " AND end_date = " + ddl_end_date_common.SelectedValue + ") " + billing_type;
                }
                where1 = " and comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "'  " + grade + "  ";
                where = " comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + "  and flag != 0  " + where_state + rg_terms + " " + start_end_date;
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where1 = " and comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'   " + grade + " ";
                    where = " comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " and flag != 0 " + where_state + rg_terms + " " + start_end_date;
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where1 = " and  comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'   " + grade + "   ";
                    where = " comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " and flag != 0  " + where_state + rg_terms + " " + start_end_date;
                }
                if (ddl_client.SelectedValue == "HDFC")
                {
                    where1 = " and pay_billing_unit_rate_history_arrears.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history_arrears.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history_arrears.unit_code='" + ddl_unitcode.SelectedValue + "'  " + grade + "   group by pay_billing_unit_rate_history_arrears.unit_code,pay_billing_unit_rate_history_arrears.GRADE_CODE  order by pay_billing_unit_rate_history_arrears.state_name,pay_billing_unit_rate_history_arrears.unit_name";
                    where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " and flag != 0 " + start_end_date + "  group by unit_code,grade_desc  order by pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.unit_name";
                    if (ddl_billing_state.SelectedValue == "ALL")
                    {
                        where1 = " and pay_billing_unit_rate_history_arrears.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history_arrears.client_code= '" + ddl_client.SelectedValue + "'   " + grade + "  group by pay_billing_unit_rate_history_arrears.unit_code,pay_billing_unit_rate_history_arrears.GRADE_CODE  order by pay_billing_unit_rate_history_arrears.state_name,pay_billing_unit_rate_history_arrears.unit_name";
                        where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " and flag != 0 " + start_end_date + " group by unit_code,grade_desc order by pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.unit_name";
                    }
                    else if (ddl_unitcode.SelectedValue == "ALL")
                    {
                        where1 = " and pay_billing_unit_rate_history_arrears.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history_arrears.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history_arrears.state_name = '" + ddl_billing_state.SelectedValue + "'   " + grade + "   group by pay_billing_unit_rate_history_arrears.unit_code,pay_billing_unit_rate_history_arrears.GRADE_CODE order by pay_billing_unit_rate_history_arrears.state_name,pay_billing_unit_rate_history_arrears.unit_name";
                        where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + "  and flag != 0 " + start_end_date + " group by unit_code,grade_desc order by pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.unit_name";
                    }

                    // sql = "SELECT CASE WHEN invoice_flag != 0 AND month <= 3 AND year <= 2019 THEN IFNULL(invoice_no, '') WHEN invoice_flag != 0 AND month >= 4 AND year >= 2019 THEN IFNULL(auto_invoice_no, '') ELSE '' END AS 'bill_invoice_no', client_code, client, state_name,branch_type, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, SUM(hra) as 'hra', SUM(bonus_gross) as 'bonus_gross', SUM(leave_gross) as 'leave_gross', SUM(gratuity_gross) as 'gratuity_gross', SUM(washing) as 'washing', SUM(travelling) as 'travelling', SUM(education) as 'education', SUM(allowances) as 'allowances', SUM(cca_billing) as 'cca_billing', SUM(other_allow) as 'other_allow', SUM(gross) as 'gross', SUM(bonus_after_gross) as 'bonus_after_gross', SUM(leave_after_gross) as 'leave_after_gross', SUM(gratuity_after_gross) as 'gratuity_after_gross', SUM(pf) as 'pf', SUM(esic) as 'esic', SUM(hrs_12_ot) as 'hrs_12_ot' , SUM(esic_ot) as 'esic_ot', SUM(lwf) as 'lwf', SUM(uniform) as 'uniform', SUM(relieving_charg) as 'relieving_charg', SUM(operational_cost) as 'operational_cost', SUM(tot_days_present) as 'tot_days_present',sum(Amount) as 'Amount', SUM(Service_charge) as 'Service_charge', SUM(CGST9) as 'CGST9', SUM(IGST18) as 'IGST18', SUM(SGST9) as 'SGST9', bill_service_charge , NH, hours, fromtodate,sub_total_c, max(ot_rate) as 'ot_rate', SUM(ot_hours) as 'ot_hours', SUM(ot_amount) as 'ot_amount', group_insurance_billing, bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count2 AS 'emp_count', emp_count1, state_per, branch_cost_centre_code, SUM(IF(EMP_TYPE = 'Permanent', 1, 0)) as 'total_emp_count', sum(no_of_duties) as 'no_of_duties', zone, TOT_WORKING_DAYS, GRADE_CODE, month_days,material_area FROM pay_billing_unit_rate_history_arrears where  " + old_month_year + "" + where1 + "  ";
                    sql = "SELECT CASE WHEN invoice_flag != 0 AND month <= 3 AND year <= 2019 THEN IFNULL(invoice_no, '') WHEN invoice_flag != 0 AND month >= 4 AND year >= 2019 THEN IFNULL(auto_invoice_no, '') ELSE auto_invoice_no END AS 'bill_invoice_no', pay_billing_unit_rate_history_arrears.client_code, client, pay_billing_unit_rate_history_arrears.state_name, pay_billing_unit_rate_history_arrears.branch_type, pay_billing_unit_rate_history_arrears.unit_name, pay_billing_unit_rate_history_arrears.unit_city, pay_billing_unit_rate_history_arrears.client_branch_code, emp_name, grade_desc, emp_basic_vda, SUM(hra) AS 'hra', SUM(bonus_gross) AS 'bonus_gross', SUM(leave_gross) AS 'leave_gross', SUM(gratuity_gross) AS 'gratuity_gross', SUM(washing) AS 'washing', SUM(travelling) AS 'travelling', SUM(education) AS 'education', SUM(allowances) AS 'allowances', SUM(cca_billing) AS 'cca_billing', SUM(other_allow) AS 'other_allow', SUM(gross) AS 'gross', SUM(bonus_after_gross) AS 'bonus_after_gross', SUM(leave_after_gross) AS 'leave_after_gross', SUM(gratuity_after_gross) AS 'gratuity_after_gross', SUM(pf) AS 'pf', SUM(esic) AS 'esic', SUM(hrs_12_ot) AS 'hrs_12_ot', SUM(esic_ot) AS 'esic_ot', SUM(lwf) AS 'lwf', SUM(uniform) AS 'uniform', SUM(relieving_charg) AS 'relieving_charg', SUM(operational_cost) AS 'operational_cost', SUM(tot_days_present) AS 'tot_days_present', SUM(Amount) AS 'Amount', SUM(Service_charge) AS 'Service_charge', SUM(CGST9) AS 'CGST9', SUM(IGST18) AS 'IGST18', SUM(SGST9) AS 'SGST9', bill_service_charge, NH, hours, fromtodate, (amount * month_days/tot_days_present) as 'sub_total_c', MAX(ot_rate) AS 'ot_rate', SUM(ot_hours) AS 'ot_hours', SUM(ot_amount) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount, pay_billing_unit_rate_history_arrears.txt_zone, pay_billing_unit_rate_history_arrears.adminhead_name, ihms, pay_billing_unit_rate_history_arrears.location_type, pay_billing_unit_rate_history_arrears.unit_add1, emp_count2 AS 'emp_count', emp_count1, state_per, pay_billing_unit_rate_history_arrears.branch_cost_centre_code, SUM(IF(EMP_TYPE = 'Permanent', 1, 0)) AS 'total_emp_count', SUM(no_of_duties) AS 'no_of_duties', pay_billing_unit_rate_history_arrears.zone, TOT_WORKING_DAYS, GRADE_CODE, month_days,material_area FROM pay_billing_unit_rate_history_arrears INNER JOIN pay_unit_master ON pay_billing_unit_rate_history_arrears.comp_code = pay_unit_master.comp_code AND pay_billing_unit_rate_history_arrears.unit_code = pay_unit_master.unit_code  where  " + old_month_year + "" + where1 + "  ";

                }
                else if (ddl_client.SelectedValue == "BAGICTM")
                {
                    where1 = " and comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "'  " + grade + " ";
                    where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_billing_unit_rate_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.year = '" + txt_month_year.Text.Substring(3) + "' " + grade + "  and flag != 0  " + rg_terms + " " + start_end_date;
                    if (ddl_billing_state.SelectedValue == "ALL")
                    {
                        where1 = " and comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'   " + grade + "  ";
                        where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "'  and pay_billing_unit_rate_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " and flag != 0 " + rg_terms + " " + start_end_date;
                    }
                    else if (ddl_unitcode.SelectedValue == "ALL")
                    {
                        where1 = " and  comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'   " + grade + "   ";
                        where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedValue + "'  and pay_billing_unit_rate_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " and flag != 0  " + rg_terms + " " + start_end_date;
                    }

                    sql = "SELECT '' as 'txt_zone','' as 'zone',CASE WHEN invoice_flag != 0 AND month <= 3 AND year <= 2019 THEN IFNULL(invoice_no, '') WHEN invoice_flag != 0 AND month >= 4 AND year >= 2019 THEN IFNULL(auto_invoice_no, '') ELSE auto_invoice_no END AS 'bill_invoice_no', client_code, client, state_name,branch_type, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, SUM(hra) as 'hra', SUM(bonus_gross) as 'bonus_gross', SUM(leave_gross) as 'leave_gross', SUM(gratuity_gross) as 'gratuity_gross', SUM(washing) as 'washing', SUM(travelling) as 'travelling', SUM(education) as 'education', SUM(allowances) as 'allowances', SUM(cca_billing) as 'cca_billing', SUM(other_allow) as 'other_allow', SUM(gross) as 'gross', SUM(bonus_after_gross) as 'bonus_after_gross', SUM(leave_after_gross) as 'leave_after_gross', SUM(gratuity_after_gross) as 'gratuity_after_gross', SUM(pf) as 'pf', SUM(esic) as 'esic', SUM(hrs_12_ot) as 'hrs_12_ot' , SUM(esic_ot) as 'esic_ot', SUM(lwf) as 'lwf', SUM(uniform) as 'uniform', SUM(relieving_charg) as 'relieving_charg', SUM(operational_cost) as 'operational_cost', SUM(tot_days_present) as 'tot_days_present',ifnull(sum(Amount),0) as 'Amount', SUM(Service_charge) as 'Service_charge', ifnull(SUM(CGST9),0) as 'CGST9', ifnull(SUM(IGST18),0) as 'IGST18', ifnull(SUM(SGST9),0) as 'SGST9', bill_service_charge , NH, hours, fromtodate,(amount * month_days/tot_days_present) as 'sub_total_c', max(ot_rate) as 'ot_rate', SUM(ot_hours) as 'ot_hours', SUM(ot_amount) as 'ot_amount', group_insurance_billing, bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count2 AS 'emp_count', emp_count1, state_per, branch_cost_centre_code, SUM(IF(EMP_TYPE = 'Permanent', 1, 0)) as 'total_emp_count', sum(no_of_duties) as 'no_of_duties', zone, TOT_WORKING_DAYS, GRADE_CODE, month_days FROM pay_billing_unit_rate_history_arrears where " + old_month_year + "" + where1 + " group by unit_code  order by pay_billing_unit_rate_history_arrears.state_name,pay_billing_unit_rate_history_arrears.unit_name";


                }
                else
                {

                    sql = "SELECT '' as 'txt_zone','' as 'zone',CASE WHEN invoice_flag != 0 AND month <= 3 AND year <= 2019 THEN IFNULL(invoice_no, '') WHEN invoice_flag != 0 AND  year >= 2019 THEN IFNULL(auto_invoice_no, '') ELSE auto_invoice_no END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', client_code,case when client_code = 'BAGIC TM' then 'BAJAJ ALLIANZ GENERAL INSURANCE CO. LTD' else client end AS 'client',state_name,unit_name,unit_city,client_branch_code,emp_name,grade_desc,emp_basic_vda,hra,bonus_gross,leave_gross,gratuity_gross,washing,travelling,education,allowances,cca_billing,other_allow,gross,bonus_after_gross,leave_after_gross,gratuity_after_gross,ifnull( pf ,0) as 'pf',esic,hrs_12_ot,esic_ot,lwf,uniform,relieving_charg,operational_cost,tot_days_present,ifnull( amount ,0) as 'Amount', Service_charge as 'Service_charge',ifnull(CGST9,0) as 'CGST9',ifnull(IGST18,0) as 'IGST18',ifnull(SGST9,0) as 'SGST9',bill_service_charge,NH,hours,fromtodate,(amount * month_days/tot_days_present) as 'sub_total_c',ot_rate,ot_hours,ot_amount,group_insurance_billing,bill_service_charge_amount,bill_service_charge_amount,branch_type,month_days,gst_applicable,OPus_NO,unit_code from pay_billing_unit_rate_history_arrears where " + old_month_year + " " + where1 + " " + order_by_clause1;

                }
            }
            else if (i == 8)
            {
                start_date_common = "1";
                month_days = DateTime.DaysInMonth(int.Parse(txt_arrear_month_year.Text.Substring(6)), int.Parse(txt_arrear_month_year.Text.Substring(3, 2)));
                order_by_clause = "   ORDER BY pay_billing_unit_rate_history_arrears.client,pay_billing_unit_rate_history_arrears.state_name,pay_billing_unit_rate_history_arrears.unit_name,pay_billing_unit_rate_history_arrears.emp_name";
                pay_attendance_muster = " pay_attendance_muster_arrears as pay_attendance_muster ";
                where = " pay_billing_unit_rate_history_arrears.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_unit_rate_history_arrears.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_billing_unit_rate_history_arrears.month = '" + txt_arrear_month_year.Text.Substring(3, 2) + "' and pay_billing_unit_rate_history_arrears.Year = '" + txt_arrear_month_year.Text.Substring(6) + "' and pay_billing_unit_rate_history_arrears.tot_days_present > 0  " + flag + "  " + grade;
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = " pay_billing_unit_rate_history_arrears.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_unit_rate_history_arrears.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history_arrears.month = '" + txt_arrear_month_year.Text.Substring(3, 2) + "' and pay_billing_unit_rate_history_arrears.Year = '" + txt_arrear_month_year.Text.Substring(6) + "' and pay_billing_unit_rate_history_arrears.tot_days_present > 0  " + flag + "  " + grade;
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = "pay_billing_unit_rate_history_arrears.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_unit_rate_history_arrears.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history_arrears.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_billing_unit_rate_history_arrears.month = '" + txt_arrear_month_year.Text.Substring(3, 2) + "' and pay_billing_unit_rate_history_arrears.Year = '" + txt_arrear_month_year.Text.Substring(6) + "' and pay_billing_unit_rate_history_arrears.tot_days_present > 0 " + flag + "  " + grade;
                }

                sql = "select pay_billing_unit_rate_history_arrears.client_code, pay_billing_unit_rate_history_arrears.zone, pay_billing_unit_rate_history_arrears.txt_zone, pay_billing_unit_rate_history_arrears.state_name, branch_type, pay_billing_unit_rate_history_arrears.unit_city,pay_billing_unit_rate_history_arrears.unit_name, pay_billing_unit_rate_history_arrears.client_branch_code, pay_billing_unit_rate_history_arrears.emp_name, pay_billing_unit_rate_history_arrears.grade_desc,pay_attendance_muster.ot_hours , case when DAY01 = '0' then 'A' else DAY01 end as DAY01, case when DAY02 = '0' then 'A' else DAY02 end as DAY02, case when DAY03 = '0' then 'A' else DAY03 end as DAY03, case when DAY04 = '0' then 'A' else DAY04 end as DAY04, case when DAY05 = '0' then 'A' else DAY05 end as DAY05, case when DAY06 = '0' then 'A' else DAY06 end as DAY06, case when DAY07 = '0' then 'A' else DAY07 end as DAY07, case when DAY08 = '0' then 'A' else DAY08 end as DAY08, case when DAY09 = '0' then 'A' else DAY09 end as DAY09, case when DAY10 = '0' then 'A' else DAY10 end as DAY10, case when DAY11 = '0' then 'A' else DAY11 end as DAY11, case when DAY12 = '0' then 'A' else DAY12 end as DAY12, case when DAY13 = '0' then 'A' else DAY13 end as DAY13, case when DAY14 = '0' then 'A' else DAY14 end as DAY14, case when DAY15 = '0' then 'A' else DAY15 end as DAY15, case when DAY16 = '0' then 'A' else DAY16 end as DAY16, case when DAY17 = '0' then 'A' else DAY17 end as DAY17, case when DAY18 = '0' then 'A' else DAY18 end as DAY18, case when DAY19 = '0' then 'A' else DAY19 end as DAY19, case when DAY20 = '0' then 'A' else DAY20 end as DAY20, case when DAY21 = '0' then 'A' else DAY21 end as DAY21, case when DAY22 = '0' then 'A' else DAY22 end as DAY22, case when DAY23 = '0' then 'A' else DAY23 end as DAY23, case when DAY24 = '0' then 'A' else DAY24 end as DAY24, case when DAY25 = '0' then 'A' else DAY25 end as DAY25, case when DAY26 = '0' then 'A' else DAY26 end as DAY26, case when DAY27 = '0' then 'A' else DAY27 end as DAY27, case when DAY28 = '0' then 'A' else DAY28 end as DAY28, case when DAY29 = '0' then 'A' else DAY29 end as DAY29, case when DAY30 = '0' then 'A' else DAY30 end as DAY30, case when DAY31 = '0' then 'A' else DAY31 end as DAY31, pay_attendance_muster.tot_days_present, CASE WHEN (pay_attendance_muster.tot_working_days - pay_attendance_muster.tot_days_present) < 0 THEN 0 ELSE pay_attendance_muster.tot_working_days - pay_attendance_muster.tot_days_present END AS 'absent',DAY(LAST_DAY('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-1')) AS 'total days', IF(pay_employee_master.LEFT_DATE IS NULL, 'CONTINUE', 'LEFT') AS 'STATUS' from pay_billing_unit_rate_history_arrears INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_billing_unit_rate_history_arrears.emp_code and pay_attendance_muster.comp_code = pay_billing_unit_rate_history_arrears.comp_code  and pay_attendance_muster.unit_code = pay_billing_unit_rate_history_arrears.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate_history_arrears.month AND pay_attendance_muster.year = pay_billing_unit_rate_history_arrears.year  INNER JOIN pay_employee_master ON pay_employee_master.COMP_CODE = pay_attendance_muster.COMP_CODE AND pay_employee_master.UNIT_CODE = pay_attendance_muster.UNIT_CODE AND pay_employee_master.EMP_CODE = pay_attendance_muster.EMP_CODE where " + where + " " + order_by_clause;
            }
            //OT Finance Copy
            else if (i == 9)
            {
                string start_end_date = "AND (start_date = 0 AND end_date = 0) " + billing_type;
                if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
                {
                    start_end_date = "AND (start_date = " + ddl_start_date_common.SelectedValue + " AND end_date = " + ddl_end_date_common.SelectedValue + ") " + billing_type;
                }
                if (ddl_client.SelectedValue == "HDFC")
                {
                    where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.unit_code='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " AND hdfc_type = 'ot_bill' and pay_billing_unit_rate_history.flag != 0 " + start_end_date + "  group by pay_billing_unit_rate_history.unit_code,grade_desc  order by pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.unit_name";
                    if (ddl_billing_state.SelectedValue == "ALL")
                    {
                        where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " AND hdfc_type = 'ot_bill' and pay_billing_unit_rate_history.flag != 0 " + start_end_date + " group by pay_billing_unit_rate_history.unit_code,grade_desc order by pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.unit_name";
                    }
                    else if (ddl_unitcode.SelectedValue == "ALL")
                    {
                        where = "where pay_billing_unit_rate_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' " + grade + " AND hdfc_type = 'ot_bill'  and pay_billing_unit_rate_history.flag != 0 " + start_end_date + " group by pay_billing_unit_rate_history.unit_code,grade_desc order by pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.unit_name";
                    }
                    //sql = "SELECT client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esic_ot, lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN LOCATE(company_state, state_name) THEN 0 ELSE ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 18) / 100), 2) END AS 'IGST18', CASE WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours, " + daterange + ", CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + ((bill_gross * esic_percent) / 100) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,(tot_days_present) as 'no_of_duties',zone,TOT_WORKING_DAYS,GRADE_CODE,month_days FROM (SELECT client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, (((emp_basic_vda) / 100) * pf_percent) AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing =1, allowances,0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent,  CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing',  CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing_ser', bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,zone,TOT_WORKING_DAYS,GRADE_CODE,month_days FROM (SELECT (SELECT client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code AND comp_code = '" + Session["COMP_CODE"].ToString() + "') AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, pay_employee_master.emp_name, pay_grade_master.grade_desc, SUM(((( pay_billing_master_history . basic  +  pay_billing_master_history . vda ) /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'emp_basic_vda', SUM((( pay_billing_unit_rate . hra  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'hra', CASE WHEN  bonus_taxable  = '1' THEN SUM((( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_gross', CASE WHEN  bonus_taxable  = '0' THEN SUM((( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_after_gross', CASE WHEN  leave_taxable  = '1' THEN SUM((( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_gross', CASE WHEN  leave_taxable  = '0' THEN SUM((( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_after_gross', CASE WHEN  gratuity_taxable  = '1' THEN SUM((( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_gross', CASE WHEN  gratuity_taxable  = '0' THEN SUM((( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_after_gross', SUM((( pay_billing_unit_rate . washing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'washing', SUM((( pay_billing_unit_rate . traveling  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'travelling', SUM((( pay_billing_unit_rate . education  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'education', SUM((( pay_billing_unit_rate . national_holiday_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'NH', SUM((( pay_billing_unit_rate . allowances  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'allowances', SUM(CASE WHEN  pay_employee_master . cca  = 0 THEN ((( pay_billing_unit_rate . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE ((( pay_employee_master . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) END) AS 'cca_billing', SUM(CASE WHEN  pay_employee_master . special_allow  = 0 THEN ((( pay_billing_master_history . other_allow  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE ( pay_employee_master . special_allow ) END) AS 'other_allow', CASE WHEN  pay_billing_master_history . ot_policy_billing  = '1' THEN SUM((( pay_billing_master_history . ot_amount_billing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'hrs_12_ot',  pay_billing_master_history . bill_esic_percent  AS 'esic_percent',  pay_billing_master_history . bill_pf_percent  AS 'pf_percent', SUM((((pay_billing_unit_rate.lwf) / (pay_billing_unit_rate.month_days)) * (pay_attendance_muster.tot_days_present))) AS 'lwf', SUM((( pay_billing_unit_rate . uniform  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'uniform', SUM((( pay_billing_unit_rate . relieving_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'relieving_charg', SUM((( pay_billing_unit_rate . operational_cost  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'operational_cost', SUM(pay_attendance_muster.tot_days_present) as tot_days_present, ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate',  SUM(pay_attendance_muster.ot_hours) as 'ot_hours', pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', sum(IF(pay_employee_master.Employee_type = 'Permanent' OR pay_employee_master.Employee_type = 'Reliever' OR pay_employee_master.Employee_type ='PermanentReliever',((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present),0)) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, bill_service_charge_amount,pay_unit_master.txt_zone, branch_cost_centre_code, adminhead_name, 'IH&MS'as ihms	, pay_unit_master.location_type, pay_unit_master.	unit_add1, case emp_count when '1' then 'A' when '2' then 'B' else 'C' end as emp_count , case emp_count when '1' then 'Single - 8 Hrs. Shift (1 SG)' when '2' then 'Double - 16 Hrs. Shift (2 SG)' ELSE concat('Triple - 24 Hrs. Shift (', emp_count ,'SG)') end as emp_count1 , 'STATE ' as 'state_per',emp_count as 'total_emp_count',zone,TOT_WORKING_DAYS,pay_grade_master.GRADE_CODE,pay_billing_master_history.esic_oa_billing,pay_billing_unit_rate.month_days FROM pay_employee_master INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE WHERE " + where;
                    // sql = "SELECT CASE WHEN invoice_flag != 0 AND pay_billing_unit_rate_history.month <= 3 AND pay_billing_unit_rate_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', client_code, client, state_name,branch_type, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, SUM(hra) as 'hra', SUM(bonus_gross) as 'bonus_gross', SUM(leave_gross) as 'leave_gross', SUM(gratuity_gross) as 'gratuity_gross', SUM(washing) as 'washing', SUM(travelling) as 'travelling', SUM(education) as 'education', SUM(allowances) as 'allowances', SUM(cca_billing) as 'cca_billing', SUM(other_allow) as 'other_allow', SUM(gross) as 'gross', SUM(bonus_after_gross) as 'bonus_after_gross', SUM(leave_after_gross) as 'leave_after_gross', SUM(gratuity_after_gross) as 'gratuity_after_gross', SUM(pf) as 'pf', SUM(esic) as 'esic', SUM(hrs_12_ot) as 'hrs_12_ot' , SUM(esic_ot) as 'esic_ot', SUM(lwf) as 'lwf', SUM(uniform) as 'uniform', SUM(relieving_charg) as 'relieving_charg', SUM(operational_cost) as 'operational_cost', SUM(tot_days_present) as 'tot_days_present',sum(Amount) as 'Amount', SUM(Service_charge) as 'Service_charge', SUM(CGST9) as 'CGST9', SUM(IGST18) as 'IGST18', SUM(SGST9) as 'SGST9', bill_service_charge , NH, hours, fromtodate,sub_total_c, max(ot_rate) as 'ot_rate', SUM(ot_hours) as 'ot_hours', SUM(ot_amount) as 'ot_amount', group_insurance_billing, bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count2 AS 'emp_count', emp_count1, state_per, branch_cost_centre_code, SUM(IF(EMP_TYPE = 'Permanent', 1, 0)) as 'total_emp_count', sum(no_of_duties) as 'no_of_duties', zone, TOT_WORKING_DAYS, GRADE_CODE, month_days FROM pay_billing_unit_rate_history " + where;
                    sql = "SELECT  CASE WHEN invoice_flag != 0 AND pay_billing_unit_rate_history.month <= 3 AND pay_billing_unit_rate_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', pay_billing_unit_rate_history.client_code, client, pay_billing_unit_rate_history.state_name, pay_billing_unit_rate_history.branch_type, pay_billing_unit_rate_history.unit_name, pay_billing_unit_rate_history.unit_city, pay_billing_unit_rate_history.client_branch_code, emp_name, grade_desc, SUM(tot_days_present) AS 'tot_days_present', SUM(Amount) AS 'Amount', SUM(Service_charge) AS 'Service_charge', SUM(CGST9) AS 'CGST9', SUM(IGST18) AS 'IGST18', SUM(SGST9) AS 'SGST9', bill_service_charge, hours, fromtodate, MAX(ot_rate) AS 'ot_rate', SUM(ot_hours) AS 'ot_hours', SUM(ot_amount) AS 'ot_amount', bill_service_charge_amount, pay_billing_unit_rate_history.txt_zone, pay_billing_unit_rate_history.adminhead_name, ihms, pay_billing_unit_rate_history.location_type, pay_billing_unit_rate_history.unit_add1, emp_count2 AS 'emp_count', emp_count1, state_per, pay_billing_unit_rate_history.branch_cost_centre_code, SUM(IF(EMP_TYPE = 'Permanent', 1, 0)) AS 'total_emp_count', SUM(no_of_duties) AS 'no_of_duties', pay_billing_unit_rate_history.zone, TOT_WORKING_DAYS, GRADE_CODE, month_days, material_area FROM pay_billing_unit_rate_history INNER JOIN pay_unit_master ON pay_billing_unit_rate_history.comp_code = pay_unit_master.comp_code AND pay_billing_unit_rate_history.unit_code = pay_unit_master.unit_code " + where;
                }

            }
            //OT Rate breakup
            else if (i == 10)
            {
                grade = grade + " " + from_to_date;
                if (ddl_client.SelectedValue != "ALL")
                {
                    where = " WHERE pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history . state_name  = '" + ddl_billing_state.SelectedValue + "' and pay_billing_unit_rate_history.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' AND pay_billing_unit_rate_history.ot_hours != 0 AND hdfc_type = 'ot_bill'  " + where_state + grade;
                }
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = " WHERE pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "'  and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' AND pay_billing_unit_rate_history.ot_hours != 0 AND hdfc_type = 'ot_bill' " + where_state + grade;
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = " WHERE pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history . state_name  = '" + ddl_billing_state.SelectedValue + "'  and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' AND pay_billing_unit_rate_history.ot_hours != 0 AND hdfc_type = 'ot_bill' " + where_state + grade;
                }
                if (ddl_client.SelectedValue == "ALL")
                {
                    where = " WHERE pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "'  and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' AND pay_billing_unit_rate_history.ot_hours != 0 AND hdfc_type = 'ot_bill' " + where_state + grade;
                }
                //sql = "SELECT  state_name ,  unit_name ,  unit_city ,  emp_name ,  grade_desc ,DUTYHRS ,  tot_days_present ,  basic ,  vda ,  emp_basic_vda ,  bonus_rate ,  washing ,  travelling ,  education ,  allowances_esic ,  cca_billing ,  other_allow ,  bonus_gross ,  leave_gross ,  gratuity_gross ,  hra ,  special_allowance ,  gross ,  bonus_after_gross ,  leave_after_gross ,  gratuity_after_gross ,  NH ,  pf ,  esic ,  uniform_ser ,  group_insurance_billing ,  lwf ,  operational_cost ,  allowances_no_esic , ( gross  +  bonus_after_gross  +  leave_after_gross  +  gratuity_after_gross  +  NH  +  pf  +  esic  +  lwf  +  uniform_ser  +  operational_cost  +  allowances_no_esic ) AS 'sub_total_a',  ot_pr_hr_rate ,  esi_on_ot_amount ,  ot_hours , ( ot_pr_hr_rate  +  esi_on_ot_amount ) AS 'sub_total_b', ( gross  +  bonus_after_gross  +  leave_after_gross  +  gratuity_after_gross  +  NH  +  pf  +  esic  +  lwf  +  uniform_ser  +  operational_cost  +  allowances_no_esic  +  ot_pr_hr_rate  +  esi_on_ot_amount ) AS 'sub_total_ab',  relieving_charg , CASE WHEN  emp_cca  = 0 AND  branch_cca  != 0 THEN ((baseamount-bill_ot_rate)) WHEN  emp_cca  != 0 AND  branch_cca  != 0 THEN ((baseamount-bill_ot_rate)) WHEN  emp_cca  = 0 AND  branch_cca  = 0 THEN ((baseamount-bill_ot_rate)) ELSE ( bill_gross  + (( bill_gross  *  esic_percent ) / 100) +  bill_pf +lwf +  bill_uniform  +  group_insurance_billing_ser  +  bonus_after_gross  +  leave_after_gross  +  gratuity_after_gross ) END AS 'sub_total_c',  uniform_no_ser ,  operational_cost_no_ser , IF(((( Total  +  pf  +  esic  + ( ot_rate  *  ot_hours ) +  group_insurance_billing_ser ) *  bill_service_charge ) / 100) = 0,  bill_service_charge_amount , ((( Total  +  pf  +  esic  + ( ot_rate  *  ot_hours ) +  group_insurance_billing_ser ) *  bill_service_charge ) / 100)) AS 'Service_charge', (( Total  + ( ot_rate  *  ot_hours ) +  pf  +  esic  +  group_insurance_billing_ser  +  uniform_no_ser  +  operational_cost_no_ser  +  group_insurance_billing ) + IF(((( Total  +  pf  +  esic  + ( ot_rate  *  ot_hours ) +  group_insurance_billing_ser ) *  bill_service_charge ) / 100) = 0,  bill_service_charge_amount , ((( Total  +  pf  +  esic  + ( ot_rate  *  ot_hours ) +  group_insurance_billing_ser ) *  bill_service_charge ) / 100))) AS 'Amount',  pf_percent  AS 'bill_pf_percent',  esic_percent  AS 'bill_esic_percent',  gratuity_percent ,  hra_percent ,  bill_bonus_percent ,  leave_days ,  bill_service_charge,group_insurance_billing_ser,(ot_rate * ot_hours) as 'ot_amount'  FROM (SELECT  client ,  company_state ,  unit_name ,  state_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc ,  emp_basic_vda ,  hra ,  bonus_gross ,  leave_gross ,  gratuity_gross ,  washing ,  travelling ,  education ,  cca_billing ,  other_allow , ( emp_basic_vda  +  hra  +  bonus_gross  +  leave_gross  +  washing  +  travelling  +  education  +  allowances  +  cca_billing  +  other_allow  +  gratuity_gross  +  hrs_12_ot ) AS 'gross',  bonus_after_gross ,  leave_after_gross ,  gratuity_after_gross , ((( emp_basic_vda ) / 100) *  pf_percent ) AS 'pf', ((( emp_basic_vda  +  hra  +  bonus_gross  +  leave_gross  +  washing  +  travelling  +  education  + IF( esic_oa_billing  = 1,  allowances , 0) +  cca_billing  +  other_allow  +  gratuity_gross  +  hrs_12_ot ) / 100) *  esic_percent ) AS 'esic',  hrs_12_ot  AS 'special_allowance', ((( hrs_12_ot ) *  esic_percent ) / 100) AS 'esic_ot',  lwf , CASE WHEN  bill_ser_uniform  = 1 THEN  uniform  ELSE 0 END AS 'uniform_ser', CASE WHEN  bill_ser_uniform  = 0 THEN  uniform  ELSE 0 END AS 'uniform_no_ser',  relieving_charg , CASE WHEN  bill_ser_operations  = 1 THEN  operational_cost  ELSE 0 END AS 'operational_cost', CASE WHEN  bill_ser_operations  = 0 THEN  operational_cost  ELSE 0 END AS 'operational_cost_no_ser',  tot_days_present , ( emp_basic_vda  +  hra  +  bonus_gross  +  leave_gross  +  washing  +  travelling  +  education  +  allowances  +  cca_billing  +  other_allow  +  gratuity_gross  +  bonus_after_gross  +  leave_after_gross  +  gratuity_after_gross  +  lwf + CASE WHEN  bill_ser_uniform  = 0 THEN 0 ELSE  uniform  END +  relieving_charg  + CASE WHEN  bill_ser_operations  = 0 THEN 0 ELSE  operational_cost  END +  NH  +  hrs_12_ot  + IF( esic_common_allow  = 0,  common_allow , 0)) AS 'Total',  bill_service_charge ,  NH ,  hours , ( bill_gross ) AS 'bill_gross',  sub_total_c ,  bill_ser_uniform ,  bill_ser_operations , (IF(ot_hours > 0,ot_rate,0) + IF(ot_hours > 0 and ot_rate > 0,esi_on_ot_amount,0)) AS 'ot_rate',(ot_rate+esi_on_ot_amount) as 'bill_ot_rate',  ot_hours ,  esic_amount ,  IF(ot_hours > 0,ot_rate,0) AS 'ot_pr_hr_rate',IF(ot_hours > 0 and ot_rate > 0,esi_on_ot_amount,0) as 'esi_on_ot_amount',  emp_cca ,  branch_cca ,  bill_pf ,  bill_uniform , CASE WHEN  service_group_insurance_billing  = 0 THEN  group_insurance_billing  ELSE 0 END AS 'group_insurance_billing', CASE WHEN  service_group_insurance_billing  = 1 THEN  group_insurance_billing  ELSE 0 END AS 'group_insurance_billing_ser',  bill_service_charge_amount ,  branch_type ,  DUTYHRS ,  basic ,  vda ,  bonus_rate , IF( esic_oa_billing  = 1,  allowances , 0) AS 'allowances_esic', IF( esic_oa_billing  = 0,  allowances , 0) AS 'allowances_no_esic',  baseamount ,  pf_percent ,  esic_percent ,  gratuity_percent ,  hra_percent ,  bill_bonus_percent ,  leave_days  FROM (SELECT (SELECT  client_name  FROM  pay_client_master  WHERE  client_code  =  pay_unit_master . client_code  AND  comp_code  =  pay_unit_master . comp_code ) AS 'client',  pay_company_master . state  AS 'company_state',  pay_unit_master . unit_name ,  pay_unit_master . state_name ,  pay_unit_master . unit_city ,  pay_unit_master . client_branch_code ,  pay_employee_master . emp_name ,  pay_grade_master . grade_desc ,  pay_billing_unit_rate . basic ,  pay_billing_unit_rate . vda ,  pay_billing_unit_rate . bonus_rate , CAST(CONCAT( pay_billing_master_history . hours , 'HRS ',  pay_billing_unit_rate . month_days , ' DAYS ') AS char) AS 'DUTYHRS', ((( pay_billing_master_history . basic  +  pay_billing_master_history . vda ) /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'emp_basic_vda', (( pay_billing_unit_rate . hra  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'hra', CASE WHEN  bonus_taxable  = '1' THEN (( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'bonus_gross', CASE WHEN  bonus_taxable  = '0' THEN (( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'bonus_after_gross', CASE WHEN  leave_taxable  = '1' THEN (( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'leave_gross', CASE WHEN  leave_taxable  = '0' THEN (( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'leave_after_gross', CASE WHEN  gratuity_taxable  = '1' THEN (( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'gratuity_gross', CASE WHEN  gratuity_taxable  = '0' THEN (( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'gratuity_after_gross', (( pay_billing_unit_rate . washing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'washing', (( pay_billing_unit_rate . traveling  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'travelling', (( pay_billing_unit_rate . education  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'education', (( pay_billing_unit_rate . national_holiday_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'NH', (( pay_billing_unit_rate . allowances  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'allowances', CASE WHEN  pay_employee_master . cca  = 0 THEN (( pay_billing_unit_rate . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE (( pay_employee_master . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) END AS 'cca_billing', CASE WHEN  pay_employee_master . special_allow  = 0 THEN (( pay_billing_unit_rate . otherallowance  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE (( pay_employee_master . special_allow  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) END AS 'other_allow', CASE WHEN  pay_billing_master_history . ot_policy_billing  = '1' THEN (( pay_billing_master_history . ot_amount_billing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE 0 END AS 'hrs_12_ot',  pay_billing_master_history . bill_esic_percent  AS 'esic_percent',  pay_billing_master_history . bill_pf_percent  AS 'pf_percent',  gratuity_percent ,  pay_billing_master_history . hra_percent ,  pay_billing_master_history . bill_bonus_percent ,  pay_billing_master_history . leave_days , (( pay_billing_unit_rate . lwf  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'lwf', (( pay_billing_unit_rate . uniform  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'uniform', (( pay_billing_unit_rate . relieving_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'relieving_charg', (( pay_billing_unit_rate . operational_cost  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'operational_cost',  pay_attendance_muster . tot_days_present , ROUND((( pay_billing_unit_rate . sub_total_c  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ), 2) AS 'baseamount',  bill_service_charge ,  pay_billing_master_history . hours ,  pay_billing_unit_rate . sub_total_c ,  pay_billing_master_history . bill_ser_operations ,  pay_billing_master_history . bill_ser_uniform , pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate',  pay_attendance_muster . ot_hours ,  pay_billing_unit_rate . esic_amount ,  pay_billing_unit_rate.esi_on_ot_amount as 'esi_on_ot_amount',  pay_employee_master . cca  AS 'emp_cca',  pay_billing_unit_rate . cca  AS 'branch_cca', ( pay_billing_unit_rate . gross  + (( pay_employee_master . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'bill_gross',  pay_billing_unit_rate . pf_amount  AS 'bill_pf',  pay_billing_unit_rate . uniform  AS 'bill_uniform', (( pay_billing_master_history . group_insurance_billing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'group_insurance_billing',  service_group_insurance_billing ,  pay_employee_master . Employee_type , (( bill_service_charge_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) AS 'bill_service_charge_amount',  pay_billing_master_history . esic_common_allow , CASE WHEN  pay_employee_master . special_allow  = 0 THEN (( pay_billing_unit_rate . common_allowance  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) ELSE (( pay_employee_master . special_allow  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present ) END AS 'common_allow', IFNULL( branch_type , 0) AS 'branch_type',  pay_billing_master_history . esic_oa_billing  FROM pay_employee_master INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE WHERE  " + where;
                sql = "SELECT DISTINCT (emp_code), pay_billing_unit_rate_history.zone, pay_billing_unit_rate_history.txt_zone, client, state_name, branch_type, unit_name, pay_billing_unit_rate_history.comp_code, emp_name, grade_desc, CAST(CONCAT(pay_billing_unit_rate_history.hours, ' HRS ', pay_billing_unit_rate_history.month_days, ' DAYS') AS CHAR) AS 'DUTYHRS', tot_days_present, IF((ot_rate - esi_on_ot_amount) > 0, (ot_rate - esi_on_ot_amount), 0) AS 'ot_rate', IF(ot_hours > 0 AND ot_rate > 0, esi_on_ot_amount, 0) AS 'esi_on_ot_amount', pay_billing_unit_rate_history.esic_ot, ot_hours, Service_charge, Amount, pay_billing_master_history.bill_service_charge, (ot_rate * ot_hours) AS 'ot_amount' FROM pay_billing_unit_rate_history INNER JOIN pay_billing_unit_rate ON pay_billing_unit_rate_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_unit_rate_history.unit_code = pay_billing_unit_rate.unit_code AND pay_billing_unit_rate_history.month = pay_billing_unit_rate.month AND pay_billing_unit_rate_history.year = pay_billing_unit_rate.year AND pay_billing_unit_rate_history.grade_code = pay_billing_unit_rate.designation INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate_history.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate_history.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate_history.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate_history.month AND pay_billing_master_history.year = pay_billing_unit_rate_history.year AND pay_billing_master_history.designation = pay_billing_unit_rate_history.grade_code AND pay_billing_master_history.hours = pay_billing_unit_rate_history.hours AND pay_billing_master_history.type = 'billing'   " + where + "  group by emp_code " + order_by_clause;
            }
            //R&M finance copy
            else if (i == 11)
            {

                string start_end_date = "AND (start_date = 0 AND end_date = 0) ";
                if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
                {
                    start_end_date = "AND (start_date = " + ddl_start_date_common.SelectedValue + " AND end_date = " + ddl_end_date_common.SelectedValue + ") ";
                }

                where = "where pay_billing_r_m.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_r_m.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_r_m.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_billing_r_m.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_r_m.year = '" + txt_month_year.Text.Substring(3) + "' and (approve_flag =1 || approve_flag =2)" + start_end_date;
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = "where pay_billing_r_m.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_r_m.client_code= '" + ddl_client.SelectedValue + "'  and pay_billing_r_m.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_r_m.year = '" + txt_month_year.Text.Substring(3) + "'  and (approve_flag =1 || approve_flag =2) " + start_end_date;
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = "where pay_billing_r_m.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_r_m.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_r_m.state_name = '" + ddl_billing_state.SelectedValue + "'  and pay_billing_r_m.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_r_m.year = '" + txt_month_year.Text.Substring(3) + "'  and (approve_flag =1 || approve_flag =2) " + start_end_date;
                }

                sql = "SELECT txt_zone, zone, auto_invoice_no AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', pay_billing_r_m. client_code, CASE WHEN pay_billing_r_m.client_code = 'BAGIC TM' THEN 'BAJAJ ALLIANZ GENERAL INSURANCE CO. LTD' ELSE client END AS 'client', pay_billing_r_m.state_name, unit_name, unit_city, client_branch_code, emp_name, pay_billing_r_m.amount AS 'Amount', Service_charge, CGST9, IGST18, SGST9, bill_service_charge, fromtodate, bill_service_charge_amount, branch_type, gst_applicable, pay_billing_r_m.unit_code FROM pay_billing_r_m INNER JOIN pay_r_and_m_service  ON pay_r_and_m_service.comp_code = pay_billing_r_m.comp_code AND pay_r_and_m_service.client_code = pay_billing_r_m.client_code AND pay_r_and_m_service.unit_code = pay_billing_r_m.unit_code AND pay_r_and_m_service.month = pay_billing_r_m.month AND pay_r_and_m_service.year = pay_billing_r_m.year AND pay_r_and_m_service.party_name = pay_billing_r_m.emp_name " + where + " group by pay_billing_r_m.id " + R_M_order_by_clause + "";

            }
            //Administrative Expense finance copy
            else if (i == 12)
            {

                string start_end_date = "AND (start_date = 0 AND end_date = 0) ";
                if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
                {
                    start_end_date = "AND (start_date = " + ddl_start_date_common.SelectedValue + " AND end_date = " + ddl_end_date_common.SelectedValue + ") ";
                }

                where = "where pay_billing_admini_expense.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_admini_expense.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_admini_expense.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_billing_admini_expense.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_admini_expense.year = '" + txt_month_year.Text.Substring(3) + "' AND (approve_flag = 1 || approve_flag = 2) " + start_end_date;
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = "where pay_billing_admini_expense.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_admini_expense.client_code= '" + ddl_client.SelectedValue + "'  and pay_billing_admini_expense.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_admini_expense.year = '" + txt_month_year.Text.Substring(3) + "' AND (approve_flag = 1 || approve_flag = 2)  " + start_end_date;
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = "where pay_billing_admini_expense.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_admini_expense.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_admini_expense.state_name = '" + ddl_billing_state.SelectedValue + "'  and pay_billing_admini_expense.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_admini_expense.year = '" + txt_month_year.Text.Substring(3) + "' AND (approve_flag = 1 || approve_flag = 2) " + start_end_date;
                }

                sql = "SELECT txt_zone, zone, auto_invoice_no AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', pay_billing_admini_expense.client_code, CASE WHEN pay_billing_admini_expense.client_code = 'BAGIC TM' THEN 'BAJAJ ALLIANZ GENERAL INSURANCE CO. LTD' ELSE client END AS 'client', pay_billing_admini_expense.state_name, unit_name, unit_city, client_branch_code, emp_name, pay_billing_admini_expense.amount AS 'Amount', Service_charge, CGST9, IGST18, SGST9, bill_service_charge, fromtodate, bill_service_charge_amount, branch_type, gst_applicable, pay_billing_admini_expense.unit_code, pay_billing_admini_expense.days FROM pay_billing_admini_expense INNER JOIN pay_administrative_expense ON pay_administrative_expense.comp_code = pay_billing_admini_expense.comp_code AND pay_administrative_expense.client_code = pay_billing_admini_expense.client_code AND pay_administrative_expense.unit_code = pay_billing_admini_expense.unit_code AND pay_administrative_expense.month = pay_billing_admini_expense.month AND pay_administrative_expense.year = pay_billing_admini_expense.year AND pay_administrative_expense.party_name = pay_billing_admini_expense.emp_name  " + where + " group by pay_administrative_expense.id " + R_M_order_by_clause + "";

            }
           
            DataSet ds = new DataSet();

            MySqlDataAdapter dscmd = new MySqlDataAdapter(sql, d.con);

            dscmd.SelectCommand.CommandTimeout = 200;

            dscmd.Fill(ds);

            if (ds.Tables[0].Rows.Count > 0)
            {
                if (type_cl == 0)
                {
                    Response.Clear();
                    Response.Buffer = true;
                    if (i == 1)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=RATE_BREAKUP_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                    else if (i == 2)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=FINANCE_COPY_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                    else if (i == 3)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=ATTENDANCE_COPY_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                    else if (i == 4)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=SUPPORT_FORMAT_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                    if (i == 5)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=STATE_WISE_RATE_BREAKUP_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                    if (i == 6)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=ARREARS_RATE_BREAKUP_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                    else if (i == 7)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=ARREARS_FINANCE_COPY_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                    else if (i == 8)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=ARREARS_ATTENDANCE_COPY_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                    else if (i == 9)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=FINANCE_COPY_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                    else if (i == 10)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=OT_RATE_BREAKUP_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                    else if (i == 11)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=R&M_FINANCE_COPY_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                    else if (i == 12)
                    {
                        Response.AddHeader("content-disposition", "attachment;filename=ADMINISTRATIVE_EXPENSE_FINANCE_COPY_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                    }
                }
                if (ddl_client.SelectedValue == "RCPL" && i == 2) { invoice = ""; }
                if (ddl_client.SelectedValue == "ALL")
                {
                    start_date_common = "1";
                }
                string cal_days = "";
                if (i == 8)
                {
                    cal_days = d.get_calendar_days(int.Parse(start_date_common), txt_arrear_month_year.Text.Substring(3), 0, 2);
                }
                else
                {
                    cal_days = d.get_calendar_days(int.Parse(start_date_common), txt_month_year.Text, 0, 2);
                }
                Repeater Repeater1 = new Repeater();
                Repeater1.DataSource = ds;
                Repeater1.HeaderTemplate = new MyTemplate(ListItemType.Header, ds, i, invoice, bill_date, start_date_common, cal_days, month_days, type_cl, ddl_billing_state.SelectedValue);
                Repeater1.ItemTemplate = new MyTemplate(ListItemType.Item, ds, i, invoice, bill_date, start_date_common, "", month_days, type_cl, ddl_billing_state.SelectedValue);
                Repeater1.FooterTemplate = new MyTemplate(ListItemType.Footer, null, i, invoice, bill_date, start_date_common, "", month_days, type_cl, ddl_billing_state.SelectedValue);
                Repeater1.DataBind();

                System.IO.StringWriter stringWrite = new System.IO.StringWriter();
                System.Web.UI.HtmlTextWriter htmlWrite = new HtmlTextWriter(stringWrite);
                Repeater1.RenderControl(htmlWrite);
                //Akshay 23-04-2019
                if (ddl_client.SelectedValue == "RCPL" && i == 2) { stringWrite = update_grp_companies(stringWrite, ds); }
                if (type_cl == 1)
                {
                    return stringWrite;
                }

                string style = @"<style> .textmode { } </style>";
                Response.Charset = "";
                Response.ContentType = "application/vnd.ms-excel";
                Response.Write(style);
                Response.Output.Write(stringWrite.ToString());
                Response.Flush();
                Response.End();
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('No Matching Records Found.');", true);
            }
            d.con.Close();
            return null;
        }
        catch (Exception ex) { throw ex; }
        finally
        {
            d.con.Close();
        }

    }
    public class MyTemplate : ITemplate
    {
        ListItemType type;
        LiteralControl lc;
        DataSet ds;
        static int ctr = 0;

        //i3  is use to row data
        int i, i3 = 1, state_change = 0, client_change = 0, month_days = 0, type_cl = 0, atten = 3;
        string invoice = "";
        string bill_date = "";
        double rate = 0, paid_days = 0, service_charge = 0, grand_tot = 0, cgst = 0, sgst = 0, igst = 0, gst = 0, ctc = 0, present_days = 0, absent_days = 0, total_days = 0, ot_hrs = 0, ot_rate = 0, ot_amount = 0, sub_total = 0, total_emp_count = 0, no_of_duties = 0;

        double rate1 = 0, paid_days1 = 0, service_charge1 = 0, grand_tot1 = 0, cgst1 = 0, sgst1 = 0, igst1 = 0, gst1 = 0, ctc1 = 2, present_days1 = 0, absent_days1 = 0, total_days1 = 0, ot_hrs1 = 0, ot_rate1 = 0, ot_amount1 = 0, sub_total1 = 0, total_emp_count1 = 0, no_of_duties1 = 0;

        double basic = 0, vda = 0, emp_basic_vda = 0, bonus_rate = 0, washing = 0, travelling = 0, education = 0, allowances_esic = 0, cca_billing = 0, other_allow = 0, bonus_gross = 0, leave_gross = 0, gratuity_gross = 0, hra = 0, special_allowance = 0, bonus_after_gross = 0, leave_after_gross = 0, gratuity_after_gross = 0, NH = 0, pf = 0, esic = 0, uniform_ser = 0, group_insurance_billing_ser = 0, lwf = 0, operational_cost = 0, allowances_no_esic = 0, sub_total_a = 0, ot_pr_hr_rate = 0, esi_on_ot_amount = 0, ot_hours = 0, sub_total_b = 0, sub_total_ab = 0, relieving_charg = 0, sub_total_c = 0, uniform_no_ser = 0, operational_cost_no_ser = 0, Service_charge = 0, group_insurance_billing = 0, Amount = 0;
        //ADD MD 
        string washing1 = null, hra1 = null, s_allowance = null, allow = null, oth_allow = null, uniform1 = null, grp_insurance = null, op_cost = null, DUTY_HOURS = null, RATE = null, NO_OF_PAID_DAYS = null, BASE_AMOUNT = null, OT_HOURS = null, OT_RATE = null, OT_AMOUNT = null, TOTAL_BASE_AMT_OT_AMT = null, SERVICE_CHARGE = null, GRAND_TOTAL = null, GRAND_TOTAL1 = null, CGST = null, SGST = null, IGST = null, TOTAL_GST = null, TOTAL_CTC = null, CONVEYANCE_RATE = null, CONVEYANCE_BASE_RATE = null;
        string header = "", header1 = "", state_name = "", client = "";
        string bodystr = "", start_date_common = "", branch_type = "", state_name_ddl = "", client_name = "", days_t = "", BASIC = "", VDA = "", BASIC_VDA = "", PF = "", ESIC = "", UNIFORM = "", GROUP_INSURANCE = "", LWF = "", OPERATIONAL_COST = "", ALLOWANCE = "", SUB_TOTAL_A = "", OT_1_HR_AMOUNT = "", ESIC_ON_OT = "", SUB_TOTAL_AMOUNT_B = "", SUB_TOTAL_AB = "", RELIEVING_AMOUNT = "", SUB_TOTAL_C = "";
        public MyTemplate(ListItemType type, DataSet ds, int i, string invoice, string bill_date, string start_date_common, string header1, int month_days, int type_cl, string state_name_ddl)
        {
            this.type = type;
            this.ds = ds;
            this.i = i;
            this.invoice = invoice;
            this.bill_date = bill_date;
            this.start_date_common = start_date_common;
            this.header1 = header1;
            this.month_days = month_days;
            this.type_cl = type_cl;
            this.state_name_ddl = state_name_ddl;
            ctr = 0;

        }
        public void InstantiateIn(Control container)
        {

            switch (type)
            {

                case ListItemType.Header:
                    if (i == 1)
                    {
                        header = "";
                        header = header + "<th>BASIC</th>";
                        header = header + "<th>VDA</th>";
                        header = header + "<th>BASIC <br style=\"mso-data-placement:same-cell;\">+ VDA</th>";
                        header = header + "<th>BONUS<br style=\"mso-data-placement:same-cell;\"> RATE</th>";
                        header = header + "<th>WASHING</th>";
                        header = header + "<th>TRAVELLING</th>";
                        header = header + "<th>EDUCATION</th>";
                        header = header + "<th>OTHER <br style=\"mso-data-placement:same-cell;\">ALLOWANCES</th>";
                        header = header + "<th>CCA</th>";
                        header = header + "<th>ALLOWANCE</th>";
                        header = header + "<th>BONUS <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["bill_bonus_percent"] + "% ON SALARY</th>";
                        header = header + "<th>EARNED LEAVES <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["leave_days"] + " DAYS ON SALARY</th>";
                        header = header + "<th>GRATUITY <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["gratuity_percent"] + " % ON SALARY</th>";

                        header = header + "<th>HRA @ " + ds.Tables[0].Rows[ctr]["hra_percent"] + "%</th>";
                        header = header + "<th>SPECIAL <br style=\"mso-data-placement:same-cell;\">ALLOWANCES</th>";
                        header = header + "<th>GROSS</th>";
                        header = header + "<th>BONUS " + ds.Tables[0].Rows[ctr]["bill_bonus_percent"] + "% <br style=\"mso-data-placement:same-cell;\">ON SALARY</th>";

                        header = header + "<th>EARNED LEAVES <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["leave_days"] + " DAYS<br style=\"mso-data-placement:same-cell;\"> ON SALARY</th>";

                        header = header + "<th>GRATUITY " + ds.Tables[0].Rows[ctr]["gratuity_percent"] + " % ON SALARY</th>";


                        header = header + "<th>NATIONAL<br style=\"mso-data-placement:same-cell;\"> HOLIDAY <br style=\"mso-data-placement:same-cell;\">AMOUNT</th>";
                        header = header + "<th>PF " + ds.Tables[0].Rows[ctr]["bill_pf_percent"] + "% <br style=\"mso-data-placement:same-cell;\">Salary</th>";
                        header = header + "<th>ESIC " + ds.Tables[0].Rows[ctr]["bill_esic_percent"] + "% <br style=\"mso-data-placement:same-cell;\">on Gross</th>";
                        header = header + "<th>UNIFORM</th>";
                        header = header + "<th>GROUP <br style=\"mso-data-placement:same-cell;\">INSURANCE</th>";

                        header = header + "<th>LWF</th>";
                        header = header + "<th>OPERATIONAL <br style=\"mso-data-placement:same-cell;\">COST</th>";

                        header = header + "<th>ALLOWANCE</th>";
                        header = header + "<th>SUB <br style=\"mso-data-placement:same-cell;\">TOTAL A</th>";
                        header = header + "<th>OT 1 <br style=\"mso-data-placement:same-cell;\">HR AMOUNT</th>";
                        header = header + "<th>ESIC ON <br style=\"mso-data-placement:same-cell;\">OT AMOUNT</th>";
                        header = header + "<th>OT <br style=\"mso-data-placement:same-cell;\">HOURS</th>";

                        header = header + "<th>SUB TOTAL <br style=\"mso-data-placement:same-cell;\">AMOUNT B</th>";
                        header = header + "<th>SUB <br style=\"mso-data-placement:same-cell;\">TOTAL AB</th>";
                        header = header + "<th>RELIEVING<br style=\"mso-data-placement:same-cell;\"> AMOUNT</th>";
                        header = header + "<th>SUB <br style=\"mso-data-placement:same-cell;\">TOTAL C</th>";
                        header = header + "<th>UNIFORM</th>";
                        header = header + "<th>OPERATIONAL<br style=\"mso-data-placement:same-cell;\"> COST</th>";
                        header = header + "<th>OT <br style=\"mso-data-placement:same-cell;\">AMOUNT</th>";
                        header = header + "<th>TRAVEL <br style=\"mso-data-placement:same-cell;\">ALLOWANCE</th>";
                        header = header + "<th>RATE</th>";
                        if (double.Parse(ds.Tables[0].Rows[ctr]["bill_service_charge"].ToString()) > 0)
                        {
                            header = header + "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE @" + ds.Tables[0].Rows[ctr]["bill_service_charge"] + "%</th>";
                        }
                        else
                        {
                            header = header + "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE</th>";
                        }
                        header = header + "<th>GROUP <br style=\"mso-data-placement:same-cell;\">INSURANCE</th>";
                        header = header + "<th>GRAND TOTAL</th>";
                        lc = new LiteralControl("<table border=1><tr><th colspan=53 bgcolor=yellow align=center> RATE BREAKUP " + Billing_rates.month_name.ToUpper().ToUpper() + " FOR 8/12 HRS DUTY</th></tr><tr><th>SR. <br style=\"mso-data-placement:same-cell;\">NO.</th><th>ZONE</th><th>REGION</th><th>CLIENT NAME</th><th>STATE</th><th>LOCATION</th><th>EMPLOYEE NAME</th><th>DEG.</th><th>DUTY<br style=\"mso-data-placement:same-cell;\"> HRS</th><th>NO. OF <br style=\"mso-data-placement:same-cell;\">PAID DAYS</th>" + header + "</tr>");
                    }
                    else if (i == 2 || i == 7)
                    {
                        int colspan = 27, colspan2 = 27;
                        string branch = "";
                        string opus_code = "";
                        if (double.Parse(ds.Tables[0].Rows[ctr]["bill_service_charge"].ToString()) > 0)
                        {
                            header = "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE <br style=\"mso-data-placement:same-cell;\">@" + ds.Tables[0].Rows[ctr]["bill_service_charge"] + "%</th>";
                            colspan = 26;
                        }
                        else
                        {
                            header = "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE</th>";
                            colspan = 24;
                        }


                        if (ds.Tables[0].Rows[ctr]["client"].ToString().Contains("HDFC"))
                        {
                            lc = new LiteralControl("<table border=1><tr><th colspan=34 bgcolor=yellow align=center>FINANCE COPY  FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr><th>SR.<br style=\"mso-data-placement:same-cell;\"> NO.</th><th>BILL<br style=\"mso-data-placement:same-cell;\"> NO</th><th>ZONE AS<br style=\"mso-data-placement:same-cell;\"> PER HDFC<br style=\"mso-data-placement:same-cell;\"> LIFE</th><th>ZONAL<br style=\"mso-data-placement:same-cell;\">NAME</th><th>BRANCH <br style=\"mso-data-placement:same-cell;\">COST <br style=\"mso-data-placement:same-cell;\">CENTER <br style=\"mso-data-placement:same-cell;\">CODE</th><th>REGION AS<br style=\"mso-data-placement:same-cell;\"> PER HDFC<br style=\"mso-data-placement:same-cell;\"> LIFE</th><th>CONCERN ADMIN</th><th>SECURITY <br style=\"mso-data-placement:same-cell;\">COMPANY <br style=\"mso-data-placement:same-cell;\">NAME</th><th>COST <br style=\"mso-data-placement:same-cell;\">CENTER</th><th>AREA IN<br style=\"mso-data-placement:same-cell;\">Sqr.Ft</th><th>BRANCH <br style=\"mso-data-placement:same-cell;\">CODE</th><th>LOCATION TYPE<br style=\"mso-data-placement:same-cell;\"> (BRANCH / REGIONAL OFFICE<br style=\"mso-data-placement:same-cell;\"> / ZONAL OFFICE / <br style=\"mso-data-placement:same-cell;\">HEAD OFFICE)</th><th>BRANCH NAME</th><th>" + ds.Tables[0].Rows[ctr]["GRADE_CODE"].ToString() + " <br style=\"mso-data-placement:same-cell;\">SHIFT TYPE</th><th>DUTY HOURS<br style=\"mso-data-placement:same-cell;\">(EACH GUARD)</th><th>APPLICABLE <br style=\"mso-data-placement:same-cell;\">GAZETTE <br style=\"mso-data-placement:same-cell;\">NOTIFCATION</th><th>CATEGORY <br style=\"mso-data-placement:same-cell;\">(SG / SO / SS / <br style=\"mso-data-placement:same-cell;\">GUNMAN)</th><th>STATE</th><th>RATE</th><th>NO.OF " + ds.Tables[0].Rows[ctr]["GRADE_CODE"].ToString() + " <br style=\"mso-data-placement:same-cell;\">IN BRANCH</th><th>NO. OF <br style=\"mso-data-placement:same-cell;\">DUTIES BY <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["GRADE_CODE"].ToString() + "</th><th>DAYS IN<br style=\"mso-data-placement:same-cell;\"> MONTH</th><th>BASE AMOUNT</th><th>OT <br style=\"mso-data-placement:same-cell;\">HOURS</th><th>OT <br style=\"mso-data-placement:same-cell;\">RATE</th><th>OT <br style=\"mso-data-placement:same-cell;\">AMOUNT</th><th>TOTAL BASE AMT & <br style=\"mso-data-placement:same-cell;\">OT AMT</th>" + header + "<th>GRAND <br style=\"mso-data-placement:same-cell;\">TOTAL</th><th>CGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>SGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>IGST <br style=\"mso-data-placement:same-cell;\">@18%</th><th>TOTAL GST</th><th>TOTAL CTC</th></tr>");

                        }
                        else if (ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BAG") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BG") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIK HK") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC SG") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC") && !ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("4"))
                        {
                            if (ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIK HK") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC SG") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC"))
                            {
                                opus_code = "<th>OPUS CODE</th>";
                            }
                            if (ds.Tables[0].Rows[ctr]["branch_type"].ToString() != "0")
                            {
                                branch = "<th>BRANCH <br style=\"mso-data-placement:same-cell;\">TYPE</th>";
                            }
                            lc = new LiteralControl("<table border=1><tr><th colspan=" + colspan + " bgcolor=yellow align=center>FINANCE COPY  FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr><th>SR. NO.</th><th>BILL<br style=\"mso-data-placement:same-cell;\"> NO</th><th>BILL DATE</th><th>INVOICE PERIOD</th><th>BRANCH<br style=\"mso-data-placement:same-cell;\"> CODE</th>" + opus_code + "<th>BRANCH NAME</th>" + branch + "<th>ZONE</th><th>REGION</th><th>STATE</th><th>EMPLOYEE NAME</th><th>DEG.</th><th>RATE</th><th>NO. OF <br style=\"mso-data-placement:same-cell;\">PAID DAYS</th><th>BASE<br style=\"mso-data-placement:same-cell;\"> AMOUNT</th><th>OT <br style=\"mso-data-placement:same-cell;\">HOURS</th><th>OT <br style=\"mso-data-placement:same-cell;\">RATE</th><th>OT <br style=\"mso-data-placement:same-cell;\">AMOUNT</th><th>TOTAL BASE<br style=\"mso-data-placement:same-cell;\"> AMT & <br style=\"mso-data-placement:same-cell;\">OT AMT</th>" + header + "<th>GRAND <br style=\"mso-data-placement:same-cell;\">TOTAL</th><th>CGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>SGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>IGST <br style=\"mso-data-placement:same-cell;\">@18%</th><th>TOTAL GST</th><th>TOTAL CTC</th></tr>");

                        }
                        else
                        {
                            // string conveyance_rate = "";

                            if (ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BAGICTM"))
                            {
                                header = "<th>TRAVEL <br style=\"mso-data-placement:same-cell;\"> ALLOWANCE</th><th>TOTAL BASE AMT <br style=\"mso-data-placement:same-cell;\">& TRAVEL ALLOWANCE</th>" + header;
                                colspan2 = colspan2 + 2;
                            }

                            if (ds.Tables[0].Rows[ctr]["branch_type"].ToString() != "0")
                            {
                                branch = "<th>BRANCH <br style=\"mso-data-placement:same-cell;\">TYPE</th>";
                                colspan2 = 28;
                            }

                            lc = new LiteralControl("<table border=1><tr><th colspan=" + colspan2 + " bgcolor=yellow align=center>FINANCE COPY  FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr><th>SR. <br style=\"mso-data-placement:same-cell;\">NO.</th><th>BILL <br style=\"mso-data-placement:same-cell;\">NO</th><th>BILL DATE</th><th>INVOICE PERIOD</th><th>BRANCH<br style=\"mso-data-placement:same-cell;\"> CODE</th>" + opus_code + "<th>BRANCH NAME</th>" + branch + "<th>ZONE</th><th>REGION</th><th>STATE</th><th>" + (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "BAGICTM" ? "DISTRICT" : "CITY") + "</th><th>EMPLOYEE NAME</th><th>DEG.</th><th>DUTY <br style=\"mso-data-placement:same-cell;\">HOURS</th><th>RATE</th><th>NO. OF<br style=\"mso-data-placement:same-cell;\"> PAID<br style=\"mso-data-placement:same-cell;\"> DAYS</th><th>BASE <br style=\"mso-data-placement:same-cell;\">AMOUNT</th><th>OT <br style=\"mso-data-placement:same-cell;\">HOURS</th><th>OT <br style=\"mso-data-placement:same-cell;\">RATE</th><th>OT <br style=\"mso-data-placement:same-cell;\">AMOUNT</th><th>TOTAL BASE <br style=\"mso-data-placement:same-cell;\">AMT & <br style=\"mso-data-placement:same-cell;\">OT AMT</th>" + header + "<th>GRAND <br style=\"mso-data-placement:same-cell;\">TOTAL</th><th>CGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>SGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>IGST <br style=\"mso-data-placement:same-cell;\">@18%</th><th>TOTAL GST</th><th>TOTAL CTC</th></tr>");
                        }
                    }
                    else if (i == 3 || i == 8)
                    {
                        header = "<th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th><th>17</th><th>18</th><th>19</th><th>20</th><th>21</th><th>22</th><th>23</th><th>24</th><th>25</th><th>26</th><th>27</th><th>28</th>";
                        int daysadd = 0;
                        int colspan = 41;
                        int days = int.Parse(ds.Tables[0].Rows[ctr]["total days"].ToString());
                        if (month_days > 0)
                        {
                            days = month_days;
                        }
                        if (days == 29)
                        { header = header + "<th>29</th>"; daysadd = 1; colspan = 42; }
                        else if (days == 30)
                        {
                            header = header + "<th>29</th><th>30</th>"; daysadd = 2;
                            colspan = 43;
                        }
                        else if (days == 31)
                        {
                            header = header + "<th>29</th><th>30</th><th>31</th>";
                            daysadd = 3;
                            colspan = 44;
                        }
                        if (start_date_common != "" && start_date_common != "1")
                        {
                            if (month_days == 0)
                            {
                                header = header1;
                            }
                        }
                        if (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "BAGICTM")
                        {
                            colspan = colspan + 1;
                        }
                        if (type_cl == 1) { colspan = colspan - 1; }

                        lc = new LiteralControl("<table border=1><tr><th colspan=" + colspan + " bgcolor=yellow align=center>ATTENDANCE COPY FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr><th>SL. <br style=\"mso-data-placement:same-cell;\">NO.</th><th>ZONE</th><th>REGION</th><th>STATE</th>" + (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "BAGICTM" ? "<th>DISTRICT</th>" : "") + "<th>LOCATION</th><th>BRANCH<br style=\"mso-data-placement:same-cell;\"> CODE</th><th>NAME</th><th>DEG.</th><th>OT <br style=\"mso-data-placement:same-cell;\">HRS.</th>" + header + "<th>TOTAL <br style=\"mso-data-placement:same-cell;\">P/DAY</th><th>ABSENT<br style=\"mso-data-placement:same-cell;\"> DAY</th><th>TOTAL <br style=\"mso-data-placement:same-cell;\">DAYS</th>" + (type_cl == 1 ? "" : "<th>STATUS</th>") + "</tr>");
                        header = "";

                    }
                    else if (i == 4)
                    {
                        if (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "UTKARSH")
                        {
                            lc = new LiteralControl("<table border=1><tr><th>SL. NO.</th><th>INVOICE NO</th><th>INVOICE DATE</th><th>BRANCH CODE</th><th>BRANCH NAME</th><th>STATE GST NO.</th><th>SHIP TO PARTY NAME</th><th>CITY</th><th>BASE VALUE</th><th>CGST 9%</th><th>SGST 9%</th><th>IGST 18%</th><th>TOTAL</th><th>STATE</th></tr>");
                        }
                        else if (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "MAX")
                        {
                            lc = new LiteralControl("<table border=1><tr><th>SR.NO.</th><th>LOCATION</th><th>STATE</th><th>RANK</th><th>STRENGTH</th><th>DUTY</th><th>RATE</th><th>AMOUNT</th><th>REMARKS</th><th>MONTH</th></tr>");
                        }
                    }
                    else if (i == 5)
                    {
                        header = "";
                        header = header + "<th>BASIC</th>";
                        header = header + "<th>VDA</th>";
                        header = header + "<th>BASIC <br style=\"mso-data-placement:same-cell;\">+ VDA</th>";
                        header = header + "<th>BONUS<br style=\"mso-data-placement:same-cell;\"> RATE</th>";
                        header = header + "<th>WASHING</th>";
                        header = header + "<th>TRAVELLING</th>";
                        header = header + "<th>EDUCATION</th>";
                        header = header + "<th>OTHER <br style=\"mso-data-placement:same-cell;\">ALLOWANCES</th>";
                        header = header + "<th>CCA</th>";
                        header = header + "<th>ALLOWANCE</th>";
                        header = header + "<th>BONUS <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["bill_bonus_percent"] + "% ON SALARY</th>";
                        header = header + "<th>EARNED LEAVES <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["leave_days"] + " DAYS ON SALARY</th>";
                        header = header + "<th>GRATUITY <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["gratuity_percent"] + " % ON SALARY</th>";

                        header = header + "<th>HRA @ " + ds.Tables[0].Rows[ctr]["hra_percent"] + "%</th>";
                        header = header + "<th>SPECIAL <br style=\"mso-data-placement:same-cell;\">ALLOWANCES</th>";
                        header = header + "<th>GROSS</th>";
                        header = header + "<th>BONUS " + ds.Tables[0].Rows[ctr]["bill_bonus_percent"] + "% <br style=\"mso-data-placement:same-cell;\">ON SALARY</th>";

                        header = header + "<th>EARNED LEAVES <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["leave_days"] + " DAYS<br style=\"mso-data-placement:same-cell;\"> ON SALARY</th>";

                        header = header + "<th>GRATUITY " + ds.Tables[0].Rows[ctr]["gratuity_percent"] + " % ON SALARY</th>";


                        header = header + "<th>NATIONAL<br style=\"mso-data-placement:same-cell;\"> HOLIDAY <br style=\"mso-data-placement:same-cell;\">AMOUNT</th>";
                        header = header + "<th>PF " + ds.Tables[0].Rows[ctr]["pf_percent"] + "% <br style=\"mso-data-placement:same-cell;\">Salary</th>";
                        header = header + "<th>ESIC " + ds.Tables[0].Rows[ctr]["esic_percent"] + "% <br style=\"mso-data-placement:same-cell;\">on Gross</th>";
                        header = header + "<th>UNIFORM</th>";
                        header = header + "<th>GROUP <br style=\"mso-data-placement:same-cell;\">INSURANCE</th>";

                        header = header + "<th>LWF</th>";
                        header = header + "<th>OPERATIONAL <br style=\"mso-data-placement:same-cell;\">COST</th>";


                        header = header + "<th>ALLOWANCE</th>";
                        header = header + "<th>SUB <br style=\"mso-data-placement:same-cell;\">TOTAL A</th>";
                        header = header + "<th>OT 1 <br style=\"mso-data-placement:same-cell;\">HR AMOUNT</th>";
                        header = header + "<th>ESIC ON <br style=\"mso-data-placement:same-cell;\">OT AMOUNT</th>";
                        header = header + "<th>OT <br style=\"mso-data-placement:same-cell;\">HOURS</th>";

                        header = header + "<th>SUB TOTAL <br style=\"mso-data-placement:same-cell;\">AMOUNT B</th>";
                        header = header + "<th>SUB <br style=\"mso-data-placement:same-cell;\">TOTAL AB</th>";
                        header = header + "<th>RELIEVING<br style=\"mso-data-placement:same-cell;\"> AMOUNT</th>";
                        header = header + "<th>SUB <br style=\"mso-data-placement:same-cell;\">TOTAL C</th>";
                        header = header + "<th>UNIFORM</th>";
                        header = header + "<th>OPERATIONAL<br style=\"mso-data-placement:same-cell;\"> COST</th>";
                        header = header + "<th>OT <br style=\"mso-data-placement:same-cell;\">AMOUNT</th>";
                        header = header + "<th>RATE</th>";
                        if (double.Parse(ds.Tables[0].Rows[ctr]["bill_service_charge"].ToString()) > 0)
                        {
                            header = header + "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE @" + ds.Tables[0].Rows[ctr]["bill_service_charge"] + "%</th>";
                        }
                        else
                        {
                            header = header + "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE</th>";
                        }
                        header = header + "<th>GROUP <br style=\"mso-data-placement:same-cell;\">INSURANCE</th>";
                        header = header + "<th>GRAND TOTAL</th>";

                        lc = new LiteralControl("<table border=1><tr><th colspan=48 bgcolor=yellow align=center>STATEWISE RATE BREAKUP  " + Billing_rates.month_name.ToUpper().ToUpper() + " FOR 8/12 HRS DUTY</th></tr><tr><th>SR. <br style=\"mso-data-placement:same-cell;\">NO.</th><th>CLIENT NAME</th><th>STATE</th><th>BRANCH</th><th>DEG.</th><th>DUTY<br style=\"mso-data-placement:same-cell;\"> HRS</th>" + header + "</tr>");

                    }
                    //arrears
                    if (i == 6)
                    {
                        header = "";
                        header = header + "<th>BASIC</th>";
                        header = header + "<th>VDA</th>";
                        header = header + "<th>BASIC <br style=\"mso-data-placement:same-cell;\">+ VDA</th>";
                        header = header + "<th>BONUS<br style=\"mso-data-placement:same-cell;\"> RATE</th>";
                        header = header + "<th>WASHING</th>";
                        header = header + "<th>TRAVELLING</th>";
                        header = header + "<th>EDUCATION</th>";
                        header = header + "<th>OTHER <br style=\"mso-data-placement:same-cell;\">ALLOWANCES</th>";
                        header = header + "<th>CCA</th>";
                        header = header + "<th>ALLOWANCE</th>";
                        header = header + "<th>BONUS <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["bill_bonus_percent"] + "% ON SALARY</th>";
                        header = header + "<th>EARNED LEAVES <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["leave_days"] + " DAYS ON SALARY</th>";
                        header = header + "<th>GRATUITY <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["gratuity_percent"] + " % ON SALARY</th>";

                        header = header + "<th>HRA @ " + ds.Tables[0].Rows[ctr]["hra_percent"] + "%</th>";
                        header = header + "<th>SPECIAL <br style=\"mso-data-placement:same-cell;\">ALLOWANCES</th>";
                        header = header + "<th>GROSS</th>";
                        header = header + "<th>BONUS " + ds.Tables[0].Rows[ctr]["bill_bonus_percent"] + "% <br style=\"mso-data-placement:same-cell;\">ON SALARY</th>";

                        header = header + "<th>EARNED LEAVES <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["leave_days"] + " DAYS<br style=\"mso-data-placement:same-cell;\"> ON SALARY</th>";

                        header = header + "<th>GRATUITY " + ds.Tables[0].Rows[ctr]["gratuity_percent"] + " % ON SALARY</th>";


                        header = header + "<th>NATIONAL<br style=\"mso-data-placement:same-cell;\"> HOLIDAY <br style=\"mso-data-placement:same-cell;\">AMOUNT</th>";
                        header = header + "<th>PF " + ds.Tables[0].Rows[ctr]["bill_pf_percent"] + "% <br style=\"mso-data-placement:same-cell;\">Salary</th>";
                        header = header + "<th>ESIC " + ds.Tables[0].Rows[ctr]["bill_esic_percent"] + "% <br style=\"mso-data-placement:same-cell;\">on Gross</th>";
                        header = header + "<th>UNIFORM</th>";
                        header = header + "<th>GROUP <br style=\"mso-data-placement:same-cell;\">INSURANCE</th>";

                        header = header + "<th>LWF</th>";
                        header = header + "<th>OPERATIONAL <br style=\"mso-data-placement:same-cell;\">COST</th>";


                        header = header + "<th>ALLOWANCE</th>";
                        header = header + "<th>SUB <br style=\"mso-data-placement:same-cell;\">TOTAL A</th>";
                        header = header + "<th>OT 1 <br style=\"mso-data-placement:same-cell;\">HR AMOUNT</th>";
                        header = header + "<th>ESIC ON <br style=\"mso-data-placement:same-cell;\">OT AMOUNT</th>";
                        header = header + "<th>OT <br style=\"mso-data-placement:same-cell;\">HOURS</th>";

                        header = header + "<th>SUB TOTAL <br style=\"mso-data-placement:same-cell;\">AMOUNT B</th>";
                        header = header + "<th>SUB <br style=\"mso-data-placement:same-cell;\">TOTAL AB</th>";
                        header = header + "<th>RELIEVING<br style=\"mso-data-placement:same-cell;\"> AMOUNT</th>";
                        header = header + "<th>SUB <br style=\"mso-data-placement:same-cell;\">TOTAL C</th>";
                        header = header + "<th>UNIFORM</th>";
                        header = header + "<th>OPERATIONAL<br style=\"mso-data-placement:same-cell;\"> COST</th>";
                        header = header + "<th>OT <br style=\"mso-data-placement:same-cell;\">AMOUNT</th>";
                        header = header + "<th>RATE</th>";
                        if (double.Parse(ds.Tables[0].Rows[ctr]["bill_service_charge"].ToString()) > 0)
                        {
                            header = header + "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE @" + ds.Tables[0].Rows[ctr]["bill_service_charge"] + "%</th>";
                        }
                        else
                        {
                            header = header + "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE</th>";
                        }
                        header = header + "<th>GROUP <br style=\"mso-data-placement:same-cell;\">INSURANCE</th>";
                        header = header + "<th>GRAND TOTAL</th>";
                        lc = new LiteralControl("<table border=1><tr><th colspan=49 bgcolor=yellow align=center> RATE BREAKUP " + Billing_rates.month_name.ToUpper().ToUpper() + " FOR 8/12 HRS DUTY</th></tr><tr></tr><tr><th>SR. <br style=\"mso-data-placement:same-cell;\">NO.</th><th>STATE</th><th>LOCATION</th><th>EMPLOYEE NAME</th><th>DEG.</th><th>DUTY<br style=\"mso-data-placement:same-cell;\"> HRS</th><th>NO. OF <br style=\"mso-data-placement:same-cell;\">PAID DAYS</th>" + header + "<th> Policy</th><th> Month</th><th> Year</th></tr>");
                    }
                    else if (i == 9)
                    {
                        int colspan = 27, colspan2 = 27;
                        if (double.Parse(ds.Tables[0].Rows[ctr]["bill_service_charge"].ToString()) > 0)
                        {
                            header = "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE <br style=\"mso-data-placement:same-cell;\">@" + ds.Tables[0].Rows[ctr]["bill_service_charge"] + "%</th>";
                            colspan = 26;
                        }
                        if (ds.Tables[0].Rows[ctr]["client"].ToString().Contains("HDFC"))
                        {
                            lc = new LiteralControl("<table border=1><tr><th colspan=30 bgcolor=yellow align=center> OT FINANCE COPY  FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr><th>SR.<br style=\"mso-data-placement:same-cell;\"> NO.</th><th>BILL<br style=\"mso-data-placement:same-cell;\"> NO</th><th>ZONE AS<br style=\"mso-data-placement:same-cell;\"> PER HDFC<br style=\"mso-data-placement:same-cell;\"> LIFE</th><th>BRANCH <br style=\"mso-data-placement:same-cell;\">COST <br style=\"mso-data-placement:same-cell;\">CENTER <br style=\"mso-data-placement:same-cell;\">CODE</th><th>REGION AS<br style=\"mso-data-placement:same-cell;\"> PER HDFC<br style=\"mso-data-placement:same-cell;\"> LIFE</th><th>CONCERN ADMIN</th><th>SECURITY <br style=\"mso-data-placement:same-cell;\">COMPANY <br style=\"mso-data-placement:same-cell;\">NAME</th><th>COST <br style=\"mso-data-placement:same-cell;\">CENTER</th><th>AREA IN<br style=\"mso-data-placement:same-cell;\">Sqr.Ft</th><th>BRANCH <br style=\"mso-data-placement:same-cell;\">CODE</th><th>LOCATION TYPE<br style=\"mso-data-placement:same-cell;\"> (BRANCH / REGIONAL OFFICE<br style=\"mso-data-placement:same-cell;\"> / ZONAL OFFICE / <br style=\"mso-data-placement:same-cell;\">HEAD OFFICE)</th><th>BRANCH NAME</th><th>" + ds.Tables[0].Rows[ctr]["GRADE_CODE"].ToString() + " <br style=\"mso-data-placement:same-cell;\">SHIFT TYPE</th><th>DUTY HOURS<br style=\"mso-data-placement:same-cell;\">(EACH GUARD)</th><th>APPLICABLE <br style=\"mso-data-placement:same-cell;\">GAZETTE <br style=\"mso-data-placement:same-cell;\">NOTIFCATION</th><th>CATEGORY <br style=\"mso-data-placement:same-cell;\">(SG / SO / SS / <br style=\"mso-data-placement:same-cell;\">GUNMAN)</th><th>STATE</th><th>NO.OF " + ds.Tables[0].Rows[ctr]["GRADE_CODE"].ToString() + " <br style=\"mso-data-placement:same-cell;\">IN BRANCH</th><th>NO. OF <br style=\"mso-data-placement:same-cell;\">DUTIES BY <br style=\"mso-data-placement:same-cell;\">" + ds.Tables[0].Rows[ctr]["GRADE_CODE"].ToString() + "</th><th>DAYS IN<br style=\"mso-data-placement:same-cell;\"> MONTH</th><th>OT <br style=\"mso-data-placement:same-cell;\">HOURS</th><th>OT <br style=\"mso-data-placement:same-cell;\">RATE</th><th>OT <br style=\"mso-data-placement:same-cell;\">AMOUNT</th>" + header + "<th>GRAND <br style=\"mso-data-placement:same-cell;\">TOTAL</th><th>CGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>SGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>IGST <br style=\"mso-data-placement:same-cell;\">@18%</th><th>TOTAL GST</th><th>TOTAL CTC</th></tr>");

                        }
                    }
                    else if (i == 10)
                    {
                        header = "";
                        header = header + "<th>OT 1 <br style=\"mso-data-placement:same-cell;\">HR AMOUNT</th>";
                        header = header + "<th>ESIC ON <br style=\"mso-data-placement:same-cell;\">OT HOUR RATE</th>";
                        header = header + "<th>1 HOUR <br style=\"mso-data-placement:same-cell;\">OT RATE</th>";
                        header = header + "<th>OT <br style=\"mso-data-placement:same-cell;\">HOURS</th>";


                        header = header + "<th>OT <br style=\"mso-data-placement:same-cell;\">AMOUNT</th>";
                        if (double.Parse(ds.Tables[0].Rows[ctr]["bill_service_charge"].ToString()) > 0)
                        {
                            header = header + "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE @" + ds.Tables[0].Rows[ctr]["bill_service_charge"] + "%</th>";
                        }
                        else
                        {
                            header = header + "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE</th>";
                        }
                        header = header + "<th>GRAND TOTAL</th>";
                        lc = new LiteralControl("<table border=1><tr><th colspan=17 bgcolor=yellow align=center> OT RATE BREAKUP " + Billing_rates.month_name.ToUpper().ToUpper() + " FOR 8/12 HRS DUTY</th></tr><tr><th>SR. <br style=\"mso-data-placement:same-cell;\">NO.</th><th>ZONE</th><th>REGION</th><th>CLIENT NAME</th><th>STATE</th><th>LOCATION</th><th>EMPLOYEE NAME</th><th>DEG.</th><th>DUTY<br style=\"mso-data-placement:same-cell;\"> HRS</th><th>NO. OF <br style=\"mso-data-placement:same-cell;\">PAID DAYS</th>" + header + "</tr>");
                    }
                    else if (i == 11)
                    {
                        int colspan = 18;

                        if (double.Parse(ds.Tables[0].Rows[ctr]["bill_service_charge"].ToString()) > 0)
                        {
                            header = "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE <br style=\"mso-data-placement:same-cell;\">@" + ds.Tables[0].Rows[ctr]["bill_service_charge"] + "%</th>";
                            colspan = 19;
                        }
                        else
                        {
                            header = "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE</th>";
                            colspan = 18;
                        }

                        lc = new LiteralControl("<table border=1><tr><th colspan=" + colspan + " bgcolor=yellow align=center>FINANCE COPY  FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr><th>SR. <br style=\"mso-data-placement:same-cell;\">NO.</th><th>BILL <br style=\"mso-data-placement:same-cell;\">NO</th><th>BILL DATE</th><th>INVOICE PERIOD</th><th>BRANCH<br style=\"mso-data-placement:same-cell;\"> CODE</th><th>BRANCH NAME</th><th>ZONE</th><th>REGION</th><th>STATE</th><th>" + (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "BAGICTM" ? "DISTRICT" : "CITY") + "</th><th>PARTY NAME</th><th>TOTAL  <br style=\"mso-data-placement:same-cell;\">AMOUNT</th>" + header + "<th>GRAND <br style=\"mso-data-placement:same-cell;\">TOTAL</th><th>CGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>SGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>IGST <br style=\"mso-data-placement:same-cell;\">@18%</th><th>TOTAL GST</th><th>TOTAL CTC</th></tr>");

                    }
                    else if (i == 12)
                    {
                        int colspan = 19;

                        if (double.Parse(ds.Tables[0].Rows[ctr]["bill_service_charge"].ToString()) > 0)
                        {
                            header = "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE <br style=\"mso-data-placement:same-cell;\">@" + ds.Tables[0].Rows[ctr]["bill_service_charge"] + "%</th>";
                            colspan = 20;
                        }
                        else
                        {
                            header = "<th>SERVICE <br style=\"mso-data-placement:same-cell;\">CHARGE</th>";
                            colspan = 19;
                        }

                        lc = new LiteralControl("<table border=1><tr><th colspan=" + colspan + " bgcolor=yellow align=center>FINANCE COPY  FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr><th>SR. <br style=\"mso-data-placement:same-cell;\">NO.</th><th>BILL <br style=\"mso-data-placement:same-cell;\">NO</th><th>BILL DATE</th><th>INVOICE PERIOD</th><th>BRANCH<br style=\"mso-data-placement:same-cell;\"> CODE</th><th>BRANCH NAME</th><th>ZONE</th><th>REGION</th><th>STATE</th><th>" + (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "BAGICTM" ? "DISTRICT" : "CITY") + "</th><th>PARTY NAME</th><th>DAYS</th><th>TOTAL  <br style=\"mso-data-placement:same-cell;\">AMOUNT</th>" + header + "<th>GRAND <br style=\"mso-data-placement:same-cell;\">TOTAL</th><th>CGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>SGST <br style=\"mso-data-placement:same-cell;\">@9%</th><th>IGST <br style=\"mso-data-placement:same-cell;\">@18%</th><th>TOTAL GST</th><th>TOTAL CTC</th></tr>");

                    }
                    
                    break;
                case ListItemType.Item:
                    if (i == 1)
                    {

                        //SAme like finance copy -vinod start
                        int set_start_row = 1;
                        int start_first_row = 3;
                        int colsize = 9;

                        if (client != ds.Tables[0].Rows[ctr]["client"].ToString().ToUpper())
                        {
                            if (client != "")
                            {
                                //code here 
                                i3 = i3 + 1;

                                lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=SUM(J" + (ctc1 + set_start_row) + ":J" + (ctr + i3) + ")</td><td>=SUM(K" + (ctc1 + set_start_row) + ":K" + (ctr + i3) + ")</td><td>=SUM(L" + (ctc1 + set_start_row) + ":L" + (ctr + i3) + ")</td><td>=SUM(M" + (ctc1 + set_start_row) + ":M" + (ctr + i3) + ")</td><td>=ROUND(SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AA" + (ctc1 + set_start_row) + ":AA" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AB" + (ctc1 + set_start_row) + ":AB" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AC" + (ctc1 + set_start_row) + ":AC" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AD" + (ctc1 + set_start_row) + ":AD" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AE" + (ctc1 + set_start_row) + ":AE" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AF" + (ctc1 + set_start_row) + ":AF" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AG" + (ctc1 + set_start_row) + ":AG" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AH" + (ctc1 + set_start_row) + ":AH" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AI" + (ctc1 + set_start_row) + ":AI" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AJ" + (ctc1 + set_start_row) + ":AJ" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AK" + (ctc1 + set_start_row) + ":AK" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AL" + (ctc1 + set_start_row) + ":AL" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AM" + (ctc1 + set_start_row) + ":AM" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AN" + (ctc1 + set_start_row) + ":AN" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AO" + (ctc1 + set_start_row) + ":AO" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AP" + (ctc1 + set_start_row) + ":AP" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AQ" + (ctc1 + set_start_row) + ":AQ" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AR" + (ctc1 + set_start_row) + ":AR" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AS" + (ctc1 + set_start_row) + ":AS" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AT" + (ctc1 + set_start_row) + ":AT" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AU" + (ctc1 + set_start_row) + ":AU" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AV" + (ctc1 + set_start_row) + ":AV" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AW" + (ctc1 + set_start_row) + ":AW" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AX" + (ctc1 + set_start_row) + ":AX" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AY" + (ctc1 + set_start_row) + ":AY" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AZ" + (ctc1 + set_start_row) + ":AZ" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(BA" + (ctc1 + set_start_row) + ":BA" + (ctr + i3) + "),2)</td></tr>";

                                days_t = days_t + "," + "J" + (ctr + i3 + 1);
                                BASIC = BASIC + "," + "K" + (ctr + i3 + 1);
                                VDA = VDA + "," + "L" + (ctr + i3 + 1);
                                BASIC_VDA = BASIC_VDA + "," + "M" + (ctr + i3 + 1);
                                DUTY_HOURS = DUTY_HOURS + "," + "N" + (ctr + i3 + 1);
                                washing1 = washing1 + "," + "O" + (ctr + i3 + 1);
                                NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "P" + (ctr + i3 + 1);
                                BASE_AMOUNT = BASE_AMOUNT + "," + "Q" + (ctr + i3 + 1);
                                oth_allow = oth_allow + "," + "R" + (ctr + i3 + 1);
                                OT_RATE = OT_RATE + "," + "S" + (ctr + i3 + 1);
                                allow = allow + "," + "T" + (ctr + i3 + 1);
                                TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "U" + (ctr + i3 + 1);

                                CONVEYANCE_RATE = CONVEYANCE_RATE + "," + "V" + (ctr + i3 + 1);
                                CONVEYANCE_BASE_RATE = CONVEYANCE_BASE_RATE + "," + "W" + (ctr + i3 + 1);

                                hra1 = hra1 + "," + "X" + (ctr + i3 + 1);
                                s_allowance = s_allowance + "," + "Y" + (ctr + i3 + 1);
                                CGST = CGST + "," + "Z" + (ctr + i3 + 1);
                                SGST = SGST + "," + "AA" + (ctr + i3 + 1);
                                IGST = IGST + "," + "AB" + (ctr + i3 + 1);
                                TOTAL_GST = TOTAL_GST + "," + "AC" + (ctr + i3 + 1);
                                TOTAL_CTC = TOTAL_CTC + "," + "AD" + (ctr + i3 + 1);

                                PF = PF + "," + "AE" + (ctr + i3 + 1);
                                ESIC = ESIC + "," + "AF" + (ctr + i3 + 1);
                                uniform1 = uniform1 + "," + "AG" + (ctr + i3 + 1);
                                grp_insurance = grp_insurance + "," + "AH" + (ctr + i3 + 1);
                                LWF = LWF + "," + "AI" + (ctr + i3 + 1);
                                op_cost = op_cost + "," + "AJ" + (ctr + i3 + 1);
                                ALLOWANCE = ALLOWANCE + "," + "AK" + (ctr + i3 + 1);
                                SUB_TOTAL_A = SUB_TOTAL_A + "," + "AL" + (ctr + i3 + 1);
                                OT_1_HR_AMOUNT = OT_1_HR_AMOUNT + "," + "AM" + (ctr + i3 + 1);
                                ESIC_ON_OT = ESIC_ON_OT + "," + "AN" + (ctr + i3 + 1);
                                OT_HOURS = OT_HOURS + "," + "AO" + (ctr + i3 + 1);
                                SUB_TOTAL_AMOUNT_B = SUB_TOTAL_AMOUNT_B + "," + "AP" + (ctr + i3 + 1);
                                SUB_TOTAL_AB = SUB_TOTAL_AB + "," + "AQ" + (ctr + i3 + 1);
                                RELIEVING_AMOUNT = RELIEVING_AMOUNT + "," + "AR" + (ctr + i3 + 1);
                                SUB_TOTAL_C = SUB_TOTAL_C + "," + "AS" + (ctr + i3 + 1);
                                UNIFORM = UNIFORM + "," + "AT" + (ctr + i3 + 1);
                                OPERATIONAL_COST = OPERATIONAL_COST + "," + "AU" + (ctr + i3 + 1);
                                OT_AMOUNT = OT_AMOUNT + "," + "AV" + (ctr + i3 + 1);
                                RATE = RATE + "," + "AW" + (ctr + i3 + 1);
                                SERVICE_CHARGE = SERVICE_CHARGE + "," + "AX" + (ctr + i3 + 1);
                                GROUP_INSURANCE = GROUP_INSURANCE + "," + "AY" + (ctr + i3 + 1);
                                GRAND_TOTAL = GRAND_TOTAL + "," + "AZ" + (ctr + i3 + 1);
                                GRAND_TOTAL1 = GRAND_TOTAL1 + "," + "BA" + (ctr + i3 + 1);
                                client_change = 1;

                                ctc1 = ctr + i3 + 1;

                            }

                            client = ds.Tables[0].Rows[ctr]["client"].ToString().ToUpper();
                        }

                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + ds.Tables[0].Rows[ctr]["txt_zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["client"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["grade_desc"] + "</td><td>" + ds.Tables[0].Rows[ctr]["DUTYHRS"] + "</td><td>" + ds.Tables[0].Rows[ctr]["tot_days_present"] + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["basic"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["vda"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["emp_basic_vda"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bonus_rate"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["washing"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["travelling"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["education"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["allowances_esic"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["cca_billing"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["other_allow"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bonus_gross"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["leave_gross"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["gratuity_gross"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["hra"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["special_allowance"].ToString()), 2) + "</td><td>=ROUND(SUM(O" + (ctr + i3 + 2) + ":Y" + (ctr + i3 + 2) + ",M" + (ctr + i3 + 2) + "),2)</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bonus_after_gross"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["leave_after_gross"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["gratuity_after_gross"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["NH"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["pf"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["esic"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["uniform_ser"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing_ser"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["lwf"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["allowances_no_esic"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["sub_total_a"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["ot_pr_hr_rate"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["esi_on_ot_amount"].ToString()), 2) + "</td><td>" + ds.Tables[0].Rows[ctr]["ot_hours"] + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["sub_total_b"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["sub_total_ab"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["relieving_charg"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["sub_total_c"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["uniform_no_ser"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["operational_cost_no_ser"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["conveyance_amount"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["sub_total_c"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["conveyance_amount"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()), 2) + "</td></tr>");


                        if (ds.Tables[0].Rows.Count == ctr + 1)
                        {
                            i3 = i3 + 2;


                            lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=SUM(J" + (ctc1 + set_start_row) + ":J" + (ctr + i3) + ")</td><td>=SUM(K" + (ctc1 + set_start_row) + ":K" + (ctr + i3) + ")</td><td>=SUM(L" + (ctc1 + set_start_row) + ":L" + (ctr + i3) + ")</td><td>=SUM(M" + (ctc1 + set_start_row) + ":M" + (ctr + i3) + ")</td><td>=ROUND(SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AA" + (ctc1 + set_start_row) + ":AA" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AB" + (ctc1 + set_start_row) + ":AB" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AC" + (ctc1 + set_start_row) + ":AC" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AD" + (ctc1 + set_start_row) + ":AD" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AE" + (ctc1 + set_start_row) + ":AE" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AF" + (ctc1 + set_start_row) + ":AF" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AG" + (ctc1 + set_start_row) + ":AG" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AH" + (ctc1 + set_start_row) + ":AH" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AI" + (ctc1 + set_start_row) + ":AI" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AJ" + (ctc1 + set_start_row) + ":AJ" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AK" + (ctc1 + set_start_row) + ":AK" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AL" + (ctc1 + set_start_row) + ":AL" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AM" + (ctc1 + set_start_row) + ":AM" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AN" + (ctc1 + set_start_row) + ":AN" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AO" + (ctc1 + set_start_row) + ":AO" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AP" + (ctc1 + set_start_row) + ":AP" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AQ" + (ctc1 + set_start_row) + ":AQ" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AR" + (ctc1 + set_start_row) + ":AR" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AS" + (ctc1 + set_start_row) + ":AS" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AT" + (ctc1 + set_start_row) + ":AT" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AU" + (ctc1 + set_start_row) + ":AU" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AV" + (ctc1 + set_start_row) + ":AV" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AW" + (ctc1 + set_start_row) + ":AW" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AX" + (ctc1 + set_start_row) + ":AX" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AY" + (ctc1 + set_start_row) + ":AY" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AZ" + (ctc1 + set_start_row) + ":AZ" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(BA" + (ctc1 + set_start_row) + ":BA" + (ctr + i3) + "),2)</td></tr>";

                            days_t = days_t + "," + "J" + (ctr + i3 + 1);
                            BASIC = BASIC + "," + "K" + (ctr + i3 + 1);
                            VDA = VDA + "," + "L" + (ctr + i3 + 1);
                            BASIC_VDA = BASIC_VDA + "," + "M" + (ctr + i3 + 1);
                            DUTY_HOURS = DUTY_HOURS + "," + "N" + (ctr + i3 + 1);
                            washing1 = washing1 + "," + "O" + (ctr + i3 + 1);
                            NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "P" + (ctr + i3 + 1);
                            BASE_AMOUNT = BASE_AMOUNT + "," + "Q" + (ctr + i3 + 1);
                            oth_allow = oth_allow + "," + "R" + (ctr + i3 + 1);
                            OT_RATE = OT_RATE + "," + "S" + (ctr + i3 + 1);
                            allow = allow + "," + "T" + (ctr + i3 + 1);
                            TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "U" + (ctr + i3 + 1);

                            CONVEYANCE_RATE = CONVEYANCE_RATE + "," + "V" + (ctr + i3 + 1);
                            CONVEYANCE_BASE_RATE = CONVEYANCE_BASE_RATE + "," + "W" + (ctr + i3 + 1);

                            hra1 = hra1 + "," + "X" + (ctr + i3 + 1);
                            s_allowance = s_allowance + "," + "Y" + (ctr + i3 + 1);
                            CGST = CGST + "," + "Z" + (ctr + i3 + 1);
                            SGST = SGST + "," + "AA" + (ctr + i3 + 1);
                            IGST = IGST + "," + "AB" + (ctr + i3 + 1);
                            TOTAL_GST = TOTAL_GST + "," + "AC" + (ctr + i3 + 1);
                            TOTAL_CTC = TOTAL_CTC + "," + "AD" + (ctr + i3 + 1);

                            PF = PF + "," + "AE" + (ctr + i3 + 1);
                            ESIC = ESIC + "," + "AF" + (ctr + i3 + 1);
                            uniform1 = uniform1 + "," + "AG" + (ctr + i3 + 1);
                            grp_insurance = grp_insurance + "," + "AH" + (ctr + i3 + 1);
                            LWF = LWF + "," + "AI" + (ctr + i3 + 1);
                            op_cost = op_cost + "," + "AJ" + (ctr + i3 + 1);
                            ALLOWANCE = ALLOWANCE + "," + "AK" + (ctr + i3 + 1);
                            SUB_TOTAL_A = SUB_TOTAL_A + "," + "AL" + (ctr + i3 + 1);
                            OT_1_HR_AMOUNT = OT_1_HR_AMOUNT + "," + "AM" + (ctr + i3 + 1);
                            ESIC_ON_OT = ESIC_ON_OT + "," + "AN" + (ctr + i3 + 1);
                            OT_HOURS = OT_HOURS + "," + "AO" + (ctr + i3 + 1);
                            SUB_TOTAL_AMOUNT_B = SUB_TOTAL_AMOUNT_B + "," + "AP" + (ctr + i3 + 1);
                            SUB_TOTAL_AB = SUB_TOTAL_AB + "," + "AQ" + (ctr + i3 + 1);
                            RELIEVING_AMOUNT = RELIEVING_AMOUNT + "," + "AR" + (ctr + i3 + 1);
                            SUB_TOTAL_C = SUB_TOTAL_C + "," + "AS" + (ctr + i3 + 1);
                            UNIFORM = UNIFORM + "," + "AT" + (ctr + i3 + 1);
                            OPERATIONAL_COST = OPERATIONAL_COST + "," + "AU" + (ctr + i3 + 1);
                            OT_AMOUNT = OT_AMOUNT + "," + "AV" + (ctr + i3 + 1);
                            RATE = RATE + "," + "AW" + (ctr + i3 + 1);
                            SERVICE_CHARGE = SERVICE_CHARGE + "," + "AX" + (ctr + i3 + 1);
                            GROUP_INSURANCE = GROUP_INSURANCE + "," + "AY" + (ctr + i3 + 1);
                            GRAND_TOTAL = GRAND_TOTAL + "," + "AZ" + (ctr + i3 + 1);
                            GRAND_TOTAL1 = GRAND_TOTAL1 + "," + "BA" + (ctr + i3 + 1);


                            if (client_change == 1)
                            {
                                lc.Text = lc.Text + "<tr><b> <td align=center colspan=" + colsize + ">Grand Total</td><td>=ROUND(SUM(" + days_t + "),2)</td><td>=ROUND(SUM(" + BASIC + "),2)</td><td>=ROUND(SUM(" + VDA + "),2)</td><td>=ROUND(SUM(" + BASIC_VDA + "),2)</td><td>=ROUND(SUM(" + DUTY_HOURS + "),2)</td><td>=ROUND(SUM(" + washing1 + "),2)</td><td>=ROUND(SUM(" + NO_OF_PAID_DAYS + "),2)</td><td>=ROUND(SUM(" + BASE_AMOUNT + "),2)</td><td>=ROUND(SUM(" + oth_allow + "),2)</td><td>=ROUND(SUM(" + OT_RATE + "),2)</td><td>=ROUND(SUM(" + allow + "),2)</td><td>=ROUND(SUM(" + TOTAL_BASE_AMT_OT_AMT + "),2)</td><td>=ROUND(SUM(" + CONVEYANCE_RATE + "),2)</td><td>=ROUND(SUM(" + CONVEYANCE_BASE_RATE + "),2)</td><td>=ROUND(SUM(" + hra1 + "),2)</td><td>=ROUND(SUM(" + s_allowance + "),2)</td><td>=ROUND(SUM(" + CGST + "),2)</td><td>=ROUND(SUM(" + SGST + "),2)</td><td>=ROUND(SUM(" + IGST + "),2)</td><td>=ROUND(SUM(" + TOTAL_GST + "),2)</td><td>=ROUND(SUM(" + TOTAL_CTC + "),2)</td><td>=ROUND(SUM(" + PF + "),2)</td><td>=ROUND(SUM(" + ESIC + "),2)</td><td>=ROUND(SUM(" + uniform1 + "),2)</td><td>=ROUND(SUM(" + grp_insurance + "),2)</td><td>=ROUND(SUM(" + LWF + "),2)</td><td>=ROUND(SUM(" + op_cost + "),2)</td><td>=ROUND(SUM(" + ALLOWANCE + "),2)</td><td>=ROUND(SUM(" + SUB_TOTAL_A + "),2)</td><td>=ROUND(SUM(" + OT_1_HR_AMOUNT + "),2)</td><td>=ROUND(SUM(" + ESIC_ON_OT + "),2)</td><td>=ROUND(SUM(" + OT_HOURS + "),2)</td><td>=ROUND(SUM(" + SUB_TOTAL_AMOUNT_B + "),2)</td><td>=ROUND(SUM(" + SUB_TOTAL_AB + "),2)</td><td>=ROUND(SUM(" + RELIEVING_AMOUNT + "),2)</td><td>=ROUND(SUM(" + SUB_TOTAL_C + "),2)</td><td>=ROUND(SUM(" + UNIFORM + "),2)</td><td>=ROUND(SUM(" + OPERATIONAL_COST + "),2)</td><td>=ROUND(SUM(" + OT_AMOUNT + "),2)</td><td>=ROUND(SUM(" + RATE + "),2)</td><td>=ROUND(SUM(" + SERVICE_CHARGE + "),2)</td><td>=ROUND(SUM(" + GROUP_INSURANCE + "),2)</td><td>=ROUND(SUM(" + GRAND_TOTAL + "),2)</td><td>=ROUND(SUM(" + GRAND_TOTAL1 + "),2)</td></b></tr>";

                            }
                        }


                        header = "";
                        bodystr = "";
                    }
                    else if (i == 2 || i == 7)
                    {
                        string branch = "";
                        string opus_code = "";
                        string tot = "";
                        string tot_hrs = "";
                        string base_amount = "", tot_ctc = "", tot_gst = "";
                        int set_start_row = 1;
                        if (ds.Tables[0].Rows[ctr]["client"].ToString().Contains("HDFC"))
                        {
                            if (state_name != ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper())
                            {
                                if (state_name != "")
                                {
                                    //code here
                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=18>Total</td><td>" + (Math.Round(sub_total, 2) - Math.Round(sub_total1, 2)) + "</td><td>" + (total_emp_count - total_emp_count1) + "</td><td>" + (no_of_duties - no_of_duties1) + "</td><td>" + (paid_days - paid_days1) + "</td><td>" + (Math.Round(rate, 2) - Math.Round(rate1, 2)) + "</td><td>" + (ot_hrs - ot_hrs1) + "</td><td>" + (ot_rate - ot_rate1) + "</td><td>" + (ot_amount - ot_amount1) + "</td><td>" + (Math.Round((rate + ot_amount), 2) - Math.Round((rate1 + ot_amount1), 2)) + "</td><td>" + (Math.Round(service_charge, 2) - Math.Round(service_charge1, 2)) + "</td><td>" + (Math.Round(grand_tot, 2) - Math.Round(grand_tot1, 2)) + "</td><td>" + (cgst - cgst1) + "</td><td>" + (sgst - sgst1) + "</td><td>" + (igst - igst1) + "</td><td>" + (gst - gst1) + "</td><td>" + (Math.Ceiling(Math.Round(ctc, 2)) - Math.Ceiling(Math.Round(ctc1, 2))) + "</td></b></tr>";

                                    sub_total1 = sub_total;
                                    total_emp_count1 = total_emp_count;
                                    no_of_duties1 = no_of_duties;
                                    paid_days1 = paid_days;
                                    rate1 = rate;
                                    ot_hrs1 = ot_hrs;
                                    ot_rate1 = ot_rate;
                                    ot_amount1 = ot_amount;
                                    service_charge1 = service_charge;
                                    grand_tot1 = grand_tot;
                                    cgst1 = cgst;
                                    sgst1 = sgst;
                                    igst1 = igst;
                                    gst1 = gst;
                                    ctc1 = ctc;
                                    state_change = 1;
                                }
                                state_name = ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper();
                            }

                            lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["txt_zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["zonal_name"] + "</td><td>" + ds.Tables[0].Rows[ctr]["branch_cost_centre_code"] + "</td><td>" + ds.Tables[0].Rows[ctr]["zone"].ToString().ToUpper() + "</td><td></td><td>" + ds.Tables[0].Rows[ctr]["ihms"] + "</td><td>" + ds.Tables[0].Rows[ctr]["branch_cost_centre_code"] + "</td><td>" + ds.Tables[0].Rows[ctr]["material_area"] + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"] + "</td><td>" + ds.Tables[0].Rows[ctr]["location_type"] + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_count"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_count1"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_per"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["grade_desc"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + Math.Round((double.Parse(ds.Tables[0].Rows[ctr]["sub_total_c"].ToString())), 2) + "</td><td>" + ds.Tables[0].Rows[ctr]["total_emp_count"] + "</td><td>" + ds.Tables[0].Rows[ctr]["no_of_duties"] + "</td><td>" + ds.Tables[0].Rows[ctr]["TOT_WORKING_DAYS"] + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()), 2) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_hours"].ToString())) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_rate"].ToString())) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString())) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["uniform"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()), 2) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString())) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()))) + double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + ((double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["uniform"].ToString()))), 2) + "</td></tr>");

                            sub_total = sub_total + (double.Parse(ds.Tables[0].Rows[ctr]["sub_total_c"].ToString()));
                            total_emp_count = total_emp_count + (double.Parse(ds.Tables[0].Rows[ctr]["total_emp_count"].ToString()));
                            no_of_duties = no_of_duties + (double.Parse(ds.Tables[0].Rows[ctr]["no_of_duties"].ToString()));
                            paid_days = paid_days + (double.Parse(ds.Tables[0].Rows[ctr]["TOT_WORKING_DAYS"].ToString()));
                            rate = rate + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()));
                            ot_hrs = ot_hrs + double.Parse(ds.Tables[0].Rows[ctr]["ot_hours"].ToString());
                            ot_rate = ot_rate + double.Parse(ds.Tables[0].Rows[ctr]["ot_rate"].ToString());
                            ot_amount = ot_amount + double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString());
                            service_charge = service_charge + (double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()));
                            grand_tot = grand_tot + ((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["uniform"].ToString())));
                            cgst = cgst + (double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()));
                            sgst = sgst + (double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()));
                            igst = igst + (double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()));
                            gst = gst + (double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()));
                            ctc = ctc + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()))) + (double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString())) + double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["uniform"].ToString()))), 2);
                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                if (state_change == 1)
                                {
                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=18>Total</td><td>" + (Math.Round(sub_total, 2) - Math.Round(sub_total1, 2)) + "</td><td>" + (total_emp_count - total_emp_count1) + "</td><td>" + (no_of_duties - no_of_duties1) + "</td><td>" + (paid_days - paid_days1) + "</td><td>" + (Math.Round(rate, 2) - Math.Round(rate1, 2)) + "</td><td>" + (ot_hrs - ot_hrs1) + "</td><td>" + (ot_rate - ot_rate1) + "</td><td>" + (ot_amount - ot_amount1) + "</td><td>" + (Math.Round((rate + ot_amount), 2) - Math.Round((rate1 + ot_amount1), 2)) + "</td><td>" + (Math.Round(service_charge, 2) - Math.Round(service_charge1, 2)) + "</td><td>" + (Math.Round(grand_tot, 2) - Math.Round(grand_tot1, 2)) + "</td><td>" + (cgst - cgst1) + "</td><td>" + (sgst - sgst1) + "</td><td>" + (igst - igst1) + "</td><td>" + (gst - gst1) + "</td><td>" + (Math.Ceiling(Math.Round(ctc, 2)) - Math.Ceiling(Math.Round(ctc1, 2))) + "</td></b></tr>";
                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=18>Total</td><td>" + Math.Round(sub_total, 2) + "</td><td>" + total_emp_count + "</td><td>" + no_of_duties + "</td><td>" + paid_days + "</td><td>" + Math.Round(rate, 2) + "</td><td>" + ot_hrs + "</td><td>" + ot_rate + "</td><td>" + ot_amount + "</td><td>" + Math.Round((rate + ot_amount), 2) + "</td><td>" + Math.Round(service_charge, 2) + "</td><td>" + Math.Round(grand_tot, 2) + "</td><td>" + cgst + "</td><td>" + sgst + "</td><td>" + igst + "</td><td>" + gst + "</td><td>" + (Math.Round(ctc, 2)) + "</td></b></tr>";
                                }
                                else
                                {
                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=18>Total</td><td>" + Math.Round(sub_total, 2) + "</td><td>" + total_emp_count + "</td><td>" + no_of_duties + "</td><td>" + paid_days + "</td><td>" + Math.Round(rate, 2) + "</td><td>" + ot_hrs + "</td><td>" + ot_rate + "</td><td>" + ot_amount + "</td><td>" + Math.Round((rate + ot_amount), 2) + "</td><td>" + Math.Round(service_charge, 2) + "</td><td>" + Math.Round(grand_tot, 2) + "</td><td>" + cgst + "</td><td>" + sgst + "</td><td>" + igst + "</td><td>" + gst + "</td><td>" + (Math.Round(ctc, 2)) + "</td></b></tr>";
                                }
                            }
                        }
                        //BAGICTMM
                        else if (ds.Tables[0].Rows[ctr]["client_code"].ToString().Contains("BAGICTM"))
                        {
                            int colsize = 12;

                            tot_hrs = "<td>=ROUND(SUM(M2:M" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                            tot_ctc = "<td>=ROUND(SUM(X" + (ctr + i3 + set_start_row + 1) + ",AB" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                            tot_gst = "<td>=ROUND(SUM(Y" + (ctr + i3 + set_start_row + 1) + ":AA" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                            base_amount = "<td>=ROUND(N" + (ctr + i3 + set_start_row + 1) + "/" + ds.Tables[0].Rows[ctr]["month_days"].ToString() + " * O" + (ctr + i3 + set_start_row + 1) + ",2)</td>";

                            if (ds.Tables[0].Rows[ctr]["gst_applicable"].ToString() == "0")
                            {
                                ds.Tables[0].Rows[ctr]["IGST18"] = "0";
                                ds.Tables[0].Rows[ctr]["CGST9"] = "0";
                                ds.Tables[0].Rows[ctr]["SGST9"] = "0";
                            }

                            if (state_name != ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper())
                            {
                                if (state_name != "")
                                {
                                    //code here 
                                    i3 = i3 + 1;


                                    if (ds.Tables[0].Rows[ctr]["branch_type"].ToString() == "0")
                                    {
                                        lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=SUM(M" + (ctc1 + set_start_row) + ":M" + (ctr + i3) + ")</td><td>=ROUND(SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AA" + (ctc1 + set_start_row) + ":AA" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AB" + (ctc1 + set_start_row) + ":AB" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AC" + (ctc1 + set_start_row) + ":AC" + (ctr + i3) + "),2)</td></tr>";
                                        DUTY_HOURS = DUTY_HOURS + "," + "M" + (ctr + i3 + 1);
                                        RATE = RATE + "," + "N" + (ctr + i3 + 1);
                                        NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "O" + (ctr + i3 + 1);
                                        BASE_AMOUNT = BASE_AMOUNT + "," + "P" + (ctr + i3 + 1);
                                        OT_HOURS = OT_HOURS + "," + "Q" + (ctr + i3 + 1);
                                        OT_RATE = OT_RATE + "," + "R" + (ctr + i3 + 1);
                                        OT_AMOUNT = OT_AMOUNT + "," + "S" + (ctr + i3 + 1);
                                        TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "T" + (ctr + i3 + 1);

                                        CONVEYANCE_RATE = CONVEYANCE_RATE + "," + "U" + (ctr + i3 + 1);
                                        CONVEYANCE_BASE_RATE = CONVEYANCE_BASE_RATE + "," + "V" + (ctr + i3 + 1);

                                        SERVICE_CHARGE = SERVICE_CHARGE + "," + "W" + (ctr + i3 + 1);
                                        GRAND_TOTAL = GRAND_TOTAL + "," + "X" + (ctr + i3 + 1);
                                        CGST = CGST + "," + "Y" + (ctr + i3 + 1);
                                        SGST = SGST + "," + "Z" + (ctr + i3 + 1);
                                        IGST = IGST + "," + "AA" + (ctr + i3 + 1);
                                        TOTAL_GST = TOTAL_GST + "," + "AB" + (ctr + i3 + 1);
                                        TOTAL_CTC = TOTAL_CTC + "," + "AC" + (ctr + i3 + 1);
                                        state_change = 1;

                                        tot_hrs = "<td>=ROUND(SUM(M" + (set_start_row + 1) + ":M" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        tot_ctc = "<td>=ROUND(SUM(X" + (ctr + i3 + set_start_row + 1) + ",AB" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        tot_gst = "<td>=ROUND(SUM(Y" + (ctr + i3 + set_start_row + 1) + ":AA" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        base_amount = "<td>=ROUND(N" + (ctr + i3 + set_start_row + 1) + "/" + ds.Tables[0].Rows[ctr]["month_days"].ToString() + " * O" + (ctr + i3 + set_start_row + 1) + ",2)</td>";

                                    }
                                    else
                                    {
                                        lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=ROUND(SUM(L" + (ctc1 + set_start_row) + ":L" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(M" + (ctc1 + set_start_row) + ":M" + (ctr + i3) + "),2)</td><td>=SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + ")</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td></tr>";

                                        DUTY_HOURS = DUTY_HOURS + "," + "N" + (ctr + i3 + 1);
                                        RATE = RATE + "," + "O" + (ctr + i3 + 1);
                                        NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "P" + (ctr + i3 + 1);
                                        BASE_AMOUNT = BASE_AMOUNT + "," + "Q" + (ctr + i3 + 1);
                                        OT_HOURS = OT_HOURS + "," + "R" + (ctr + i3 + 1);
                                        OT_RATE = OT_RATE + "," + "S" + (ctr + i3 + 1);
                                        OT_AMOUNT = OT_AMOUNT + "," + "T" + (ctr + i3 + 1);
                                        TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "U" + (ctr + i3 + 1);

                                        CONVEYANCE_RATE = CONVEYANCE_RATE + "," + "V" + (ctr + i3 + 1);
                                        CONVEYANCE_BASE_RATE = CONVEYANCE_BASE_RATE + "," + "W" + (ctr + i3 + 1);

                                        SERVICE_CHARGE = SERVICE_CHARGE + "," + "X" + (ctr + i3 + 1);
                                        GRAND_TOTAL = GRAND_TOTAL + "," + "Y" + (ctr + i3 + 1);
                                        CGST = CGST + "," + "Z" + (ctr + i3 + 1);
                                        SGST = SGST + "," + "AA" + (ctr + i3 + 1);
                                        IGST = IGST + "," + "AB" + (ctr + i3 + 1);
                                        TOTAL_GST = TOTAL_GST + "," + "AC" + (ctr + i3 + 1);
                                        TOTAL_CTC = TOTAL_CTC + "," + "AD" + (ctr + i3 + 1);
                                        state_change = 1;
                                        if (ds.Tables[0].Rows[ctr]["branch_type"].ToString() != "0")
                                        {
                                            branch = "<td>" + ds.Tables[0].Rows[ctr]["branch_type"].ToString().ToUpper() + "</td>";
                                        }
                                        tot = "<td>=ROUND(SUM(AB" + (1 + set_start_row) + ":AB" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        base_amount = "<td>=ROUND(O" + (ctr + i3 + set_start_row + 1) + "/" + ds.Tables[0].Rows[ctr]["month_days"].ToString() + " * P" + (ctr + i3 + set_start_row + 1) + ",2)</td>";
                                        tot_ctc = "<td>=ROUND(SUM(W" + (ctr + i3 + set_start_row + 1) + ",AA" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        tot_gst = "<td>=ROUND(SUM(X" + (ctr + i3 + set_start_row + 1) + ":AB" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        colsize = 11;
                                    }
                                    ctc1 = ctr + i3 + 1;

                                }

                                state_name = ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper();
                            }

                            lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["fromtodate"] + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"].ToString().ToUpper() + "</td>" + opus_code + "<td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td>" + branch + "<td>" + ds.Tables[0].Rows[ctr]["txt_zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_city"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["grade_desc"] + "</td><td>" + ds.Tables[0].Rows[ctr]["hours"] + "</td><td>" + Math.Round((double.Parse(ds.Tables[0].Rows[ctr]["sub_total_c"].ToString())), 2) + "</td><td>" + ds.Tables[0].Rows[ctr]["tot_days_present"] + "</td>" + base_amount + "<td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_hours"].ToString())) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_rate"].ToString())) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString())) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["conveyance_rate"].ToString()), 2) + "</td><td>" + Math.Round((double.Parse(ds.Tables[0].Rows[ctr]["conveyance_rate"].ToString()) + ((double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString())))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["conveyance_rate"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["uniform"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()), 2) + "</td>" + tot_gst + "" + tot_ctc + "</tr>");


                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                i3 = i3 + 2;
                                //state total
                                if (ds.Tables[0].Rows[ctr]["branch_type"].ToString() == "0" || ds.Tables[0].Rows[ctr]["branch_type"].ToString() == "")
                                {

                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=SUM(M" + (ctc1 + set_start_row) + ":M" + (ctr + i3) + ")</td><td>=ROUND(SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AA" + (ctc1 + set_start_row) + ":AA" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AB" + (ctc1 + set_start_row) + ":AB" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AC" + (ctc1 + set_start_row) + ":AC" + (ctr + i3) + "),2)</td></tr>";
                                    DUTY_HOURS = DUTY_HOURS + "," + "M" + (ctr + i3 + 1);
                                    RATE = RATE + "," + "N" + (ctr + i3 + 1);
                                    NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "O" + (ctr + i3 + 1);
                                    BASE_AMOUNT = BASE_AMOUNT + "," + "P" + (ctr + i3 + 1);
                                    OT_HOURS = OT_HOURS + "," + "Q" + (ctr + i3 + 1);
                                    OT_RATE = OT_RATE + "," + "R" + (ctr + i3 + 1);
                                    OT_AMOUNT = OT_AMOUNT + "," + "S" + (ctr + i3 + 1);
                                    TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "T" + (ctr + i3 + 1);

                                    CONVEYANCE_RATE = CONVEYANCE_RATE + "," + "U" + (ctr + i3 + 1);
                                    CONVEYANCE_BASE_RATE = CONVEYANCE_BASE_RATE + "," + "V" + (ctr + i3 + 1);

                                    SERVICE_CHARGE = SERVICE_CHARGE + "," + "W" + (ctr + i3 + 1);
                                    GRAND_TOTAL = GRAND_TOTAL + "," + "X" + (ctr + i3 + 1);
                                    CGST = CGST + "," + "Y" + (ctr + i3 + 1);
                                    SGST = SGST + "," + "Z" + (ctr + i3 + 1);
                                    IGST = IGST + "," + "AA" + (ctr + i3 + 1);
                                    TOTAL_GST = TOTAL_GST + "," + "AB" + (ctr + i3 + 1);
                                    TOTAL_CTC = TOTAL_CTC + "," + "AC" + (ctr + i3 + 1);



                                    if (state_change == 1)
                                    {
                                        lc.Text = lc.Text + "<tr><b> <td align=center colspan=" + colsize + ">Grand Total</td> <td>=ROUND(SUM(" + DUTY_HOURS + "),2)</td> <td>=ROUND(SUM(" + RATE + "),2)</td> <td>=ROUND(SUM(" + NO_OF_PAID_DAYS + "),2)</td> <td>=ROUND(SUM(" + BASE_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + OT_HOURS + "),2)</td> <td>=ROUND(SUM(" + OT_RATE + "),2)</td> <td>=ROUND(SUM(" + OT_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + TOTAL_BASE_AMT_OT_AMT + "),2)</td> <td>=ROUND(SUM(" + CONVEYANCE_RATE + "),2)</td>  <td>=ROUND(SUM(" + CONVEYANCE_BASE_RATE + "),2)</td> <td>=ROUND(SUM(" + SERVICE_CHARGE + "),2)</td> <td>=ROUND(SUM(" + GRAND_TOTAL + "),2)</td> <td>=ROUND(SUM(" + CGST + "),2)</td> <td>=ROUND(SUM(" + SGST + "),2)</td> <td>=ROUND(SUM(" + IGST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_GST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_CTC + "),2)</td> </b></tr>";

                                    }
                                }


                                //client total
                                else
                                {

                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + ")</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AA" + (ctc1 + set_start_row) + ":AA" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AB" + (ctc1 + set_start_row) + ":AB" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AC" + (ctc1 + set_start_row) + ":AC" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AD" + (ctc1 + set_start_row) + ":AD" + (ctr + i3) + "),2)</td></tr>";


                                    DUTY_HOURS = DUTY_HOURS + "," + "N" + (ctr + i3 + 1);
                                    RATE = RATE + "," + "O" + (ctr + i3 + 1);
                                    NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "P" + (ctr + i3 + 1);
                                    BASE_AMOUNT = BASE_AMOUNT + "," + "Q" + (ctr + i3 + 1);
                                    OT_HOURS = OT_HOURS + "," + "R" + (ctr + i3 + 1);
                                    OT_RATE = OT_RATE + "," + "S" + (ctr + i3 + 1);
                                    OT_AMOUNT = OT_AMOUNT + "," + "T" + (ctr + i3 + 1);
                                    TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "U" + (ctr + i3 + 1);

                                    CONVEYANCE_RATE = CONVEYANCE_RATE + "," + "V" + (ctr + i3 + 1);
                                    CONVEYANCE_BASE_RATE = CONVEYANCE_BASE_RATE + "," + "W" + (ctr + i3 + 1);

                                    SERVICE_CHARGE = SERVICE_CHARGE + "," + "X" + (ctr + i3 + 1);
                                    GRAND_TOTAL = GRAND_TOTAL + "," + "Y" + (ctr + i3 + 1);
                                    CGST = CGST + "," + "Z" + (ctr + i3 + 1);
                                    SGST = SGST + "," + "AA" + (ctr + i3 + 1);
                                    IGST = IGST + "," + "AB" + (ctr + i3 + 1);
                                    TOTAL_GST = TOTAL_GST + "," + "AC" + (ctr + i3 + 1);
                                    TOTAL_CTC = TOTAL_CTC + "," + "AD" + (ctr + i3 + 1);
                                    if (state_change == 1)
                                    {
                                        lc.Text = lc.Text + "<tr><b> <td align=center colspan=" + colsize + ">Grand Total</td> <td>=ROUND(SUM(" + DUTY_HOURS + "),2)</td> <td>=ROUND(SUM(" + RATE + "),2)</td> <td>=ROUND(SUM(" + NO_OF_PAID_DAYS + "),2)</td> <td>=ROUND(SUM(" + BASE_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + OT_HOURS + "),2)</td> <td>=ROUND(SUM(" + OT_RATE + "),2)</td> <td>=ROUND(SUM(" + OT_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + TOTAL_BASE_AMT_OT_AMT + "),2)</td>  <td>=ROUND(SUM(" + CONVEYANCE_RATE + "),2)</td>  <td>=ROUND(SUM(" + CONVEYANCE_BASE_RATE + "),2)</td> <td>=ROUND(SUM(" + SERVICE_CHARGE + "),2)</td> <td>=ROUND(SUM(" + GRAND_TOTAL + "),2)</td> <td>=ROUND(SUM(" + CGST + "),2)</td> <td>=ROUND(SUM(" + SGST + "),2)</td> <td>=ROUND(SUM(" + IGST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_GST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_CTC + "),2)</td> </b></tr>";
                                    }
                                }

                            }


                        }
                        else if (ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BAG") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BG") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIK HK") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC SG") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC") && !ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("4"))
                        {
                            int colsize = 11;

                            //tot_hrs = "<td>=ROUND(SUM(K2:K" + (ctr + i3 + 2) + "),2)</td>";
                            tot_ctc = "<td>=ROUND(SUM(T" + (ctr + i3 + set_start_row + 1) + ",X" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                            tot_gst = "<td>=ROUND(SUM(U" + (ctr + i3 + set_start_row + 1) + ":W" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                            base_amount = "<td>=ROUND(L" + (ctr + i3 + set_start_row + 1) + "/" + ds.Tables[0].Rows[ctr]["month_days"].ToString() + " * M" + (ctr + i3 + set_start_row + 1) + ",2)</td>";

                            if (ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIK HK") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC SG") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC"))
                            {
                                opus_code = "<td>" + ds.Tables[0].Rows[ctr]["OPus_NO"].ToString().ToUpper() + "</td>";
                                tot = "<td>=ROUND(SUM(Z" + (1 + set_start_row) + ":Z" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                base_amount = "<td>=ROUND(M" + (ctr + i3 + set_start_row + 1) + "/" + ds.Tables[0].Rows[ctr]["month_days"].ToString() + " * N" + (ctr + i3 + set_start_row + 1) + ",2)</td>";
                                tot_ctc = "<td>=ROUND(SUM(U" + (ctr + i3 + set_start_row + 1) + ",Y" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                tot_gst = "<td>=ROUND(SUM(V" + (ctr + i3 + set_start_row + 1) + ":X" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                colsize = 12;
                            }


                            if (ds.Tables[0].Rows[ctr]["gst_applicable"].ToString() == "0")
                            {
                                ds.Tables[0].Rows[ctr]["IGST18"] = "0";
                                ds.Tables[0].Rows[ctr]["CGST9"] = "0";
                                ds.Tables[0].Rows[ctr]["SGST9"] = "0";
                            }

                            if (state_name != ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper())
                            {
                                if (state_name != "")
                                {
                                    //code here 
                                    i3 = i3 + 1;


                                    if (ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIK HK") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC SG") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC"))
                                    {
                                        lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=SUM(M" + (ctc1 + set_start_row) + ":M" + (ctr + i3) + ")</td><td>=ROUND(SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td></tr>";
                                        //DUTY_HOURS = DUTY_HOURS + "," + "k" + (ctr + i3 + 1);
                                        RATE = RATE + "," + "M" + (ctr + i3 + 1);
                                        NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "N" + (ctr + i3 + 1);
                                        BASE_AMOUNT = BASE_AMOUNT + "," + "O" + (ctr + i3 + 1);
                                        OT_HOURS = OT_HOURS + "," + "P" + (ctr + i3 + 1);
                                        OT_RATE = OT_RATE + "," + "Q" + (ctr + i3 + 1);
                                        OT_AMOUNT = OT_AMOUNT + "," + "R" + (ctr + i3 + 1);
                                        TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "S" + (ctr + i3 + 1);
                                        SERVICE_CHARGE = SERVICE_CHARGE + "," + "T" + (ctr + i3 + 1);
                                        GRAND_TOTAL = GRAND_TOTAL + "," + "U" + (ctr + i3 + 1);
                                        CGST = CGST + "," + "V" + (ctr + i3 + 1);
                                        SGST = SGST + "," + "W" + (ctr + i3 + 1);
                                        IGST = IGST + "," + "X" + (ctr + i3 + 1);
                                        TOTAL_GST = TOTAL_GST + "," + "Y" + (ctr + i3 + 1);
                                        TOTAL_CTC = TOTAL_CTC + "," + "Z" + (ctr + i3 + 1);
                                        state_change = 1;

                                        //tot_hrs = "<td>=ROUND(SUM(K2:K" + (ctr + i3 + 2) + "),2)</td>";
                                        tot_ctc = "<td>=ROUND(SUM(U" + (ctr + i3 + set_start_row + 1) + ",Y" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        tot_gst = "<td>=ROUND(SUM(V" + (ctr + i3 + set_start_row + 1) + ":X" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        base_amount = "<td>=ROUND(M" + (ctr + i3 + set_start_row + 1) + "/" + ds.Tables[0].Rows[ctr]["month_days"].ToString() + " * N" + (ctr + i3 + set_start_row + 1) + ",2)</td>";

                                    }
                                    else
                                    {
                                        lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=ROUND(SUM(L" + (ctc1 + set_start_row) + ":L" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(M" + (ctc1 + set_start_row) + ":M" + (ctr + i3) + "),2)</td><td>=SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + ")</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td></tr>";

                                        //DUTY_HOURS = DUTY_HOURS + "," + "L" + (ctr + i3 + 1);
                                        RATE = RATE + "," + "L" + (ctr + i3 + 1);
                                        NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "M" + (ctr + i3 + 1);
                                        BASE_AMOUNT = BASE_AMOUNT + "," + "N" + (ctr + i3 + 1);
                                        OT_HOURS = OT_HOURS + "," + "O" + (ctr + i3 + 1);
                                        OT_RATE = OT_RATE + "," + "P" + (ctr + i3 + 1);
                                        OT_AMOUNT = OT_AMOUNT + "," + "Q" + (ctr + i3 + 1);
                                        TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "R" + (ctr + i3 + 1);
                                        SERVICE_CHARGE = SERVICE_CHARGE + "," + "S" + (ctr + i3 + 1);
                                        GRAND_TOTAL = GRAND_TOTAL + "," + "T" + (ctr + i3 + 1);
                                        CGST = CGST + "," + "U" + (ctr + i3 + 1);
                                        SGST = SGST + "," + "V" + (ctr + i3 + 1);
                                        IGST = IGST + "," + "W" + (ctr + i3 + 1);
                                        TOTAL_GST = TOTAL_GST + "," + "X" + (ctr + i3 + 1);
                                        TOTAL_CTC = TOTAL_CTC + "," + "Y" + (ctr + i3 + 1);
                                        state_change = 1;

                                        //tot = "<td>=ROUND(SUM(Z2:Z" + (ctr + i3 + 2) + "),2)</td>";
                                        base_amount = "<td>=ROUND(L" + (ctr + i3 + set_start_row + 1) + "/" + ds.Tables[0].Rows[ctr]["month_days"].ToString() + " * M" + (ctr + i3 + set_start_row + 1) + ",2)</td>";
                                        //tot_ctc = "<td>=ROUND(SUM(U" + (ctr + i3 + 2) + ",Y" + (ctr + i3 + 2) + "),2)</td>";
                                        //tot_gst = "<td>=ROUND(SUM(V" + (ctr + i3 + 2) + ":X" + (ctr + i3 + 2) + "),2)</td>";

                                        tot_ctc = "<td>=ROUND(SUM(T" + (ctr + i3 + set_start_row + 1) + ",X" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        tot_gst = "<td>=ROUND(SUM(U" + (ctr + i3 + set_start_row + 1) + ":W" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        //colsize = 10;
                                    }
                                    ctc1 = ctr + i3 + 1;

                                }

                                state_name = ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper();
                            }

                            lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["fromtodate"] + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"].ToString().ToUpper() + "</td>" + opus_code + "<td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td>" + branch + "<td>" + ds.Tables[0].Rows[ctr]["txt_zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["grade_desc"] + "</td><td>" + Math.Round((double.Parse(ds.Tables[0].Rows[ctr]["sub_total_c"].ToString())), 2) + "</td><td>" + ds.Tables[0].Rows[ctr]["tot_days_present"] + "</td>" + base_amount + "<td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_hours"].ToString())) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_rate"].ToString())) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString())) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["uniform"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()), 2) + "</td>" + tot_gst + "" + tot_ctc + "</tr>");


                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                i3 = i3 + 2;
                                //state total
                                if (ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIK HK") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC SG") || ds.Tables[0].Rows[ctr]["client_code"].ToString().Equals("BALIC"))
                                {

                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=SUM(M" + (ctc1 + set_start_row) + ":M" + (ctr + i3) + ")</td><td>=ROUND(SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td></tr>";

                                    RATE = RATE + "," + "M" + (ctr + i3 + 1);
                                    NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "N" + (ctr + i3 + 1);
                                    BASE_AMOUNT = BASE_AMOUNT + "," + "O" + (ctr + i3 + 1);
                                    OT_HOURS = OT_HOURS + "," + "P" + (ctr + i3 + 1);
                                    OT_RATE = OT_RATE + "," + "Q" + (ctr + i3 + 1);
                                    OT_AMOUNT = OT_AMOUNT + "," + "R" + (ctr + i3 + 1);
                                    TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "S" + (ctr + i3 + 1);
                                    SERVICE_CHARGE = SERVICE_CHARGE + "," + "T" + (ctr + i3 + 1);
                                    GRAND_TOTAL = GRAND_TOTAL + "," + "U" + (ctr + i3 + 1);
                                    CGST = CGST + "," + "V" + (ctr + i3 + 1);
                                    SGST = SGST + "," + "W" + (ctr + i3 + 1);
                                    IGST = IGST + "," + "X" + (ctr + i3 + 1);
                                    TOTAL_GST = TOTAL_GST + "," + "Y" + (ctr + i3 + 1);
                                    TOTAL_CTC = TOTAL_CTC + "," + "Z" + (ctr + i3 + 1);

                                    if (state_change == 1)
                                    {
                                        lc.Text = lc.Text + "<tr><b> <td align=center colspan=" + colsize + ">Total</td> <td>=ROUND(SUM(" + RATE + "),2)</td> <td>=ROUND(SUM(" + NO_OF_PAID_DAYS + "),2)</td> <td>=ROUND(SUM(" + BASE_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + OT_HOURS + "),2)</td> <td>=ROUND(SUM(" + OT_RATE + "),2)</td> <td>=ROUND(SUM(" + OT_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + TOTAL_BASE_AMT_OT_AMT + "),2)</td> <td>=ROUND(SUM(" + SERVICE_CHARGE + "),2)</td> <td>=ROUND(SUM(" + GRAND_TOTAL + "),2)</td> <td>=ROUND(SUM(" + CGST + "),2)</td> <td>=ROUND(SUM(" + SGST + "),2)</td> <td>=ROUND(SUM(" + IGST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_GST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_CTC + "),2)</td> </b></tr>";

                                    }
                                }

                                //client total
                                else
                                {

                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=ROUND(SUM(L" + (ctc1 + set_start_row) + ":L" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(M" + (ctc1 + set_start_row) + ":M" + (ctr + i3) + "),2)</td><td>=SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + ")</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td></tr>";


                                    RATE = RATE + "," + "L" + (ctr + i3 + 1);
                                    NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "M" + (ctr + i3 + 1);
                                    BASE_AMOUNT = BASE_AMOUNT + "," + "N" + (ctr + i3 + 1);
                                    OT_HOURS = OT_HOURS + "," + "O" + (ctr + i3 + 1);
                                    OT_RATE = OT_RATE + "," + "P" + (ctr + i3 + 1);
                                    OT_AMOUNT = OT_AMOUNT + "," + "Q" + (ctr + i3 + 1);
                                    TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "R" + (ctr + i3 + 1);
                                    SERVICE_CHARGE = SERVICE_CHARGE + "," + "S" + (ctr + i3 + 1);
                                    GRAND_TOTAL = GRAND_TOTAL + "," + "T" + (ctr + i3 + 1);
                                    CGST = CGST + "," + "U" + (ctr + i3 + 1);
                                    SGST = SGST + "," + "V" + (ctr + i3 + 1);
                                    IGST = IGST + "," + "W" + (ctr + i3 + 1);
                                    TOTAL_GST = TOTAL_GST + "," + "X" + (ctr + i3 + 1);
                                    TOTAL_CTC = TOTAL_CTC + "," + "Y" + (ctr + i3 + 1);
                                    if (state_change == 1)
                                    {
                                        lc.Text = lc.Text + "<tr><b> <td align=center colspan=" + colsize + ">Total</td> <td>=ROUND(SUM(" + DUTY_HOURS + "),2)</td> <td>=ROUND(SUM(" + RATE + "),2)</td> <td>=ROUND(SUM(" + NO_OF_PAID_DAYS + "),2)</td> <td>=ROUND(SUM(" + BASE_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + OT_HOURS + "),2)</td> <td>=ROUND(SUM(" + OT_RATE + "),2)</td> <td>=ROUND(SUM(" + OT_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + TOTAL_BASE_AMT_OT_AMT + "),2)</td> <td>=ROUND(SUM(" + SERVICE_CHARGE + "),2)</td> <td>=ROUND(SUM(" + GRAND_TOTAL + "),2)</td> <td>=ROUND(SUM(" + CGST + "),2)</td> <td>=ROUND(SUM(" + SGST + "),2)</td> <td>=ROUND(SUM(" + IGST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_GST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_CTC + "),2)</td> </b></tr>";
                                    }
                                }


                            }

                        }
                        else
                        {


                            int colsize = 12;

                            tot_hrs = "<td>=ROUND(SUM(M2:M" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                            tot_ctc = "<td>=ROUND(SUM(V" + (ctr + i3 + set_start_row + 1) + ",Z" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                            tot_gst = "<td>=ROUND(SUM(W" + (ctr + i3 + set_start_row + 1) + ":Y" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                            base_amount = "<td>=ROUND(N" + (ctr + i3 + set_start_row + 1) + "/" + ds.Tables[0].Rows[ctr]["month_days"].ToString() + " * O" + (ctr + i3 + set_start_row + 1) + ",2)</td>";

                            if (ds.Tables[0].Rows[ctr]["branch_type"].ToString() != "0" && ds.Tables[0].Rows[ctr]["branch_type"].ToString() != "")
                            {
                                branch = "<td>" + ds.Tables[0].Rows[ctr]["branch_type"].ToString().ToUpper() + "</td>";
                                tot = "<td>=ROUND(SUM(AB2:AB" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                base_amount = "<td>=ROUND(O" + (ctr + i3 + set_start_row + 1) + "/" + ds.Tables[0].Rows[ctr]["month_days"].ToString() + " * P" + (ctr + i3 + set_start_row + 1) + ",2)</td>";
                                tot_ctc = "<td>=ROUND(SUM(W" + (ctr + i3 + set_start_row + 1) + ",AA" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                tot_gst = "<td>=ROUND(SUM(X" + (ctr + i3 + set_start_row + 1) + ":Z" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                colsize = 13;
                            }

                            if (ds.Tables[0].Rows[ctr]["gst_applicable"].ToString() == "0")
                            {
                                ds.Tables[0].Rows[ctr]["IGST18"] = "0";
                                ds.Tables[0].Rows[ctr]["CGST9"] = "0";
                                ds.Tables[0].Rows[ctr]["SGST9"] = "0";
                            }

                            if (state_name != ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper())
                            {
                                if (state_name != "")
                                {
                                    //code here 
                                    i3 = i3 + 1;


                                    if (ds.Tables[0].Rows[ctr]["branch_type"].ToString() == "0" && !ds.Tables[0].Rows[ctr]["client"].ToString().Contains("BAJAJ ALLIANZ LIFE INSURANCE COMPANY LIMITED"))
                                    {
                                        lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=SUM(M" + (ctc1 + set_start_row) + ":M" + (ctr + i3) + ")</td><td>=ROUND(SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AA" + (ctc1 + set_start_row) + ":AA" + (ctr + i3) + "),2)</td></tr>";
                                        DUTY_HOURS = DUTY_HOURS + "," + "M" + (ctr + i3 + 1);
                                        RATE = RATE + "," + "N" + (ctr + i3 + 1);
                                        NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "O" + (ctr + i3 + 1);
                                        BASE_AMOUNT = BASE_AMOUNT + "," + "P" + (ctr + i3 + 1);
                                        OT_HOURS = OT_HOURS + "," + "Q" + (ctr + i3 + 1);
                                        OT_RATE = OT_RATE + "," + "R" + (ctr + i3 + 1);
                                        OT_AMOUNT = OT_AMOUNT + "," + "S" + (ctr + i3 + 1);
                                        TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "T" + (ctr + i3 + 1);
                                        SERVICE_CHARGE = SERVICE_CHARGE + "," + "U" + (ctr + i3 + 1);
                                        GRAND_TOTAL = GRAND_TOTAL + "," + "V" + (ctr + i3 + 1);
                                        CGST = CGST + "," + "W" + (ctr + i3 + 1);
                                        SGST = SGST + "," + "X" + (ctr + i3 + 1);
                                        IGST = IGST + "," + "Y" + (ctr + i3 + 1);
                                        TOTAL_GST = TOTAL_GST + "," + "Z" + (ctr + i3 + 1);
                                        TOTAL_CTC = TOTAL_CTC + "," + "AA" + (ctr + i3 + 1);
                                        state_change = 1;

                                        tot_ctc = "<td>=ROUND(SUM(V" + (ctr + i3 + set_start_row + 1) + ",Z" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        tot_gst = "<td>=ROUND(SUM(W" + (ctr + i3 + set_start_row + 1) + ":Y" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        base_amount = "<td>=ROUND(N" + (ctr + i3 + set_start_row + 1) + "/" + ds.Tables[0].Rows[ctr]["month_days"].ToString() + " * O" + (ctr + i3 + set_start_row + 1) + ",2)</td>";

                                    }
                                    else
                                    {
                                        lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + ")</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AA" + (ctc1 + set_start_row) + ":AA" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AB" + (ctc1 + set_start_row) + ":AB" + (ctr + i3) + "),2)</td></tr>";

                                        DUTY_HOURS = DUTY_HOURS + "," + "N" + (ctr + i3 + 1);
                                        RATE = RATE + "," + "O" + (ctr + i3 + 1);
                                        NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "P" + (ctr + i3 + 1);
                                        BASE_AMOUNT = BASE_AMOUNT + "," + "Q" + (ctr + i3 + 1);
                                        OT_HOURS = OT_HOURS + "," + "R" + (ctr + i3 + 1);
                                        OT_RATE = OT_RATE + "," + "S" + (ctr + i3 + 1);
                                        OT_AMOUNT = OT_AMOUNT + "," + "T" + (ctr + i3 + 1);
                                        TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "U" + (ctr + i3 + 1);
                                        SERVICE_CHARGE = SERVICE_CHARGE + "," + "V" + (ctr + i3 + 1);
                                        GRAND_TOTAL = GRAND_TOTAL + "," + "W" + (ctr + i3 + 1);
                                        CGST = CGST + "," + "X" + (ctr + i3 + 1);
                                        SGST = SGST + "," + "Y" + (ctr + i3 + 1);
                                        IGST = IGST + "," + "Z" + (ctr + i3 + 1);
                                        TOTAL_GST = TOTAL_GST + "," + "AA" + (ctr + i3 + 1);
                                        TOTAL_CTC = TOTAL_CTC + "," + "AB" + (ctr + i3 + 1);
                                        state_change = 1;
                                        if (ds.Tables[0].Rows[ctr]["branch_type"].ToString() != "0")
                                        {
                                            branch = "<td>" + ds.Tables[0].Rows[ctr]["branch_type"].ToString().ToUpper() + "</td>";
                                        }
                                        tot = "<td>=ROUND(SUM(AB" + (1 + set_start_row) + ":AB" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        base_amount = "<td>=ROUND(O" + (ctr + i3 + set_start_row + 1) + "/" + ds.Tables[0].Rows[ctr]["month_days"].ToString() + " * P" + (1 + ctr + i3 + set_start_row) + ",2)</td>";
                                        tot_ctc = "<td>=ROUND(SUM(W" + (ctr + i3 + set_start_row + 1) + ",AA" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        tot_gst = "<td>=ROUND(SUM(X" + (ctr + i3 + set_start_row + 1) + ":Z" + (ctr + i3 + set_start_row + 1) + "),2)</td>";
                                        colsize = 13;
                                    }
                                    ctc1 = ctr + i3 + 1;

                                }

                                state_name = ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper();
                            }


                            lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["fromtodate"] + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"].ToString().ToUpper() + "</td>" + opus_code + "<td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td>" + branch + "<td>" + ds.Tables[0].Rows[ctr]["txt_zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_city"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["grade_desc"] + "</td><td>" + ds.Tables[0].Rows[ctr]["hours"] + "</td><td>" + Math.Round((double.Parse(ds.Tables[0].Rows[ctr]["sub_total_c"].ToString())), 2) + "</td><td>" + ds.Tables[0].Rows[ctr]["tot_days_present"] + "</td>" + base_amount + "<td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_hours"].ToString())) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_rate"].ToString())) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString())) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["uniform"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()), 2) + "</td>" + tot_gst + "" + tot_ctc + "</tr>");


                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                i3 = i3 + 2;
                                //state total
                                if (ds.Tables[0].Rows[ctr]["branch_type"].ToString() == "0" || ds.Tables[0].Rows[ctr]["branch_type"].ToString() == "")
                                {

                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=SUM(M" + (ctc1 + set_start_row) + ":M" + (ctr + i3) + ")</td><td>=ROUND(SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AA" + (ctc1 + set_start_row) + ":AA" + (ctr + i3) + "),2)</td></tr>";
                                    DUTY_HOURS = DUTY_HOURS + "," + "M" + (ctr + i3 + 1);
                                    RATE = RATE + "," + "N" + (ctr + i3 + 1);
                                    NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "O" + (ctr + i3 + 1);
                                    BASE_AMOUNT = BASE_AMOUNT + "," + "P" + (ctr + i3 + 1);
                                    OT_HOURS = OT_HOURS + "," + "Q" + (ctr + i3 + 1);
                                    OT_RATE = OT_RATE + "," + "R" + (ctr + i3 + 1);
                                    OT_AMOUNT = OT_AMOUNT + "," + "S" + (ctr + i3 + 1);
                                    TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "T" + (ctr + i3 + 1);
                                    SERVICE_CHARGE = SERVICE_CHARGE + "," + "U" + (ctr + i3 + 1);
                                    GRAND_TOTAL = GRAND_TOTAL + "," + "V" + (ctr + i3 + 1);
                                    CGST = CGST + "," + "W" + (ctr + i3 + 1);
                                    SGST = SGST + "," + "X" + (ctr + i3 + 1);
                                    IGST = IGST + "," + "Y" + (ctr + i3 + 1);
                                    TOTAL_GST = TOTAL_GST + "," + "Z" + (ctr + i3 + 1);
                                    TOTAL_CTC = TOTAL_CTC + "," + "AA" + (ctr + i3 + 1);



                                    if (state_change == 1 && state_name_ddl.Equals("ALL"))
                                    {
                                        lc.Text = lc.Text + "<tr><b> <td align=center colspan=" + colsize + ">Grand Total</td> <td>=ROUND(SUM(" + DUTY_HOURS + "),2)</td> <td>=ROUND(SUM(" + RATE + "),2)</td> <td>=ROUND(SUM(" + NO_OF_PAID_DAYS + "),2)</td> <td>=ROUND(SUM(" + BASE_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + OT_HOURS + "),2)</td> <td>=ROUND(SUM(" + OT_RATE + "),2)</td> <td>=ROUND(SUM(" + OT_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + TOTAL_BASE_AMT_OT_AMT + "),2)</td> <td>=ROUND(SUM(" + SERVICE_CHARGE + "),2)</td> <td>=ROUND(SUM(" + GRAND_TOTAL + "),2)</td> <td>=ROUND(SUM(" + CGST + "),2)</td> <td>=ROUND(SUM(" + SGST + "),2)</td> <td>=ROUND(SUM(" + IGST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_GST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_CTC + "),2)</td> </b></tr>";

                                    }
                                }


                                //client total
                                else
                                {

                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=" + colsize + ">Total</td><td>=SUM(N" + (ctc1 + set_start_row) + ":N" + (ctr + i3) + ")</td><td>=ROUND(SUM(O" + (ctc1 + set_start_row) + ":O" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(P" + (ctc1 + set_start_row) + ":P" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Q" + (ctc1 + set_start_row) + ":Q" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(R" + (ctc1 + set_start_row) + ":R" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(S" + (ctc1 + set_start_row) + ":S" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(T" + (ctc1 + set_start_row) + ":T" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(U" + (ctc1 + set_start_row) + ":U" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(V" + (ctc1 + set_start_row) + ":V" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(W" + (ctc1 + set_start_row) + ":W" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(X" + (ctc1 + set_start_row) + ":X" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Y" + (ctc1 + set_start_row) + ":Y" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(Z" + (ctc1 + set_start_row) + ":Z" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AA" + (ctc1 + set_start_row) + ":AA" + (ctr + i3) + "),2)</td><td>=ROUND(SUM(AB" + (ctc1 + set_start_row) + ":AB" + (ctr + i3) + "),2)</td></tr>";


                                    DUTY_HOURS = DUTY_HOURS + "," + "N" + (ctr + i3 + 1);
                                    RATE = RATE + "," + "O" + (ctr + i3 + 1);
                                    NO_OF_PAID_DAYS = NO_OF_PAID_DAYS + "," + "P" + (ctr + i3 + 1);
                                    BASE_AMOUNT = BASE_AMOUNT + "," + "Q" + (ctr + i3 + 1);
                                    OT_HOURS = OT_HOURS + "," + "R" + (ctr + i3 + 1);
                                    OT_RATE = OT_RATE + "," + "S" + (ctr + i3 + 1);
                                    OT_AMOUNT = OT_AMOUNT + "," + "T" + (ctr + i3 + 1);
                                    TOTAL_BASE_AMT_OT_AMT = TOTAL_BASE_AMT_OT_AMT + "," + "U" + (ctr + i3 + 1);
                                    SERVICE_CHARGE = SERVICE_CHARGE + "," + "V" + (ctr + i3 + 1);
                                    GRAND_TOTAL = GRAND_TOTAL + "," + "W" + (ctr + i3 + 1);
                                    CGST = CGST + "," + "X" + (ctr + i3 + 1);
                                    SGST = SGST + "," + "Y" + (ctr + i3 + 1);
                                    IGST = IGST + "," + "Z" + (ctr + i3 + 1);
                                    TOTAL_GST = TOTAL_GST + "," + "AA" + (ctr + i3 + 1);
                                    TOTAL_CTC = TOTAL_CTC + "," + "AB" + (ctr + i3 + 1);
                                    if (state_change == 1 && state_name_ddl.Equals("ALL"))
                                    {
                                        lc.Text = lc.Text + "<tr><b> <td align=center colspan=" + colsize + ">Grand Total</td> <td>=ROUND(SUM(" + DUTY_HOURS + "),2)</td> <td>=ROUND(SUM(" + RATE + "),2)</td> <td>=ROUND(SUM(" + NO_OF_PAID_DAYS + "),2)</td> <td>=ROUND(SUM(" + BASE_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + OT_HOURS + "),2)</td> <td>=ROUND(SUM(" + OT_RATE + "),2)</td> <td>=ROUND(SUM(" + OT_AMOUNT + "),2)</td> <td>=ROUND(SUM(" + TOTAL_BASE_AMT_OT_AMT + "),2)</td> <td>=ROUND(SUM(" + SERVICE_CHARGE + "),2)</td> <td>=ROUND(SUM(" + GRAND_TOTAL + "),2)</td> <td>=ROUND(SUM(" + CGST + "),2)</td> <td>=ROUND(SUM(" + SGST + "),2)</td> <td>=ROUND(SUM(" + IGST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_GST + "),2)</td> <td>=ROUND(SUM(" + TOTAL_CTC + "),2)</td> </b></tr>";
                                    }
                                }


                            }
                        }
                    }
                    else if (i == 3 || i == 8)
                    {
                        string color = "";
                        bodystr = "";
                        int start_first_row = 3;
                        if (ds.Tables[0].Rows[ctr]["DAY01"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY01"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY02"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY02"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY03"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY03"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY04"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY04"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY05"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY05"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY06"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY06"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY07"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY07"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY08"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY08"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY09"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY09"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY10"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY10"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY11"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY11"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY12"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY12"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY13"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY13"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY14"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY14"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY15"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY15"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY16"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY16"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY17"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY17"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY18"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY18"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY19"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY19"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY20"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY20"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY21"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY21"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY22"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY22"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY23"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY23"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY24"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY24"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY25"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY25"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY26"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY26"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY27"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY27"] + "</td>";
                        if (ds.Tables[0].Rows[ctr]["DAY28"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY28"] + "</td>";

                        int days = int.Parse(ds.Tables[0].Rows[ctr]["total days"].ToString());
                        if (month_days > 0)
                        {
                            days = month_days;
                        }

                        if (days == 29)
                        {
                            if (ds.Tables[0].Rows[ctr]["DAY29"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY29"] + "</td>";
                            //bodystr = "<td>" + ds.Tables[0].Rows[ctr]["DAY29"] + "</td>"; 
                        }
                        else if (days == 30)
                        {
                            if (ds.Tables[0].Rows[ctr]["DAY29"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY29"] + "</td>";
                            if (ds.Tables[0].Rows[ctr]["DAY30"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY30"] + "</td>";

                            // bodystr = "<td>" + ds.Tables[0].Rows[ctr]["DAY29"] + "</td><td>" + ds.Tables[0].Rows[ctr]["DAY30"] + "</td>";
                        }
                        else if (days == 31)
                        {
                            if (ds.Tables[0].Rows[ctr]["DAY29"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY29"] + "</td>";
                            if (ds.Tables[0].Rows[ctr]["DAY30"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY30"] + "</td>";
                            if (ds.Tables[0].Rows[ctr]["DAY31"].ToString() == "A") { color = "red"; } else { color = "white"; } bodystr = bodystr + "<td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["DAY31"] + "</td>";

                            //  bodystr = "<td>" + ds.Tables[0].Rows[ctr]["DAY29"] + "</td><td>" + ds.Tables[0].Rows[ctr]["DAY30"] + "</td><td>" + ds.Tables[0].Rows[ctr]["DAY31"] + "</td>";
                        }
                        int count = bodystr.Split('A').Length - 1;
                        string present_day1 = (days == 31 ? " = SUM(COUNTIF(J" + (ctr + start_first_row) + ":AN" + (ctr + start_first_row) + ",\"P\")+COUNTIF(J" + (ctr + start_first_row) + ":AN" + (ctr + start_first_row) + ",\"PH\")+COUNTIF(J" + (ctr + start_first_row) + ":AN" + (ctr + start_first_row) + ",\"HD\")/2)" : (days == 28) ? " = SUM(COUNTIF(J" + (ctr + start_first_row) + ":AK" + (ctr + start_first_row) + ",\"P\")+COUNTIF(J" + (ctr + start_first_row) + ":AK" + (ctr + start_first_row) + ",\"PH\")+COUNTIF(H" + (ctr + start_first_row) + ":AI" + (ctr + start_first_row) + ",\"HD\")/2)" : (days == 29) ? " = SUM(COUNTIF(H" + (ctr + start_first_row) + ":AJ" + (ctr + start_first_row) + ",\"P\")+COUNTIF(J" + (ctr + start_first_row) + ":AL" + (ctr + start_first_row) + ",\"PH\")+COUNTIF(J" + (ctr + start_first_row) + ":AL" + (ctr + start_first_row) + ",\"HD\")/2)" : "=SUM(COUNTIF(J" + (ctr + start_first_row) + ":AM" + (ctr + start_first_row) + ",\"P\")+COUNTIF(J" + (ctr + start_first_row) + ":AM" + (ctr + start_first_row) + ",\"PH\")+COUNTIF(J" + (ctr + start_first_row) + ":AM" + (ctr + start_first_row) + ",\"HD\")/2)");
                        string absent_day1 = (days == 31 ? " = SUM(COUNTIF(J" + (ctr + start_first_row) + ":AN" + (ctr + start_first_row) + ",\"A\")+COUNTIF(J" + (ctr + start_first_row) + ":AN" + (ctr + start_first_row) + ",\"HD\")/2)" : (days == 28) ? " = SUM(COUNTIF(J" + (ctr + start_first_row) + ":AK" + (ctr + start_first_row) + ",\"A\")+COUNTIF(J" + (ctr + start_first_row) + ":AK" + (ctr + start_first_row) + ",\"HD\")/2)" : (days == 29) ? " = SUM(COUNTIF(J" + (ctr + start_first_row) + ":AJ" + (ctr + start_first_row) + ",\"A\")+COUNTIF(H" + (ctr + start_first_row) + ":AJ" + (ctr + start_first_row) + ",\"HD\")/2)" : "=SUM(COUNTIF(H" + (ctr + start_first_row) + ":AJ" + (ctr + start_first_row) + ",\"A\")+COUNTIF(J" + (ctr + start_first_row) + ":AM" + (ctr + start_first_row) + ",\"HD\")/2)");

                        //int absent = Convert.ToInt32 (bodystr.Contains("A"));

                        if (state_name != ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper())
                        {
                            if (state_name != "")
                            {
                                int col_span = (int.Parse(ds.Tables[0].Rows[ctr]["total days"].ToString()) + 9);
                                if (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "BAGICTM")
                                {
                                    col_span = col_span + 1;
                                }
                                lc.Text = lc.Text + "<tr><b><td align=center colspan=" + col_span + ">Total</td><td colspan=1>" + present_days1 + "</td><td colspan=1>" + absent_days1 + "</td><td colspan=1>" + total_days1 + "</td></b></tr>";
                                present_days1 = 0;
                                absent_days1 = 0;
                                total_days1 = 0;
                                state_change = 1;
                            }
                            state_name = ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper();
                        }

                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + ds.Tables[0].Rows[ctr]["txt_zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td>" + (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "BAGICTM" ? "<td>" + ds.Tables[0].Rows[ctr]["unit_city"].ToString().ToUpper() + "</td>" : "") + "<td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["client_branch_code"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["grade_desc"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["ot_hours"].ToString().ToUpper() + "</td>" + bodystr + "<td>" + (month_days == 0 ? ds.Tables[0].Rows[ctr]["tot_days_present"] : present_day1) + "</td><td>" + (month_days == 0 ? count.ToString() : absent_day1) + "</td><td>" + (month_days == 0 ? ds.Tables[0].Rows[ctr]["total days"].ToString() : month_days.ToString()) + "</td>" + (type_cl == 1 ? "" : "<td>" + ds.Tables[0].Rows[ctr]["STATUS"].ToString() + "</td>") + "</tr>");
                        if (month_days == 0)
                        {
                            present_days = present_days + double.Parse(ds.Tables[0].Rows[ctr]["tot_days_present"].ToString());
                            absent_days = absent_days + count;
                            total_days = total_days + double.Parse(ds.Tables[0].Rows[ctr]["total days"].ToString());

                            present_days1 = present_days1 + double.Parse(ds.Tables[0].Rows[ctr]["tot_days_present"].ToString());
                            absent_days1 = absent_days1 + count;
                            total_days1 = total_days1 + double.Parse(ds.Tables[0].Rows[ctr]["total days"].ToString());


                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                int col_span = (int.Parse(ds.Tables[0].Rows[ctr]["total days"].ToString()) + 9);
                                if (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "BAGICTM")
                                {
                                    col_span = col_span + 1;
                                }
                                lc.Text = lc.Text + "<tr><b><td align=center colspan=" + col_span + ">Total</td><td colspan=1>" + present_days1 + "</td><td colspan=1>" + absent_days1 + "</td><td colspan=1>" + total_days1 + "</td></b></tr>";
                                present_days1 = 0;
                                absent_days1 = 0;
                                total_days1 = 0;
                                if (state_name_ddl.Equals("ALL"))
                                {
                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=" + col_span + ">Grand Total</td><td colspan=1>" + present_days + "</td><td colspan=1>" + absent_days + "</td><td colspan=1>" + total_days + "</td></b></tr>";
                                }
                            }
                        }
                        bodystr = "";
                    }
                    else if (i == 4)
                    {
                        if (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "UTKARSH")
                        {
                            lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + invoice + "</td><td>" + bill_date + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_gst"].ToString().ToUpper() + "</td><td>INTERNATIONAL HOUSEKEEPING & MAINTENANCE SERVICES</td><td>" + ds.Tables[0].Rows[ctr]["unit_city"].ToString().ToUpper() + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["uniform"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()))) + double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + ((double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["uniform"].ToString()))), 2) + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td></tr>");


                            grand_tot = grand_tot + ((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["uniform"].ToString())));
                            cgst = cgst + (double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()));
                            sgst = sgst + (double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()));
                            igst = igst + (double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()));

                            ctc = ctc + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()))) + (double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString())) + double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["uniform"].ToString()))), 2);
                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                lc.Text = lc.Text + "<tr><b><td align=center colspan=8>Total</td><td>" + Math.Round(grand_tot, 2) + "</td><td>" + cgst + "</td><td>" + sgst + "</td><td>" + igst + "</td><td>" + Math.Ceiling(Math.Round(ctc, 2)) + "</td></b></tr>";
                            }
                        }
                        else if (ds.Tables[0].Rows[ctr]["client_code"].ToString() == "MAX")
                        {
                            lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["grade_desc"].ToString().ToUpper() + "</td><td>" + int.Parse(ds.Tables[0].Rows[ctr]["emp_count"].ToString()) + "</td><td>" + int.Parse(ds.Tables[0].Rows[ctr]["Present_Days"].ToString()) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["grand_total"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()), 2) + "</td><td>" + invoice + "</td><td>" + ds.Tables[0].Rows[ctr]["month"].ToString() + "</td></tr>");

                        }
                    }
                    if (i == 5)
                    {
                        bodystr = "";
                        int start_first_row = 3;
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["actual_basic"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["actual_vda"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["emp_basic_vda"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bonus_rate"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["washing"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["travelling"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["education"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["allowances"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["cca_billing"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["other_allow"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bonus_gross"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["leave_gross"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["gratuity_gross"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["hra"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["special_allowance"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>=ROUND((I" + (ctr + start_first_row) + "+K" + (ctr + start_first_row) + "+L" + (ctr + start_first_row) + "+M" + (ctr + start_first_row) + "+N" + (ctr + start_first_row) + "+O" + (ctr + start_first_row) + "+P" + (ctr + start_first_row) + "+Q" + (ctr + start_first_row) + "+R" + (ctr + start_first_row) + "+S" + (ctr + start_first_row) + "+T" + (ctr + start_first_row) + "+U" + (ctr + start_first_row) + "),2)</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bonus_after_gross"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["leave_after_gross"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["gratuity_after_gross"].ToString()), 2) + "</td>";



                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["NH"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bill_pf"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["esic_amount"].ToString()), 2) + "</td>";


                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["uniform_gross"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["monthlwf"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["operational_gross"].ToString()), 2) + "</td>";


                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["allowances_after_gross"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>=ROUND(SUM(V" + (ctr + start_first_row) + ":AG" + (ctr + start_first_row) + "),2)</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["ot_rate"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["esi_on_ot_amount"].ToString()), 2) + "</td>";


                        bodystr = bodystr + "<td>" + ds.Tables[0].Rows[ctr]["hours"] + "</td>";

                        bodystr = bodystr + "<td>=ROUND(SUM(AI" + (ctr + start_first_row) + ":AJ" + (ctr + start_first_row) + "),2)</td>";

                        bodystr = bodystr + "<td>=ROUND(AH" + (ctr + start_first_row) + ",2)</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["relieving_charg"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>=ROUND(AM" + (ctr + start_first_row) + ",2)</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["uniform_after_gross"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["operational_after_gross"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>=ROUND(AK" + (ctr + start_first_row) + "*AL" + (ctr + start_first_row) + ",2)</td>";

                        bodystr = bodystr + "<td>=ROUND(AO" + (ctr + start_first_row) + ",2)</td>";

                        if (Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bill_service_charge"].ToString()), 2) == 0)
                        {
                            bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bill_service_charge_amount"].ToString()), 2) + "</td>";
                        }
                        else
                        {
                            bodystr = bodystr + "<td>=ROUND(AS" + (ctr + start_first_row) + "*" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bill_service_charge"].ToString()), 2) + ",2)/100</td>";

                        }


                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString()), 2) + "</td>";



                        bodystr = bodystr + "<td>=ROUND(SUM(AP" + (ctr + start_first_row) + ",AQ" + (ctr + start_first_row) + ",AS" + (ctr + start_first_row) + ",AT" + (ctr + start_first_row) + ",AU" + (ctr + start_first_row) + "),2)</td>";

                        lc = new LiteralControl("<tr>" + bodystr + "</tr>");

                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + ds.Tables[0].Rows[ctr]["client"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["billing_state"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["grade_desc"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["DUTYHRS"] + "</td>" + bodystr + "</tr>");


                        header = "";
                        bodystr = "";
                    }
                    //arrears
                    if (i == 6)
                    {
                        int start_first_row = 4;
                        bodystr = "";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["basic"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["vda"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["emp_basic_vda"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bonus_rate"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["washing"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["travelling"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["education"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["allowances_esic"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["cca_billing"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["other_allow"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bonus_gross"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["leave_gross"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["gratuity_gross"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["hra"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["special_allowance"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>=ROUND(SUM(L" + (ctr + start_first_row) + ":V" + (ctr + start_first_row) + ",J" + (ctr + start_first_row) + "),2)</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["bonus_after_gross"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["leave_after_gross"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["gratuity_after_gross"].ToString()), 2) + "</td>";



                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["NH"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["pf"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["esic"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["uniform_ser"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing_ser"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["lwf"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["operational_cost"].ToString()), 2) + "</td>";


                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["allowances_no_esic"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["sub_total_a"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["ot_pr_hr_rate"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["esi_on_ot_amount"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + ds.Tables[0].Rows[ctr]["ot_hours"] + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["sub_total_b"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["sub_total_ab"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["relieving_charg"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["sub_total_c"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["uniform_no_ser"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["operational_cost_no_ser"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["sub_total_c"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()), 2) + "</td>";

                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["group_insurance_billing"].ToString()), 2) + "</td>";
                        bodystr = bodystr + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()), 2) + "</td>";


                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["grade_desc"] + "</td><td>" + ds.Tables[0].Rows[ctr]["DUTYHRS"] + "</td><td>" + ds.Tables[0].Rows[ctr]["tot_days_present"] + "</td>" + bodystr + "<td>" + ds.Tables[0].Rows[ctr]["aa"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["month"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["year"].ToString().ToUpper() + "</td></tr>");
                        if (ds.Tables[0].Rows.Count == ctr + 1)
                        {
                            lc.Text = lc.Text + "<tr><b><td align=center colspan = 6>Total</td><td>=SUM(G" + start_first_row + ":G" + (ctr + start_first_row) + ")</td><td>=ROUND(SUM(H" + start_first_row + ":H" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(I" + start_first_row + ":I" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(J" + start_first_row + ":J" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(P" + start_first_row + ":P" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(R" + start_first_row + ":R" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(S" + start_first_row + ":S" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(T" + start_first_row + ":T" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(U" + start_first_row + ":U" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(V" + start_first_row + ":V" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(W" + start_first_row + ":W" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(X" + start_first_row + ":X" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(Y" + start_first_row + ":Y" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(Z" + start_first_row + ":Z" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AA" + start_first_row + ":AA" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AB" + start_first_row + ":AB" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AC" + start_first_row + ":AC" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AD" + start_first_row + ":AD" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AE" + start_first_row + ":AE" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AF" + start_first_row + ":AF" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AG3:AG" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AH" + start_first_row + ":AH" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AI" + start_first_row + ":AI" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AJ" + start_first_row + ":AJ" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AK" + start_first_row + ":AK" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AL" + start_first_row + ":AL" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AM" + start_first_row + ":AM" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AN" + start_first_row + ":AN" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AO" + start_first_row + ":AO" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AP" + start_first_row + ":AP" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AQ" + start_first_row + ":AQ" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AR" + start_first_row + ":AR" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AS" + start_first_row + ":AS" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AT" + start_first_row + ":AT" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AU" + start_first_row + ":AU" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AV" + start_first_row + ":AV" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AW" + start_first_row + ":AW" + (ctr + start_first_row) + "),2)</td></b></tr>";
                        }
                        header = "";
                        bodystr = "";
                    }
                    else if (i == 9)
                    {

                        if (ds.Tables[0].Rows[ctr]["client"].ToString().Contains("HDFC"))
                        {

                            lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["txt_zone"] + "</td><td>" + ds.Tables[0].Rows[ctr]["branch_cost_centre_code"] + "</td><td>" + ds.Tables[0].Rows[ctr]["zone"] + "</td><td></td><td>" + ds.Tables[0].Rows[ctr]["ihms"] + "</td><td>" + ds.Tables[0].Rows[ctr]["branch_cost_centre_code"] + "</td><td>" + ds.Tables[0].Rows[ctr]["material_area"] + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"] + "</td><td>" + ds.Tables[0].Rows[ctr]["location_type"] + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_count"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_count1"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_per"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["grade_desc"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["total_emp_count"] + "</td><td>" + ds.Tables[0].Rows[ctr]["tot_days_present"] + "</td><td>" + ds.Tables[0].Rows[ctr]["TOT_WORKING_DAYS"] + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_hours"].ToString())) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_rate"].ToString())) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["ot_amount"].ToString())) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()), 2) + "</td><td>" + (double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString())) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()))) + double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())), 2) + "</td></tr>");

                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                lc.Text = lc.Text + "<tr><b><td align=center colspan = 17>Total</td><td>=ROUND(SUM(R3:R" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(S3:S" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(T3:T" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(U3:U" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(V3:V" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(W3:W" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(X3:X" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(Y3:Y" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(Z3:Z" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(AA3:AA" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(AB3:AB" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(AC3:AC" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(AD3:AD" + (ctr + 3) + "),2)</td></b></tr>";

                            }
                        }

                    }

                    else if (i == 10)
                    {

                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + ds.Tables[0].Rows[ctr]["txt_zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["client"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["grade_desc"] + "</td><td>" + ds.Tables[0].Rows[ctr]["DUTYHRS"] + "</td><td>" + ds.Tables[0].Rows[ctr]["tot_days_present"] + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["ot_rate"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["esi_on_ot_amount"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["ot_rate"].ToString())) + double.Parse(ds.Tables[0].Rows[ctr]["esi_on_ot_amount"].ToString())), 2) + "</td><td>" + ds.Tables[0].Rows[ctr]["ot_hours"] + "</td><td>" + ds.Tables[0].Rows[ctr]["ot_amount"] + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())), 2) + "</td></tr>");

                        if (ds.Tables[0].Rows.Count == ctr + 1)
                        {
                            lc.Text = lc.Text + "<tr><b><td align=center colspan = 9>Total</td><td>=ROUND(SUM(J3:J" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(K3:K" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(L3:L" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(M3:M" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(N3:N" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(O3:O" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(P3:P" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(Q3:Q" + (ctr + 3) + "),2)</td></b></tr>";

                        }

                    }
                    else if (i == 11)
                    {
                        //string branch = "";


                        //if (ds.Tables[0].Rows[ctr]["branch_type"].ToString() != "0")
                        //{
                        //    branch = "<td>" + ds.Tables[0].Rows[ctr]["branch_type"].ToString().ToUpper() + "</td>";
                        //}


                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["fromtodate"] + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["txt_zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_city"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_name"].ToString().ToUpper() + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()))), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()))), 2) + "</td></tr>");

                        if (ds.Tables[0].Rows.Count == ctr + 1)
                        {
                            lc.Text = lc.Text + "<tr><b><td align=center colspan = 11>Total</td><td>=ROUND(SUM(L3:L" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(M3:M" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(N3:N" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(O3:O" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(P3:P" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(Q3:Q" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(R3:R" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(S3:S" + (ctr + 3) + "),2)</td></b></tr>";

                        }


                    }
                    else if (i == 12)
                    {
                        
                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["fromtodate"] + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["txt_zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["zone"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_city"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["days"].ToString().ToUpper() + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString()))), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()))), 2) + "</td><td>" + Math.Round(((double.Parse(ds.Tables[0].Rows[ctr]["Service_charge"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["CGST9"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["SGST9"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["IGST18"].ToString()))), 2) + "</td></tr>");

                        if (ds.Tables[0].Rows.Count == ctr + 1)
                        {
                            lc.Text = lc.Text + "<tr><b><td align=center colspan = 11>Total</td><td>=ROUND(SUM(L3:L" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(M3:M" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(N3:N" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(O3:O" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(P3:P" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(Q3:Q" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(R3:R" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(S3:S" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(T3:T" + (ctr + 3) + "),2)</td></b></tr>";

                        }

                    }
                    ctr++;
                    break;
                case ListItemType.Footer:
                    lc = new LiteralControl("</table>");
                    ctr = 0;
                    break;
            }
            container.Controls.Add(lc);
        }
    }


    protected void btn_finance_rpt_Click(object sender, EventArgs e)
    {
        hidtab.Value = "0";
        gv_attendace_load();
        ////suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        ////suraj close


        string unit = d.check_attendance_approve(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 1, ddlregion.SelectedValue);
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendance not Approved by Admin for Branch : " + unit + "');", true);
            return;

        }
        generate_report(2, 0, billing_type.SelectedValue);
    }

    protected void btn_invoice_rpt_Click(object sender, EventArgs e)
    {
        hidtab.Value = "0";
        //attendance_status();
        Notification_panel.Visible = false;
        gv_attendace_load();

        if (ViewState["ALL_STATE"] == "0")
        {
            //suraj start
            if (billing_type_validation())
            {
                return;
            }
            //suraj close


            string unit = d.check_attendance_approve(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 2, ddlregion.SelectedValue);
            if (unit != "")
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendance not Approved by Finance for Branch : " + unit + "');", true);
                return;

            }

            string branch = d.check_branch_deployment(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 2, ddlregion.SelectedValue);
            if (branch != "")
            {
                gv_load_deployment();
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Check  This  Branch : " + branch + " Having No Deployment');", true);
                return;

            }
        }
        string billing_type = "And (bill_type is null || bill_type ='')";
        string invoice_type = "";
        string start_date = get_start_date();
        string txt_month_year1 = "";
        if (arrears_invoice == 1)
        {
            if (ddl_arrears_type.SelectedValue.Equals("month"))
            {
                txt_month_year1 = txt_month_year.Text;
            }
            else
            {
                txt_month_year1 = txt_arrear_month_year.Text.Substring(3);
            }
            billing_type = "And bill_type = 'Arrears_bill'";
            invoice_type = "3";
        }
        else
        {
            invoice_type = ddl_invoice_type.SelectedValue; txt_month_year1 = txt_month_year.Text;
        }

        //invoice and bill date 
        string invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text, int.Parse(ddl_start_date_common.SelectedValue), int.Parse(ddl_end_date_common.SelectedValue), billing_type, ddlregion.SelectedValue, arrears_invoice, txt_arrear_month_year.Text, ddl_arrears_type.SelectedValue, ot_invoice);

        string invoice = "", bill_date = "";

        if (invoice_bill_date.Equals(""))
        {
            invoice = "";
            bill_date = "";

        }
        else
        {

            var invoice_bill = invoice_bill_date.Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
            if (invoice_bill.Length == 2)
            {
                invoice = invoice_bill[0].ToString();
                bill_date = invoice_bill[1].ToString();
            }
        }

        string dowmloadname = "Invoice";
        string query = null;
        string a = txt_month_year.Text;
        string firstday = "01/" + txt_month_year.Text;


        if (ddl_client.SelectedValue == "BAGICTM" && ddl_billing_state.SelectedValue == "Maharashtra")
        {
            crystalReport.Load(Server.MapPath("~/client_bill_invoice_unclub_bajaj.rpt"));
        }
        else if ((ddl_client.SelectedItem.Text.Contains("BAJAJ") && ddl_client.SelectedValue != "4") || ddl_client.SelectedValue == "DHFL")
        {
            crystalReport.Load(Server.MapPath("~/client_bill_invoice_club_bajaj.rpt"));
        }
        else if (ddl_client.SelectedValue == "4")
        {
            crystalReport.Load(Server.MapPath("~/client_bill_invoice_bfl.rpt"));

        }
        else if (ddl_client.SelectedValue == "HDFC" && ot_invoice == 1)
        {
            crystalReport.Load(Server.MapPath("~/client_bill_invoice_ot_hdfc.rpt"));
        }

        else if (ddl_client.SelectedValue == "HDFC")
        {
            crystalReport.Load(Server.MapPath("~/client_bill_invoice_hdfc.rpt"));
        }
        else if (ddl_client.SelectedValue == "Credence")
        {

            crystalReport.Load(Server.MapPath("~/client_bill_invoice_credence.rpt"));
        }

        else if (ddl_client.SelectedValue == "SUN")
        {
            crystalReport.Load(Server.MapPath("~/client_bill_invoice_sungard.rpt"));
        }
        else if (ddl_client.SelectedValue == "8")
        {
            crystalReport.Load(Server.MapPath("~/kotak_client_bill_invoice_club.rpt"));
        }
        else if (ddl_client.SelectedValue == "RCPL")
        {

            //if (!d.getsinglestring("select sum(percent) from pay_company_group where comp_code = '" + Session["COMP_CODE"].ToString() + "' AND client_code = '" + ddl_client.SelectedValue + "'").Equals(100))
            //{
            //    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Total percent is not 100%');", true);
            //}
            //report all unit wise 
            //crystalReport.Load(Server.MapPath("~/client_bill_invoice_RG.rpt"));


            if (ddl_billing_state.SelectedValue == "ALL")
            {
                crystalReport.Load(Server.MapPath("~/client_bill_invoice_RG.rpt"));
                // crystalReport.DataDefinition.FormulaFields["Uniy_total_amount"].Text = @"'" + ot_applicable + "'";

            }
            else
            {
                // rahul create report per unit wise
                crystalReport.Load(Server.MapPath("~/client_bill_invoice_RG_unit.rpt"));

            }
        }
        else
        {
            if (ddl_client.SelectedValue.Equals("ESFB"))
            {
                crystalReport.Load(Server.MapPath("~/client_bill_invoice_equitas.rpt"));
            }
            else if (ddl_client.SelectedValue.Equals("7"))
            {
                crystalReport.Load(Server.MapPath("~/client_bill_invoice_club_7.rpt"));
            }
            else if (ddl_client.SelectedValue.Equals("RLIC HK"))
            {
                crystalReport.Load(Server.MapPath("~/client_bill_invoice_club_RLIC.rpt"));
            }
            else { crystalReport.Load(Server.MapPath("~/client_bill_invoice_club.rpt")); }


        }

        //vikas add  arrears bill
        string month_year = "", arrear_month_year = "";
        month_year = txt_month_year.Text;


        //vinod
        // load_ledger_data(ddl_client.SelectedValue);

        // rahul
        query = bs.get_invoice_query(Session["COMP_CODE"].ToString(), ddl_client.SelectedItem.Text, ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text, int.Parse(ddl_start_date_common.SelectedValue), int.Parse(ddl_end_date_common.SelectedValue), billing_type, ddlregion.SelectedValue, txt_arrear_month_year.Text, txt_arrear_monthend.Text, ddl_arrears_type.SelectedValue, invoice_fl_man, invoice_arrear, ot_invoice);
        Session["ReportMonthNo"] = "01";
        ReportLoad(query, dowmloadname, invoice, bill_date);

    }
    //private void load_ledger_data(string client_code)
    //{
    //    d.operation("delete from pay_ledger_import  where client_code = '" + ddl_client.SelectedValue + "' and month = " + txt_month_year.Text.Substring(0, 2) + " and year = " + txt_month_year.Text.Substring(3));
    //    if (client_code == "8")
    //    {
    //        d.operation("INSERT INTO pay_ledger_import (comp_code,invoice_date, invoice_no,invoice_period,service_category, client_code, state, client, month, year, Amount, sgst, cgst, igst, tds_deduction, unit_gst_no) SELECT comp_code, billing_date, IFNULL(auto_invoice_no, invoice_no), fromtodate AS 'start_end_date', 'Housekeeping Services', client_code, state_name, client, month, year, ((SUM(ROUND((amount) + (Service_charge) + (uniform) + (operational_cost), 2))) + SUM((ot_rate * ot_hours))) AS 'total', IFNULL(SUM(SGST9), 0) AS 'SGST', IFNULL(SUM(CGST9), 0) AS 'CGST', IFNULL(SUM(IGST18), 0) AS 'IGST', (((SUM(ROUND((amount) + (Service_charge) + (uniform) + (operational_cost), 2))) + SUM((ot_rate * ot_hours))) * (if(comp_code='C02',0.01,0.02))) AS 'tds', unit_gst_no FROM pay_billing_unit_rate_history WHERE client_code = '8' AND (auto_invoice_no IS NOT NULL OR invoice_no IS NOT NULL) AND invoice_no != '11' AND auto_invoice_no NOT IN (SELECT DISTINCT invoice_no FROM pay_ledger_import WHERE client_code = '8') GROUP BY auto_invoice_no, invoice_no ");
    //    }
    //    else if (client_code == "4")
    //    {
    //        d.operation("INSERT INTO pay_ledger_import (comp_code, invoice_date, invoice_no, invoice_period, service_category, client_code, state, client, month, year, Amount, sgst, cgst, igst, tds_deduction, unit_gst_no) SELECT comp_code, billing_date, IFNULL(auto_invoice_no, invoice_no), fromtodate AS 'start_end_date', 'Housekeeping Services', client_code, state_name, client, month, year, ((SUM(ROUND((amount) + (Service_charge) + (uniform) + (operational_cost) + (ot_rate * ot_hours), 2))) - ((SUM(ROUND((amount) + (Service_charge) + (uniform) + (operational_cost) + (ot_rate * ot_hours), 2))) * (if(comp_code='C02',0.01,0.02)))) AS 'total', IFNULL(SUM(SGST9), 0) AS 'SGST', IFNULL(SUM(CGST9), 0) AS 'CGST', IFNULL(SUM(IGST18), 0) AS 'IGST', ((SUM(ROUND((amount) + (Service_charge) + (uniform) + (operational_cost) + (ot_rate * ot_hours), 2))) * (if(comp_code='C02',0.01,0.02))) AS 'tds', unit_gst_no FROM pay_billing_unit_rate_history WHERE client_code = '4' AND (auto_invoice_no IS NOT NULL OR invoice_no IS NOT NULL) AND invoice_no != '11' AND auto_invoice_no NOT IN (SELECT DISTINCT invoice_no FROM pay_ledger_import WHERE client_code = '4') GROUP BY auto_invoice_no, invoice_no");
    //    }
    //    else if (client_code == "RLIC HK")
    //    {
    //        d.operation("INSERT INTO pay_ledger_import (comp_code, invoice_date, invoice_no, invoice_period, service_category, client_code, state, client, month, year, Amount, sgst, cgst, igst, unit_gst_no) SELECT comp_code, billing_date, IFNULL(auto_invoice_no, invoice_no), fromtodate AS 'start_end_date', 'Housekeeping Services', client_code, state_name, client, month, year, ((SUM(ROUND((amount) + (Service_charge) + (uniform) + (operational_cost) + (ot_rate * ot_hours), 2))) - ((SUM(ROUND((amount) + (Service_charge) + (uniform) + (operational_cost) + (ot_rate * ot_hours), 2))) * (if(comp_code='C02',0.01,0.02)))) AS 'total', IFNULL(SUM(SGST9), 0) AS 'SGST', IFNULL(SUM(CGST9), 0) AS 'CGST', IFNULL(SUM(IGST18), 0) AS 'IGST', unit_gst_no FROM pay_billing_unit_rate_history WHERE client_code = 'RLIC HK' AND (auto_invoice_no IS NOT NULL OR invoice_no IS NOT NULL) AND invoice_no != '11' AND auto_invoice_no NOT IN (SELECT DISTINCT invoice_no FROM pay_ledger_import WHERE client_code = 'RLIC HK') GROUP BY auto_invoice_no, invoice_no");
    //    }
    //    else if (client_code == "HDFC")
    //    {
    //        d.operation("INSERT INTO pay_ledger_import (comp_code, invoice_date, invoice_no, invoice_period, service_category, client_code, state, client, month, year, Amount, sgst, cgst, igst, tds_deduction, unit_gst_no) SELECT comp_code, billing_date, IFNULL(auto_invoice_no, invoice_no), fromtodate AS 'start_end_date', 'Housekeeping Services', client_code, state_name, client, month, year, SUM(Amount + ot_amount + Service_charge) AS 'total', IF(LOCATE(comp_state, STATE_NAME), (SUM(Amount + ot_amount + Service_charge) * 9) / 100, 0) AS 'SGST', IF(LOCATE(comp_state, STATE_NAME), (SUM(Amount + ot_amount + Service_charge) * 9) / 100, 0) AS 'CGST', IF(LOCATE(comp_state, STATE_NAME) != 1, (SUM(Amount + ot_amount + Service_charge) * 18) / 100, 0) AS 'IGST', (SUM(Amount + ot_amount + Service_charge)* (if(comp_code='C02',0.01,0.02))) as tds, unit_gst_no FROM pay_billing_unit_rate_history WHERE client_code = 'HDFC' AND (auto_invoice_no IS NOT NULL OR invoice_no IS NOT NULL) AND invoice_no != '11' AND auto_invoice_no NOT IN (SELECT DISTINCT invoice_no FROM pay_ledger_import WHERE client_code = 'HDFC') GROUP BY auto_invoice_no, invoice_no");
    //    }
    //    else if (client_code == "RBL")
    //    {
    //        d.operation("INSERT INTO pay_ledger_import (comp_code, invoice_date, invoice_no, invoice_period, service_category, client_code, state, client, month, year, Amount, sgst, cgst, igst, tds_deduction, unit_gst_no) SELECT comp_code, billing_date, IFNULL(auto_invoice_no, invoice_no), fromtodate AS 'start_end_date', 'Housekeeping Services', client_code, state_name, client, month, year, ((SUM(ROUND((amount) + (Service_charge) + (uniform) + (operational_cost) + (ot_rate * ot_hours), 2))) - ((SUM(ROUND((amount) + (Service_charge) + (uniform) + (operational_cost) + (ot_rate * ot_hours), 2)))* (if(comp_code='C02',0.01,0.02)))) AS 'total', IFNULL(SUM(SGST9), 0) AS 'SGST', IFNULL(SUM(CGST9), 0) AS 'CGST', IFNULL(SUM(IGST18), 0) AS 'IGST', ((SUM(ROUND((amount) + (Service_charge) + (uniform) + (operational_cost) + (ot_rate * ot_hours), 2))) * (if(comp_code='C02',0.01,0.02))) as tds, unit_gst_no FROM pay_billing_unit_rate_history WHERE client_code = 'RBL' AND (auto_invoice_no IS NOT NULL OR invoice_no IS NOT NULL) AND invoice_no != '11' AND auto_invoice_no NOT IN (SELECT DISTINCT invoice_no FROM pay_ledger_import WHERE client_code = 'RBL') GROUP BY auto_invoice_no, invoice_no");
    //    }
    //    else if (client_code.Contains("BAG") || client_code == "BG")//BAGICs
    //    {
    //        d.operation("INSERT INTO pay_ledger_import (comp_code, invoice_date, invoice_no, invoice_period, service_category, client_code, state, client, month, year, Amount, sgst, cgst, igst, tds_deduction, unit_gst_no) SELECT a.comp_code, billing_date, IFNULL(auto_invoice_no, invoice_no), fromtodate AS 'start_end_date', 'Housekeeping Services', a.client_code, state_name, client, a.month, a.year, (SUM(ROUND((amount) + (((amount + (IFNULL(pay_conveyance_amount_history.conveyance_rate, conveyance_amount) * tot_days_present / month_days)) / 100) * bill_service_charge) + (uniform) + (operational_cost) + (ot_rate * ot_hours) + (IFNULL(pay_conveyance_amount_history.conveyance_rate, conveyance_amount) * tot_days_present / month_days), 2))) AS 'total', SUM(ROUND((IF(CGST9 > 0, (((amount + (IFNULL(pay_conveyance_amount_history.conveyance_rate, conveyance_amount) * tot_days_present / month_days)) + (((amount + (IFNULL(pay_conveyance_amount_history.conveyance_rate, conveyance_amount) * tot_days_present / month_days)) / 100) * bill_service_charge)) / 100) * 9, 0)), 2)) AS 'CGST', SUM(ROUND((IF(SGST9 > 0, (((amount + (IFNULL(pay_conveyance_amount_history.conveyance_rate, conveyance_amount) * tot_days_present / month_days)) + (((amount + (IFNULL(pay_conveyance_amount_history.conveyance_rate, conveyance_amount) * tot_days_present / month_days)) / 100) * bill_service_charge)) / 100) * 9, 0)), 2)) AS 'SGST', SUM(ROUND((IF(IGST18 > 0, (((amount + (IFNULL(pay_conveyance_amount_history.conveyance_rate, conveyance_amount) * tot_days_present / month_days)) + (((amount + (IFNULL(pay_conveyance_amount_history.conveyance_rate, conveyance_amount) * tot_days_present / month_days)) / 100) * bill_service_charge)) / 100) * 18, 0)), 2)) AS 'IGST', ((SUM(ROUND((amount) + (((amount + (IFNULL(pay_conveyance_amount_history.conveyance_rate, conveyance_amount) * tot_days_present / month_days)) / 100) * bill_service_charge) + (uniform) + (operational_cost) + (ot_rate * ot_hours) + (IFNULL(pay_conveyance_amount_history.conveyance_rate, conveyance_amount) * tot_days_present / month_days), 2))) * (if(a.comp_code='C02',0.01,0.02))) AS 'tds', unit_gst_no FROM pay_billing_unit_rate_history a LEFT OUTER JOIN pay_conveyance_amount_history ON pay_conveyance_amount_history.emp_code = a.emp_code AND pay_conveyance_amount_history.comp_code = a.comp_code AND pay_conveyance_amount_history.unit_code = a.unit_code AND pay_conveyance_amount_history.month = a.month AND pay_conveyance_amount_history.year = a.year WHERE (a.client_code like '%BAG%' or a.client_code = 'BG') AND (auto_invoice_no IS NOT NULL OR invoice_no IS NOT NULL OR invoice_no!= '') AND invoice_no != '11' AND auto_invoice_no NOT IN (SELECT DISTINCT invoice_no FROM pay_ledger_import WHERE (client_code like '%BAG%' or client_code = 'BG')) GROUP BY auto_invoice_no, invoice_no");
    //    }
    //}
    private void ReportLoad(string query, string downloadfilename, string invoice, string bill_date)
    {

        string ot_applicable = "", machine_rental = "", handaling_amount = "";
        string headerpath = null;
        string footerpath = null;
        //Material Invoice
        try
        {


            //btnsendemail.Visible = true;
            double total_amount = 0, gst = 0;
            string downloadname = downloadfilename;
            System.Data.DataTable dt = new System.Data.DataTable();
            MySqlCommand cmd = new MySqlCommand(query, d.con);
            MySqlDataAdapter sda = new MySqlDataAdapter(cmd);
            d.con.Open();
            sda.Fill(dt);
            if (dt.Rows.Count == 0)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('NO RECORD FOUND FOR THIS MONTH');", true);
                return;
            }
            else { }
            if (ddl_client.SelectedValue == "RCPL" && downloadfilename == "Invoice")
            {
                ot_applicable = d.getsinglestring("SELECT round((sum(pay_billing_unit_rate_history.Amount) + sum(pay_billing_unit_rate_history.uniform) + sum(pay_billing_unit_rate_history.operational_cost) + sum(pay_billing_unit_rate_history.Service_charge)),0) as Total FROM pay_billing_unit_rate_history where pay_billing_unit_rate_history.comp_code = '" + Session["COMP_CODE"].ToString() + "' AND pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' AND pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedItem + "' AND pay_billing_unit_rate_history.month = '" + txt_month_year.Text.ToString().Substring(0, 2) + "' AND pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.ToString().Substring(3, 4) + "' AND (emp_code != '' OR emp_code IS NOT NULL) AND start_date = '0' AND end_date = '0' AND (bill_type IS NULL || bill_type = '') group by pay_billing_unit_rate_history.client_code ");
                bill_date = dt.Rows[0][0].ToString();

            }
            else if (ddl_client.SelectedValue == "RCPL" && downloadfilename == "Material Invoice")
            {

                bill_date = dt.Rows[0][0].ToString();

            }
            d.con.Close();
            crystalReport.DataDefinition.FormulaFields["invoice_no"].Text = @"'" + invoice + "'";
            crystalReport.DataDefinition.FormulaFields["bill_date"].Text = @"'" + bill_date + "'";
            if (ddl_client.SelectedValue == "RCPL" && downloadfilename == "Invoice")
            {
                crystalReport.DataDefinition.FormulaFields["Unit_total_amount"].Text = @"'" + ot_applicable + "'";

            }
            if (Session["COMP_CODE"].ToString() == "C02")
            {
                headerpath = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "Images\\C02_header.png");
                footerpath = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "Images\\C02_footer.png");
                crystalReport.DataDefinition.FormulaFields["headerimagepath"].Text = @"'" + headerpath + "'";
                crystalReport.DataDefinition.FormulaFields["footerimagepath"].Text = @"'" + footerpath + "'";
            }
            else
            {
                headerpath = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "Images\\C01_header.png");
                footerpath = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "Images\\C01_footer.png");
                crystalReport.DataDefinition.FormulaFields["headerimagepath"].Text = @"'" + headerpath + "'";
                crystalReport.DataDefinition.FormulaFields["footerimagepath"].Text = @"'" + footerpath + "'";
            }
            if (ddl_client.SelectedValue == "RCPL" && downloadfilename == "Material Invoice")
            {


            }
            PageMargins margins;
            // Get the PageMargins structure and set the 
            // margins for the report.
            margins = crystalReport.PrintOptions.PageMargins;
            margins.bottomMargin = 0;
            margins.leftMargin = 350;
            margins.rightMargin = 0;
            margins.topMargin = 0;
            // Apply the page margins.
            crystalReport.PrintOptions.ApplyPageMargins(margins);
            crystalReport.SetDataSource(dt);
            crystalReport.Refresh();
            if (ViewState["ALL_STATE"].ToString().Equals("1"))
            {
                crystalReport.ExportToDisk(ExportFormatType.PortableDocFormat, System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "final_invoice\\" + ddl_client.SelectedValue.Replace(" ", "_")) + "\\" + ddl_billing_state.SelectedValue + ".pdf");
            }
            else
            {
                crystalReport.ExportToHttpResponse(ExportFormatType.PortableDocFormat, this.Response, false, downloadname);
                crystalReport.Close();
                crystalReport.Clone();
                crystalReport.Dispose();
                Response.End();
            }

            ViewState["ALL_STATE"] = "0";
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

            d.con.Close();

            GC.Collect();
            GC.WaitForPendingFinalizers();
        }
    }
    protected void btn_attendance_Click(object sender, EventArgs e)
    {
        hidtab.Value = "0";
        ////suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        ////suraj close

        generate_report(3, 0, billing_type.SelectedValue);
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }

    }

    protected void ddl_state_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddl_billing_state.SelectedValue != "Select")
        {
            ddl_unitcode.Items.Clear();
            System.Data.DataTable dt_item = new System.Data.DataTable();
            MySqlDataAdapter cmd_item = null;
            if (ddl_client.SelectedValue == "DHFL" || (ddl_client.SelectedValue == "BAGIC" && ddl_billing_state.SelectedValue == "Maharashtra" && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020))
            {
                if (ddl_billing_state.SelectedValue != "ALL")
                {
                    cmd_item = new MySqlDataAdapter("Select CONCAT( (SELECT DISTINCT(STATE_CODE) FROM pay_state_master WHERE STATE_NAME = pay_unit_master.STATE_NAME),'_',UNIT_CITY,'_',UNIT_ADD1,'_',UNIT_NAME) as UNIT_NAME, unit_code from pay_unit_master where comp_code='" + Session["comp_code"] + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name='" + ddl_billing_state.SelectedValue + "' AND Zone = '" + ddlregion.SelectedValue + "' AND pay_unit_master.branch_status = 0  ORDER BY 1", d.con);
                }
                else
                {
                    //cmd_item = new MySqlDataAdapter("Select CONCAT( (SELECT DISTINCT(STATE_CODE) FROM pay_state_master WHERE STATE_NAME = pay_unit_master.STATE_NAME),'_',UNIT_CITY,'_',UNIT_ADD1,'_',UNIT_NAME) as UNIT_NAME, unit_code from pay_unit_master where comp_code='" + Session["comp_code"] + "' and client_code = '" + ddl_client.SelectedValue + "' ORDER BY 1", d.con);//and UNIT_CODE in(select UNIT_CODE from pay_client_state_role_grade where  COMP_CODE='" + Session["COMP_CODE"].ToString() + "' AND  EMP_CODE='" + Session["LOGIN_ID"].ToString() + "' AND client_code='" + ddl_client.SelectedValue + "' AND state_name='" + ddl_billing_state.SelectedValue + "')
                    cmd_item = new MySqlDataAdapter("Select CONCAT( (SELECT DISTINCT(STATE_CODE) FROM pay_state_master WHERE STATE_NAME = pay_unit_master.STATE_NAME),'_',UNIT_CITY,'_',UNIT_ADD1,'_',UNIT_NAME) as UNIT_NAME, unit_code from pay_unit_master where comp_code='" + Session["comp_code"] + "' and client_code = '" + ddl_client.SelectedValue + "' AND branch_status = 0 AND Zone = '" + ddlregion.SelectedValue + "' ORDER BY 1", d.con);
                }
            }
            else
            {
                if (ddl_billing_state.SelectedValue != "ALL")
                {
                    cmd_item = new MySqlDataAdapter("Select CONCAT( (SELECT DISTINCT(STATE_CODE) FROM pay_state_master WHERE STATE_NAME = pay_unit_master.STATE_NAME),'_',UNIT_CITY,'_',UNIT_ADD1,'_',UNIT_NAME) as UNIT_NAME, unit_code from pay_unit_master where comp_code='" + Session["comp_code"] + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name='" + ddl_billing_state.SelectedValue + "' AND pay_unit_master.branch_status = 0 ORDER BY 1", d.con);
                }
                else
                {
                    //cmd_item = new MySqlDataAdapter("Select CONCAT( (SELECT DISTINCT(STATE_CODE) FROM pay_state_master WHERE STATE_NAME = pay_unit_master.STATE_NAME),'_',UNIT_CITY,'_',UNIT_ADD1,'_',UNIT_NAME) as UNIT_NAME, unit_code from pay_unit_master where comp_code='" + Session["comp_code"] + "' and client_code = '" + ddl_client.SelectedValue + "' ORDER BY 1", d.con);//and UNIT_CODE in(select UNIT_CODE from pay_client_state_role_grade where  COMP_CODE='" + Session["COMP_CODE"].ToString() + "' AND  EMP_CODE='" + Session["LOGIN_ID"].ToString() + "' AND client_code='" + ddl_client.SelectedValue + "' AND state_name='" + ddl_billing_state.SelectedValue + "')
                    cmd_item = new MySqlDataAdapter("SELECT CONCAT((SELECT DISTINCT ( STATE_CODE ) FROM  pay_state_master  WHERE  STATE_NAME  =  pay_unit_master . STATE_NAME ), '_',  UNIT_CITY , '_',  UNIT_ADD1 , '_',  UNIT_NAME ) AS 'UNIT_NAME',  unit_code  FROM  pay_unit_master  WHERE  comp_code  = '" + Session["comp_code"] + "' AND  client_code  = '" + ddl_client.SelectedValue + "' ORDER BY 1", d.con);
                }
            }
            d.con.Open();
            try
            {
                ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true);
                cmd_item.Fill(dt_item);
                if (dt_item.Rows.Count > 0)
                {
                    ddl_unitcode.DataSource = dt_item;
                    ddl_unitcode.DataTextField = dt_item.Columns[0].ToString();
                    ddl_unitcode.DataValueField = dt_item.Columns[1].ToString();
                    ddl_unitcode.DataBind();
                }
                dt_item.Dispose();
                d.con.Close();
                ddl_unitcode.Items.Insert(0, "ALL");
                show_controls();
                material_billing();
                gv_machine();
            }
            catch (Exception ex) { throw ex; }
            finally
            {
                d.con.Close();
            }
            //}
            //else
            //{
            //    ddl_client_SelectedIndexChanged(null, null);
            //}
        }
    }
    protected void ddl_invoice_type_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddl_invoice_type.SelectedValue == "1")
        {
            ddl_designation.Items.Clear();
            desigpanel.Visible = false;
        }
        else if (ddl_invoice_type.SelectedValue == "2")
        {
            if (txt_month_year.Text != "")
            {
                ddl_designation.Items.Clear();
                desigpanel.Visible = true; int i = 0; string temp = "";
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    temp = d1.getsinglestring("select group_concat(distinct(designation)) from pay_billing_unit_rate where client_code='" + ddl_client.SelectedValue + "'  and year='" + txt_month_year.Text.Substring(3) + "'and month='" + txt_month_year.Text.Substring(0, 2) + "' and unit_code in (select unit_code from pay_unit_master where comp_code='" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "')");
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    temp = d1.getsinglestring("select group_concat(distinct(designation)) from pay_billing_unit_rate where client_code='" + ddl_client.SelectedValue + "'  and year='" + txt_month_year.Text.Substring(3) + "'and month='" + txt_month_year.Text.Substring(0, 2) + "' and unit_code in (select unit_code from pay_unit_master where comp_code='" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "')");
                }
                else
                {
                    temp = d1.getsinglestring("select group_concat(distinct(designation)) from pay_billing_unit_rate where client_code='" + ddl_client.SelectedValue + "'  and year='" + txt_month_year.Text.Substring(3) + "'and month='" + txt_month_year.Text.Substring(0, 2) + "' and unit_code = '" + ddl_unitcode.SelectedValue + "'");
                }
                var designationlist = temp.Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
                foreach (string designation in designationlist)
                {
                    ddl_designation.Items.Insert(i++, designation);
                }
            }
            else
            { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please select Month and try again.');", true); }
        }
    }
    protected string get_start_date()
    {
        return d1.getsinglestring("SELECT IFNULL((SELECT start_date_common FROM pay_billing_master_history INNER JOIN pay_unit_master ON pay_billing_master_history.billing_unit_code = pay_unit_master.unit_code AND pay_billing_master_history.comp_code = pay_unit_master.comp_code WHERE pay_billing_master_history.billing_client_code = '" + ddl_client.SelectedValue + "' AND month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and  pay_billing_master_history.comp_code = '" + Session["COMP_CODE"].ToString() + "' limit 1),(SELECT start_date_common FROM pay_billing_master INNER JOIN pay_unit_master ON pay_billing_master.billing_unit_code = pay_unit_master.unit_code AND pay_billing_master.comp_code = pay_unit_master.comp_code WHERE pay_billing_master.billing_client_code = '" + ddl_client.SelectedValue + "' AND pay_billing_master.comp_code = '" + Session["COMP_CODE"].ToString() + "' limit 1))");
    }
    protected string get_end_date()
    {
        return d1.getsinglestring("SELECT IFNULL((SELECT end_date_common FROM pay_billing_master_history INNER JOIN pay_unit_master ON pay_billing_master_history.billing_unit_code = pay_unit_master.unit_code AND pay_billing_master_history.comp_code = pay_unit_master.comp_code WHERE pay_billing_master_history.billing_client_code = '" + ddl_client.SelectedValue + "' AND month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and  pay_billing_master_history.comp_code = '" + Session["COMP_CODE"].ToString() + "' limit 1),(SELECT end_date_common FROM pay_billing_master INNER JOIN pay_unit_master ON pay_billing_master.billing_unit_code = pay_unit_master.unit_code AND pay_billing_master.comp_code = pay_unit_master.comp_code WHERE pay_billing_master.billing_client_code = '" + ddl_client.SelectedValue + "' AND pay_billing_master.comp_code = '" + Session["COMP_CODE"].ToString() + "' limit 1))");

    }

    protected void btn_support_format_Click(object sender, EventArgs e)
    {
        hidtab.Value = "0";
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close
        generate_report(4, 0, billing_type.SelectedValue);
    }
    protected void btn_material_bill_Click(object sender, EventArgs e)
    {
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close


        hidtab.Value = "1";
        try
        {
            d1.con1.Open();
            DataSet ds1 = new DataSet();
            // MySqlDataAdapter adp1;
            string where = " pay_transaction.comp_code = '" + Session["comp_code"].ToString() + "' and pay_transaction.CUST_CODE = '" + ddl_client.SelectedValue + "' and pay_transaction.state = '" + ddl_billing_state.SelectedValue + "' and pay_transaction.branch_name = '" + ddl_unitcode.SelectedValue + "' and  pay_transaction.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_transaction.year = '" + txt_month_year.Text.Substring(3) + "' ";
            if (ddl_unitcode.SelectedValue == "ALL")
            {
                where = " pay_transaction.comp_code = '" + Session["comp_code"].ToString() + "' and pay_transaction.CUST_CODE = '" + ddl_client.SelectedValue + "' and pay_transaction.state = '" + ddl_billing_state.SelectedValue + "' and pay_transaction.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_transaction.year = '" + txt_month_year.Text.Substring(3) + "'";
            }

            MySqlDataAdapter adp1 = new MySqlDataAdapter("SELECT (SELECT ITEM_NAME FROM pay_item_master WHERE ITEM_CODE = pay_transaction_details.ITEM_CODE AND comp_code = pay_transaction_details.COMP_CODE) AS 'ITEMS',RATE,QUANTITY,	DESIGNATION as 'UNIT', AMOUNT, (SELECT UNIT_NAME FROM pay_unit_master WHERE unit_code = pay_transaction.branch_name AND comp_code = pay_transaction.COMP_CODE) AS 'BRANCH', pay_transaction_details.Vat AS 'GST %', (AMOUNT * pay_transaction_details.Vat) / 100 AS 'GST AMOUNT',(AMOUNT +(AMOUNT * pay_transaction_details.Vat) / 100) as 'TOTAL' FROM pay_transaction INNER JOIN pay_transaction_details ON pay_transaction.DOC_NO = pay_transaction_details.DOC_NO AND pay_transaction.COMP_CODE = pay_transaction_details.COMP_CODE WHERE " + where, d1.con1);
            adp1.Fill(ds1);
            gv_material_bill.DataSource = ds1.Tables[0];
            gv_material_bill.DataBind();
            show_controls();
            d1.con1.Close();
        }
        catch (Exception ex) { throw ex; }
        finally
        {
            d1.con1.Close();
        }
    }
    protected void btn_material_invoice_Click(object sender, EventArgs e)
    {
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close
        string invoice = null;
        string bill_date = null;

        //invoice and bill date 
        string invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text, 2, ddlregion.SelectedValue, billing_type.SelectedValue);

        if (invoice_bill_date.Equals(""))
        {
            invoice = "";
            bill_date = "";
        }
        else
        {
            var invoice_bill = invoice_bill_date.Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
            invoice = invoice_bill[0].ToString();
            bill_date = invoice_bill[1].ToString();
        }

        hidtab.Value = "1";
        DateTimeFormatInfo mfi = new DateTimeFormatInfo();
        string month_name = mfi.GetMonthName(int.Parse(txt_month_year.Text.Substring(0, 2))).ToString();
        string query = "";
        string daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(LAST_DAY('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01'), '%d %b %Y'))) as start_end_date";

        string start_date_common = get_start_date();
        if (start_date_common != "" && start_date_common != "1")
        {
            daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? 12 : (int.Parse(txt_month_year.Text.Substring(0, 2)) - 1)) + "-" + start_date_common + "','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-" + (int.Parse(start_date_common) - 1) + "','%Y-%m-%d'), '%d %b %Y'))) as start_end_date";
        }
        crystalReport.Load(Server.MapPath("~/material_bill_invoice.rpt"));
        crystalReport.DataDefinition.FormulaFields["invoice_no"].Text = @"'" + invoice + "'";
        crystalReport.DataDefinition.FormulaFields["bill_date"].Text = @"'" + bill_date + "'";
        //crystalReport.DataDefinition.FormulaFields["handling_percent"].Text = @"'" + txt_handling_percent.Text + "'";
        string a = txt_month_year.Text;
        string firstday = "01/" + txt_month_year.Text;
        string where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_transaction.month ='" + txt_month_year.Text.Substring(0, 2) + "' and pay_transaction.year = '" + txt_month_year.Text.Substring(3) + "' AND pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_unit_master.unit_code = '" + ddl_unitcode.SelectedValue + "' ";
        if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_transaction.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_transaction.year = '" + txt_month_year.Text.Substring(3) + "' AND pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "'";
        }
        query = " SELECT  pay_company_master.COMP_CODE,COMPANY_NAME ,  ADDRESS1 ,  ADDRESS2 ,  CITY ,  pay_company_master . STATE ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO , (SELECT  field1  FROM  pay_zone_master  WHERE  pay_zone_master .  client_code  = '" + ddl_client.SelectedValue + "' AND  pay_zone_master . region  = '" + ddl_billing_state.SelectedValue + "' AND  comp_code  = '" + Session["comp_code"].ToString() + "' AND  type  = 'GST') AS 'UNIT_ADD1',  UNIT_ADD2 ,  UNIT_CITY ,  STATE_NAME , (SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  = '" + ddl_client.SelectedValue + "' AND  pay_zone_master . region  = '" + ddl_billing_state.SelectedValue + "' AND  comp_code  = '" + Session["comp_code"].ToString() + "' AND  type  = 'GST') AS 'unit_gst_no', " + daterange + ", (SELECT  CLIENT_NAME  FROM  pay_client_master  WHERE  pay_client_master . client_code  =  pay_unit_master . client_code  AND  pay_client_master . comp_code  =  pay_unit_master . comp_code ) AS 'other', SUM( AMOUNT ) AS 'total',concat('" + month_name + "',' ' ,'" + txt_month_year.Text.Substring(3) + "') AS 'month',IF(INSTR(GROUP_CONCAT(UNIT_NAME), ','), '', UNIT_NAME) AS 'UNIT_NAME',(Select handling_percent from pay_billing_master_history  where comp_code = pay_unit_master.comp_code and billing_unit_code = pay_unit_master.unit_code and month = pay_transaction.month and year=pay_transaction.year  limit 1) AS 'Expr1' FROM  pay_transaction  INNER JOIN  pay_transaction_details  ON  pay_transaction . DOC_NO  =  pay_transaction_details . DOC_NO  AND  pay_transaction . COMP_CODE  =  pay_transaction_details . COMP_CODE  INNER JOIN  pay_company_master  ON  pay_transaction . comp_code  =  pay_company_master . comp_code  INNER JOIN  pay_unit_master  ON  pay_transaction . comp_code  =  pay_unit_master . comp_code  AND  pay_transaction . branch_name  =  pay_unit_master . unit_code  WHERE  " + where;

        ReportLoad(query, "Material Invoice", invoice, bill_date);
    }
    protected void gv_material_bill_PreRender(object sender, EventArgs e)
    {
        try
        {
            gv_material_bill.UseAccessibleHeader = false;
            gv_material_bill.HeaderRow.TableSection = TableRowSection.TableHeader;
        }
        catch { }
    }
    protected void btn_material_fixbill_Click(object sender, EventArgs e)
    {
        hidtab.Value = "1";
        string where = "";
        string query = "";
        //suraj start
        if (billing_type_validation())
        {
            return;
        }//suraj close
        //invoice and bill date 
        gv_material_load();

        where = " pay_material_details.comp_code='" + Session["comp_code"].ToString() + "' and pay_material_details.client_code= '" + ddl_client.SelectedValue + "' and pay_material_details.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_material_details.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_material_details.year = '" + txt_month_year.Text.Substring(3) + "'  ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = " pay_material_details.comp_code='" + Session["comp_code"].ToString() + "' and pay_material_details.client_code= '" + ddl_client.SelectedValue + "'  and pay_material_details.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_material_details.year = '" + txt_month_year.Text.Substring(3) + "' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = " pay_material_details.comp_code='" + Session["comp_code"].ToString() + "' and pay_material_details.client_code= '" + ddl_client.SelectedValue + "' and pay_material_details.state_name = '" + ddl_billing_state.SelectedValue + "'  and pay_material_details.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_material_details.year = '" + txt_month_year.Text.Substring(3) + "' ";

        }
        string unit = d.getsinglestring("SELECT DISTINCT GROUP_CONCAT(DISTINCT pay_billing_material_history.unit_name) FROM pay_material_details INNER JOIN pay_client_master ON pay_material_details.client_code = pay_client_master.client_code INNER JOIN pay_unit_master ON pay_unit_master.COMP_CODE = pay_material_details.COMP_CODE AND pay_unit_master.unit_code = pay_material_details.unit_code INNER JOIN pay_billing_material_history ON pay_billing_material_history.COMP_CODE = pay_material_details.COMP_CODE AND pay_billing_material_history.unit_code = pay_material_details.unit_code AND pay_billing_material_history.month = pay_material_details.month AND pay_billing_material_history.year = pay_material_details.year WHERE " + where + " AND (pay_material_details.material_flag = 1 || pay_material_details.material_flag != 2) AND pay_billing_material_history.invoice_flag = 0 AND pay_billing_material_history.contract_type = 4 AND pay_material_details.material_status IS NOT NULL ORDER BY pay_billing_material_history.unit_name");
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Material not Approved by Finance for Branch : " + unit + "');", true);
            return;

        }
        string sql = "";
        string invoice = null;
        string bill_date = null;
        string invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text, 2, ddlregion.SelectedValue, billing_type.SelectedValue);

        if (invoice_bill_date.Equals(""))
        {
            invoice = "";
            bill_date = "";
        }
        else
        {
            var invoice_bill = invoice_bill_date.Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
            invoice = invoice_bill[0].ToString();
            bill_date = invoice_bill[1].ToString();
        }

        string start_date_common = get_start_date(), where_fix = "", where_clause = "";
        string daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(LAST_DAY('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01'), '%d %b %Y'))) as start_end_date";
        if (start_date_common != "" && start_date_common != "1")
        {
            daterange = "concat(upper(DATE_FORMAT(str_to_date('" + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? int.Parse(txt_month_year.Text.Substring(3)) - 1 : int.Parse(txt_month_year.Text.Substring(3))) + "-" + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? 12 : int.Parse(txt_month_year.Text.Substring(0, 2)) - 1) + "-" + start_date_common + "','%Y-%m-%d'), '%D %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-" + (int.Parse(start_date_common) - 1) + "','%Y-%m-%d'), '%D %b %Y'))) as start_end_date";
        }
        string where1 = "", emp = "";
        DateTimeFormatInfo mfi = new DateTimeFormatInfo();
        string month_name = mfi.GetMonthName(int.Parse(txt_month_year.Text.Substring(0, 2))).ToString();

        where_clause = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  ";
        if (d.getsinglestring("select max(material_contract) from pay_billing_material_history   " + where_clause + " limit  1").Equals("4"))
        { emp = ",emp_code"; }
        where_fix = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' AND pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' AND pay_billing_material_history.unit_code = '" + ddl_unitcode.SelectedValue + "' AND pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "' ";
        where = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and unit_code = '" + ddl_unitcode.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0  and material_contract != 0 and grade_code = 'HK' GROUP BY unit_code,designation " + emp + "  ORDER BY STATE_NAME, UNIT_NAME";
        where1 = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and unit_code = '" + ddl_unitcode.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0  and material_contract != 0 and grade_code = 'HK' ";

        // rahul add Gst_to_be type  start

        string gst_to_be = d.getsinglestring("  select  DISTINCT (`Gst_to_be`) as 'Gst_to_be' from pay_unit_master where comp_code='" + Session["comp_code"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "'");
        // end

        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where_clause = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  ";
            if (d.getsinglestring("select max(material_contract) from pay_billing_material_history   " + where_clause + " limit  1").Equals("4"))
            { emp = ",emp_code"; }
            where_fix = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' AND pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "'  AND pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "' ";
            where = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 and material_contract != 0 and grade_code = 'HK' GROUP BY unit_code,designation" + emp + " ORDER BY STATE_NAME, UNIT_NAME";
            where1 = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 and material_contract != 0 and grade_code = 'HK' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where_clause = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and state_name='" + ddl_billing_state.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  ";
            if (d.getsinglestring("select max(material_contract) from pay_billing_material_history   " + where_clause + " limit  1").Equals("4"))
            { emp = ",emp_code"; }
            where_fix = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' AND pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' AND pay_billing_material_history.state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "' ";
            where = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 and material_contract != 0 and grade_code = 'HK' GROUP BY unit_code,designation" + emp + "  ORDER BY STATE_NAME, UNIT_NAME ";
            where1 = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 and material_contract != 0 and grade_code = 'HK' ";
        }
        if (ddl_client.SelectedValue == "SUN")
        {
            crystalReport.Load(Server.MapPath("~/client_bill_invoice_sungard.rpt"));
            query = "SELECT comp_code, COMPANY_NAME, ADDRESS1, ADDRESS2, CITY, STATE, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, STATE_NAME, UNIT_ADD1, UNIT_ADD2, UNIT_CITY, UNIT_NAME, other, unit_gst_no, start_end_date, month, housekeeiing_sac_code, Security_sac_code, unit_code, bill_amount as 'total', month_days, year,	equmental_unit, equmental_rental_rate, chemical_unit, chemical_consumables_rate, dustbin_unit, dustbin_liners_rate, femina_unit, femina_hygiene_rate, aerosol_unit, aerosol_dispenser_rate FROM (SELECT pay_company_master.comp_code, COMPANY_NAME, pay_company_master.ADDRESS1, pay_company_master.ADDRESS2, pay_company_master.CITY, pay_company_master.STATE, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, UNIT_NAME, STATE_NAME, (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = '" + ddl_client.SelectedValue + "' AND pay_zone_master.region = '" + ddl_billing_state.SelectedValue + "' AND comp_code = '" + Session["COMP_CODE"].ToString() + "' AND type = 'GST') AS 'UNIT_ADD1', UNIT_ADD2, UNIT_CITY, CLIENT_NAME AS 'other',(SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = '" + ddl_client.SelectedValue + "' and pay_zone_master.region = '" + ddl_billing_state.SelectedValue + "' and type = 'GST') AS 'unit_gst_no', " + daterange + ",  concat('" + month_name + "',' ' ,'" + txt_month_year.Text.Substring(3) + "') AS 'month', housekeeiing_sac_code, Security_sac_code, pay_unit_master.unit_code, bill_amount ,(pay_unit_master.emp_count * month_days) AS 'month_days',(SELECT SUM(tot_days_present) FROM pay_attendance_muster WHERE pay_attendance_muster.comp_code = pay_billing_master_history.comp_code AND pay_attendance_muster.unit_code = pay_billing_master_history.billing_unit_code AND pay_billing_master_history.month = pay_attendance_muster.month AND pay_billing_master_history.year = pay_attendance_muster.year) AS 'year',equmental_unit, equmental_rental_rate, chemical_unit, chemical_consumables_rate, dustbin_unit, dustbin_liners_rate, femina_unit, femina_hygiene_rate, aerosol_unit, aerosol_dispenser_rate FROM pay_employee_master INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.comp_code = pay_billing_unit_rate.comp_code AND pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_employee_master.grade_code = pay_billing_unit_rate.designation AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_attendance_muster.unit_code AND pay_billing_master_history.month = pay_attendance_muster.month AND pay_billing_master_history.year = pay_attendance_muster.year AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.designation = pay_billing_unit_rate.designation INNER JOIN pay_client_master ON pay_client_master.comp_code = pay_company_master.comp_code AND pay_client_master.client_code = pay_unit_master.client_code where " + where;

        }
        if (ddl_client.SelectedValue == "RCPL")
        {

            if (!d.getsinglestring("select sum(percent) from pay_company_group where comp_code = '" + Session["COMP_CODE"].ToString() + "' AND client_code = '" + ddl_client.SelectedValue + "'").Equals(100))
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Total percent is not 100%');", true);
                // return;
            }
            //report all unit wise 
            //crystalReport.Load(Server.MapPath("~/client_bill_invoice_RG.rpt"));
            if (ddl_billing_state.SelectedValue == "ALL")
            {
                crystalReport.Load(Server.MapPath("~/client_bill_invoice_RG.rpt"));

            }
            else
            {
                // mahendra create report per unit wise
                crystalReport.Load(Server.MapPath("~/client_material_invoice_RG_unit.rpt"));
            }
            query = "SELECT IF(invoice_flag != 0, DATE_FORMAT(billing_date, '%d/%m/%Y'), '') AS 'bill_date', pay_billing_unit_rate_history.comp_code, client AS 'other', COMPANY_NAME, COMP_ADDRESS1 AS 'ADDRESS1', COMP_ADDRESS2 AS 'ADDRESS2', COMP_CITY AS 'CITY', COMP_STATE AS 'STATE', PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, state_name AS 'STATE_NAME', fromtodate AS 'start_end_date', grade_desc AS 'designation',  Amount AS 'total', bill_amount AS 'equmental_handling_percent', CONCAT('" + month_name + "', ' ', '" + txt_month_year.Text.Substring(3) + "') AS 'month', '998519' AS 'housekeeiing_sac_code', Security_sac_code, state_per AS 'tool_unit', companyname_gst_no AS 'unit_gst_no', IF(invoice_flag != 0, auto_invoice_no, '') AS 'Expr1', gst_address AS 'UNIT_ADD1', handling_per_amount as tool_handling_percent  , machine_rental_amount  as equmental_rental_rate,handling_percent as hrs_12_ot,unit_name,invoice_shipping_address AS 'UNIT_ADD2' FROM pay_billing_material_history AS pay_billing_unit_rate_history  LEFT JOIN pay_client_billing_details ON pay_client_billing_details.comp_code = pay_billing_unit_rate_history.comp_code AND pay_client_billing_details.client_code = pay_billing_unit_rate_history.client_code AND pay_client_billing_details.STATE = pay_billing_unit_rate_history.state_name AND billing_name = 'Manpower Billing' WHERE pay_billing_unit_rate_history.comp_code = '" + Session["COMP_CODE"].ToString() + "' AND pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' AND pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_billing_unit_rate_history.unit_code = '" + ddl_unitcode.SelectedValue + "' AND pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' AND (emp_code = '' OR emp_code IS NULL)  GROUP BY pay_billing_unit_rate_history.auto_invoice_no ORDER BY pay_billing_unit_rate_history.auto_invoice_no";

            //// For Report Table
            if (invoice_fl_ma == 1)
            {
                sql = " SELECT comp_code, client_code, Client, STATE_NAME, billing_date, CASE WHEN invoice_flag != 0 AND month <= 3 AND year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', companyname_gst_no, IF(grade_code = 'SG', Security_sac_code, housekeeiing_sac_code) AS 'sac_code', COUNT(emp_code) AS 'emp_count', month, year, 'material' AS 'comp_code', SUM(machine_rental_amount + Amount) AS 'total', SUM(cgst) AS 'cgst', SUM(sgst) AS 'agst', SUM(igst) AS 'igst','" + gst_to_be + "' FROM pay_billing_material_history WHERE pay_billing_material_history.comp_code = '" + Session["COMP_CODE"].ToString() + "' AND pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' AND pay_billing_material_history.state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_billing_material_history.unit_code = '" + ddl_unitcode.SelectedValue + "' AND pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "' AND (emp_code = '' OR emp_code IS NULL)  GROUP BY pay_billing_material_history.auto_invoice_no ORDER BY pay_billing_material_history.auto_invoice_no ";
                d.operation("delete from pay_report_gst WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' AND client_code = '" + ddl_client.SelectedValue + "' AND state_name = '" + ddl_billing_state.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2) + "' AND Year = '" + txt_month_year.Text.Substring(3) + "' and type = 'material' ");
                d.operation("insert into pay_report_gst (comp_code,client_code,client_name,state_name,invoice_date, invoice_no, gst_no,sac_code,emp_count, month, year,type, Amount, cgst, sgst, igst,gst_to_be) " + sql);
            }

        }
        else
        {
            if (d.getsinglestring("select max(material_contract) from pay_billing_material_history   " + where_clause + " limit  1").Equals("3"))
            {
                crystalReport.Load(Server.MapPath("~/material_fix_bill_invoice.rpt"));
                query = "SELECT pay_billing_material_history.comp_code,  pay_billing_material_history.unit_code  , COMPANY_NAME, COMP_ADDRESS1 AS 'ADDRESS1', COMP_ADDRESS2 AS 'ADDRESS2', COMP_CITY AS 'CITY', COMP_STATE AS 'STATE', PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, pay_billing_material_history.STATE_NAME, UNIT_full_ADD1 AS 'UNIT_ADD1', UNIT_ADD2, UNIT_CITY, UNIT_NAME, client AS 'other', unit_gst_no, grade_desc AS 'designation',   " + daterange + ", concat('" + month_name + "',' ' ,'" + txt_month_year.Text.Substring(3) + "') AS 'month', housekeeiing_sac_code, Security_sac_code, material_name as 'tool_unit',  rate as 'hrs_12_ot', quantity as 'grand_total', ROUND(rate * quantity, 2) AS 'total', CASE WHEN pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_percent > 0 THEN ROUND((((rate * quantity) * pay_material_billing_details.handling_percent) / 100),2) WHEN pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_charges_amount > 0 THEN handling_charges_amount ELSE 0 END AS 'tool_handling_percent', pay_material_billing_details.handling_percent as 'Expr1', IF(gst_applicable = 0 AND LOCATE(COMP_STATE, STATE_NAME), IF(material_contract = 3, ROUND(((rate * quantity) + IF(material_contract = 3 AND pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_percent > 0, ROUND(((rate * quantity) * pay_material_billing_details.handling_percent) / 100), handling_charges_amount)) * 9, 2) / 100, 0), 0) AS 'SGST', IF(gst_applicable = 0 AND LOCATE(COMP_STATE, STATE_NAME), IF(material_contract = 3, ROUND(((rate * quantity) + IF(material_contract = 3 AND pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_percent > 0, ROUND(((rate * quantity) * pay_material_billing_details.handling_percent) / 100), handling_charges_amount)) * 9, 2) / 100, 0), 0) AS 'CGST', IF(gst_applicable = 0 AND LOCATE(COMP_STATE, STATE_NAME) != 1, IF(material_contract = 3, ROUND(((rate * quantity) + IF(material_contract = 3 AND pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_percent > 0, ROUND(((rate * quantity) * pay_material_billing_details.handling_percent) / 100), handling_charges_amount)) * 18, 2) / 100, 0), 0) AS 'IGST',machine_rental_applicable as tool_applicable,machine_rental_amount as tool_unit FROM pay_billing_material_history INNER JOIN pay_material_billing_details ON pay_billing_material_history.comp_code = pay_material_billing_details.comp_Code AND pay_billing_material_history.client_code = pay_material_billing_details.client_code AND pay_billing_material_history.state_name = pay_material_billing_details.state AND pay_billing_material_history.unit_code = pay_material_billing_details.unit_code1 AND pay_billing_material_history.month = pay_material_billing_details.month AND pay_billing_material_history.year = pay_material_billing_details.year WHERE " + where_fix + " AND pay_billing_material_history.tot_days_present > 0 AND pay_billing_material_history.material_contract = 3 AND grade_code = 'HK' GROUP BY pay_billing_material_history.unit_code, Id_material ORDER BY 2, 3  ";
            }
            else
            {

                crystalReport.Load(Server.MapPath("~/material_fix_bill.rpt"));
                // string query1 = "SELECT comp_code, COMPANY_NAME, COMP_ADDRESS1 AS 'ADDRESS1', COMP_ADDRESS2 AS 'ADDRESS2', COMP_CITY AS 'CITY', COMP_STATE AS 'STATE', PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, STATE_NAME, UNIT_ADD1, UNIT_ADD2, UNIT_CITY, UNIT_NAME, client AS 'other', unit_gst_no, grade_desc AS 'designation', CONCAT(UPPER(DATE_FORMAT(STR_TO_DATE('2018-12-26', '%Y-%m-%d'), '%D %b %Y')), ' TO ', UPPER(DATE_FORMAT(STR_TO_DATE('2019-01-25', '%Y-%m-%d'), '%D %b %Y'))) AS 'start_end_date', CONCAT('January', ' ', '2019') AS 'month', housekeeiing_sac_code, Security_sac_code, IF(material_contract = 1, contract_amount, 0) AS 'grand_total', IF(material_contract = 1 AND contract_type = 2, ROUND(((contract_amount * material_area)), 2), ROUND(contract_amount, 2)) AS 'total', IF(handling_applicable = 1, handling_percent, 0) AS 'Expr1', material_area AS 'hrs_12_ot', unit_code " + where;
                query = "SELECT pay_billing_material_history.comp_code, COMPANY_NAME, COMP_ADDRESS1 AS 'ADDRESS1', COMP_ADDRESS2 AS 'ADDRESS2', COMP_CITY AS 'CITY', COMP_STATE AS 'STATE', PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, STATE_NAME,UNIT_full_ADD1 as  'UNIT_ADD1', invoice_shipping_address AS 'UNIT_ADD2', UNIT_CITY, UNIT_NAME, client AS 'other', unit_gst_no, grade_desc AS 'designation',     " + daterange + ", concat('" + month_name + "',' ' ,'" + txt_month_year.Text.Substring(3) + "') AS 'month', housekeeiing_sac_code, Security_sac_code, IF(material_contract != 0, contract_amount, 0) AS 'grand_total', IF(material_contract != 0 AND contract_type = 2, ROUND(((contract_amount * material_area)), 2), ROUND(contract_amount, 2)) AS 'total', IF(handling_applicable = 1, handling_percent, 0) AS 'Expr1', material_area AS 'hrs_12_ot', unit_code, handling_charges_amount as equmental_rental_rate,machine_rental_applicable as tool_applicable,machine_rental_amount as tool_unit FROM pay_billing_material_history LEFT JOIN pay_client_billing_details ON pay_client_billing_details.comp_code = pay_billing_material_history.comp_code AND pay_client_billing_details.client_code = pay_billing_material_history.client_code AND pay_client_billing_details.STATE = pay_billing_material_history.state_name AND billing_name = 'Material Billing' WHERE " + where;


                ////For Report Table
                if (invoice_fl_ma == 1)
                {
                    sql = "SELECT comp_code, client_code, Client, STATE_NAME, billing_date, auto_invoice_no, unit_gst_no,sac_code, COUNT(emp_code) AS 'emp_count', month, year, 'material' AS 'abc', (IF(Expr1 > 0, (((SUM(total)) * Expr1) / 100) + (SUM(total)), SUM(total))) AS 'total', SUM(cgst) AS 'cgst', SUM(sgst) AS 'agst', SUM(igst) AS 'igst','" + gst_to_be + "' FROM (SELECT comp_code, client_code, Client, STATE_NAME, billing_date, auto_invoice_no, unit_gst_no, IF(grade_code = 'SG', Security_sac_code, housekeeiing_sac_code) AS 'sac_code', emp_code, month, year, IF(material_contract != 0 AND contract_type = 2, ROUND(((contract_amount * material_area)), 2), ROUND(contract_amount, 2)) AS 'total', IF(handling_applicable = 1, handling_percent, 0) AS 'Expr1', cgst, sgst, igst FROM pay_billing_material_history WHERE " + where1 + " GROUP BY unit_code, grade_code " + emp + ") AS a GROUP BY a.state_name";
                    d.operation("delete from pay_report_gst " + where_clause + " and type ='material' ");
                    d.operation("insert into pay_report_gst (comp_code,client_code,client_name,state_name,invoice_date, invoice_no, gst_no, sac_code,emp_count, month, year,type, Amount, cgst, sgst, igst,gst_to_be) " + sql);
                }


            }

        }



        ReportLoad(query, "Material Invoice", invoice, bill_date);
    }
    protected void gridService_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        for (int i = 0; i < e.Row.Cells.Count; i++)
        {
            if (e.Row.Cells[i].Text == "&nbsp;")
            {
                e.Row.Cells[i].Text = "";
            }
        }
        if (e.Row.RowType == DataControlRowType.DataRow)
        {

        }
    }
    protected void btn_material_Export_Click(object sender, EventArgs e)
    {
        //suraj start
        if (billing_type_validation())
        {
            return;
        }//suraj close

        hidtab.Value = "1";
        material(5);
    }
    protected void btn_material_fc_Click(object sender, EventArgs e)
    {
        hidtab.Value = "1";
        //suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}//suraj close
        gv_material_load();
        string where = "";
        where = " pay_material_details.comp_code='" + Session["comp_code"].ToString() + "' and pay_material_details.client_code= '" + ddl_client.SelectedValue + "' and pay_material_details.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_material_details.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_material_details.year = '" + txt_month_year.Text.Substring(3) + "'  ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = " pay_material_details.comp_code='" + Session["comp_code"].ToString() + "' and pay_material_details.client_code= '" + ddl_client.SelectedValue + "'  and pay_material_details.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_material_details.year = '" + txt_month_year.Text.Substring(3) + "' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = " pay_material_details.comp_code='" + Session["comp_code"].ToString() + "' and pay_material_details.client_code= '" + ddl_client.SelectedValue + "' and pay_material_details.state_name = '" + ddl_billing_state.SelectedValue + "'  and pay_material_details.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_material_details.year = '" + txt_month_year.Text.Substring(3) + "' ";

        }
        ////string unit = d.getsinglestring("SELECT DISTINCT GROUP_CONCAT(DISTINCT pay_billing_material_history.unit_name) FROM pay_material_details INNER JOIN pay_client_master ON pay_material_details.client_code = pay_client_master.client_code INNER JOIN pay_unit_master ON pay_unit_master.COMP_CODE = pay_material_details.COMP_CODE AND pay_unit_master.unit_code = pay_material_details.unit_code INNER JOIN pay_billing_material_history ON pay_billing_material_history.COMP_CODE = pay_material_details.COMP_CODE AND pay_billing_material_history.unit_code = pay_material_details.unit_code AND pay_billing_material_history.month = pay_material_details.month AND pay_billing_material_history.year = pay_material_details.year WHERE " + where + " AND (pay_material_details.material_flag = 1 || pay_material_details.material_flag != 2) AND pay_billing_material_history.invoice_flag = 0 AND pay_billing_material_history.contract_type = 4 AND pay_material_details.material_status IS NOT NULL ORDER BY pay_billing_material_history.unit_name");
        ////if (unit != "")
        ////{
        ////    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Material not Approved by Finance for Branch : " + unit + "');", true);
        ////    return;

        ////}

        hidtab.Value = "1";
        material(2);
    }
    protected void material(int i)
    {
        try
        {

            string start_date_common = get_start_date();
            DateTimeFormatInfo mfi = new DateTimeFormatInfo();
            month_name = mfi.GetMonthName(int.Parse(txt_month_year.Text.Substring(0, 2))).ToString();
            month_name = month_name + " " + txt_month_year.Text.Substring(3).ToUpper();
            int month = int.Parse(txt_month_year.Text.Substring(0, 2)) - 1;
            int year = int.Parse(txt_month_year.Text.Substring(3));
            if (month == 0) { month = 12; year = year - 1; }

            string daterange = "concat(upper(DATE_FORMAT(str_to_date('" + year + "-" + month + "-01','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(LAST_DAY('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01'), '%d %b %Y'))) as fromtodate";
            if (start_date_common != "" && start_date_common != "1")
            {
                daterange = "concat(upper(DATE_FORMAT(str_to_date('" + year + "-" + month + "-" + start_date_common + "','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-" + (int.Parse(start_date_common) - 1) + "','%Y-%m-%d'), '%d %b %Y'))) as fromtodate";


            }
            string invoice = null;
            string bill_date = null;

            //invoice and bill date 
            string invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text, i, ddlregion.SelectedValue, billing_type.SelectedValue);

            if (invoice_bill_date.Equals(""))
            {
                invoice = "";
                bill_date = "";
            }
            else
            {
                var invoice_bill = invoice_bill_date.Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
                invoice = invoice_bill[0].ToString();
                bill_date = invoice_bill[1].ToString();
            }

            string query = "";
            string where = "", where_clause = "", where_fix = "", where_emp = "", where_state = "";
            if (ddl_billing_state.SelectedValue.Equals("Maharashtra") && ddl_client.SelectedValue.Equals("BAGIC") && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020) { where_state = " and state='" + ddl_billing_state.SelectedValue + "' and billingwise_id = 5"; }
            //if (!ddl_billing_state.SelectedValue.Equals("ALL")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "'"; }
            if (d.getsinglestring("select billingwise_id from pay_client_billing_details where  client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
            {
                where_state = " and zone = '" + ddlregion.SelectedValue + "'";
                //material_where_state = " and pay_billing_unit_rate_history.zone = '" + ddlregion.SelectedValue + "'";
            }
            else
            { where_state = ""; }
            if (i == 1)
            {
                if (ddl_client.SelectedValue != "ALL")
                {
                    where = "where comp_code='" + Session["comp_code"].ToString() + "' " + where_state + " and client_code= '" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  ";
                }
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = "where comp_code='" + Session["comp_code"].ToString() + "' " + where_state + " and client_code= '" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' ";
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = "where comp_code='" + Session["comp_code"].ToString() + "' " + where_state + " and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' ";
                }
                if (ddl_client.SelectedValue == "ALL")
                {
                    where = "where comp_code='" + Session["comp_code"].ToString() + "' " + where_state + "  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' ";
                }

                //employeewies
                if (d.getsinglestring("select max(conveyance_type) FROM pay_billing_material_history " + where + " and conveyance_type=3 limit 1").Equals("3"))
                {
                    where = where + "  and Conveyance_Rate > 0 and conveyance_type !=0 and  conveyance_type != '100' group by emp_code ORDER BY CLIENT,state_name,unit_name,emp_name";
                }
                else
                {
                    where = where + "  and Conveyance_PerKmRate > 0 and conveyance_type !=0 and conveyance_type != '100' group by emp_code ORDER BY client,state_name,unit_name,emp_name";
                }

                query = "SELECT CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date',client,COMP_STATE  as 'STATE', STATE_NAME , UNIT_NAME , EMP_NAME , grade_desc  as 'designation', IF( conveyance_applicable  = 1 AND  conveyance_type  = 2, ( Conveyance_PerKmRate  *  conveyance_km ),  conveyance_rate ) AS 'total', IF( conveyance_service_charge_per  <= 0,  conveyance_service_amount , (IF( conveyance_applicable  = 1 AND  conveyance_type  = 2, ( Conveyance_PerKmRate  *  conveyance_km ),  conveyance_rate ) *  conveyance_service_charge_per ) / 100) AS 'Service_Charge', SGST,  CGST, IGST, unit_code , conveyance_service_charge_per," + daterange + ",client_branch_code,Conveyance_PerKmRate,IF(conveyance_type = 1, (conveyance_rate / Conveyance_PerKmRate), conveyance_km) AS 'conveyance_km' ,conveyance_type FROM pay_billing_material_history " + where;

            }
            //material finance copy
            else if (i == 2)
            {
                where_fix = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' AND pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' AND pay_billing_material_history.unit_code = '" + ddl_unitcode.SelectedValue + "' AND pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "' ";
                where_clause = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  ";
                where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and unit_code = '" + ddl_unitcode.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0  and material_contract != 0 and grade_code = 'HK' GROUP BY unit_code,designation  ORDER BY STATE_NAME, UNIT_NAME ";
                where_emp = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_material_history.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0  and material_contract != 0 and grade_code = 'HK' AND pay_material_details.material_flag = '2' GROUP BY unit_code,pay_billing_material_history.emp_code,designation  ORDER BY STATE_NAME, UNIT_NAME ";
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where_fix = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' AND pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' AND pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "' ";
                    where_clause = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' ";
                    where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 and material_contract != 0 and grade_code = 'HK'  GROUP BY unit_code,designation ORDER BY STATE_NAME, UNIT_NAME ";
                    where_emp = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "'  and pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0  and material_contract != 0 and grade_code = 'HK' AND pay_material_details.material_flag = '2' GROUP BY unit_code,pay_billing_material_history.emp_code,designation  ORDER BY STATE_NAME, UNIT_NAME ";
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where_fix = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' AND pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "'  AND pay_billing_material_history.state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "' ";
                    where_clause = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' ";
                    where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 and material_contract != 0 and grade_code = 'HK' GROUP BY unit_code,designation ORDER BY STATE_NAME, UNIT_NAME ";
                    where_emp = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_material_history.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0  and material_contract != 0 and grade_code = 'HK' AND pay_material_details.material_flag = '2' GROUP BY unit_code,pay_billing_material_history.emp_code,designation  ORDER BY STATE_NAME, UNIT_NAME ";
                }

                if (d.getsinglestring("select max(material_contract) from pay_billing_material_history   " + where_clause + " limit  1").Equals("3"))
                {
                    //query = "SELECT CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(invoice_no, '') WHEN invoice_flag != 0 AND pay_billing_material_history.month >= 4 AND pay_billing_material_history.year >= 2019 THEN IFNULL(auto_invoice_no, '') ELSE '' END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', material_contract, contract_type, COMP_STATE AS 'STATE', pay_billing_material_history.unit_code, pay_billing_material_history.fromtodate, pay_billing_material_history.STATE_NAME, pay_billing_material_history.CLIENT_CODE, UNIT_NAME, Client_branch_code, grade_desc AS 'designation', material_name, rate, quantity, ROUND(rate * quantity, 2) AS 'total', CASE WHEN pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_percent > 0 THEN ROUND((((rate * quantity) * pay_material_billing_details.handling_percent) / 100), 2) WHEN pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_charges_amount > 0 THEN pay_billing_material_history.handling_charges_amount ELSE 0 END AS 'handling_charge', pay_material_billing_details.handling_percent, round(IF(gst_applicable = 1 AND LOCATE(COMP_STATE, STATE_NAME), IF(material_contract = 3, (((rate * quantity) + IF(material_contract = 3 AND pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_percent > 0, (((rate * quantity) * pay_material_billing_details.handling_percent) / 100), pay_billing_material_history.handling_charges_amount)) * 9) / 100, 0), 0),2) AS 'SGST', round(IF(gst_applicable = 1 AND LOCATE(COMP_STATE, STATE_NAME), IF(material_contract = 3, (((rate * quantity) + IF(material_contract = 3 AND pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_percent > 0, (((rate * quantity) * pay_material_billing_details.handling_percent) / 100), pay_billing_material_history.handling_charges_amount)) * 9) / 100, 0), 0),2) AS 'CGST', round(IF(gst_applicable = 1 AND LOCATE(COMP_STATE, STATE_NAME) != 1, IF(material_contract = 3, (((rate * quantity) + IF(material_contract = 3 AND pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_percent > 0, (((rate * quantity) * pay_material_billing_details.handling_percent) / 100), pay_billing_material_history.handling_charges_amount)) * 18) / 100, 0), 0),2) AS 'IGST' from  pay_billing_material_history INNER JOIN pay_material_billing_details ON pay_billing_material_history.comp_code = pay_material_billing_details.comp_Code AND pay_billing_material_history.client_code = pay_material_billing_details.client_code AND pay_billing_material_history.state_name = pay_material_billing_details.state AND pay_billing_material_history.unit_code = pay_material_billing_details.unit_code1 AND pay_billing_material_history.month = pay_material_billing_details.month AND pay_billing_material_history.year = pay_material_billing_details.year WHERE " + where_fix + " AND pay_billing_material_history.tot_days_present > 0 AND pay_billing_material_history.material_contract = 3 AND grade_code = 'HK' GROUP BY pay_billing_material_history.unit_code, Id_material ORDER BY UNIT_NAME  ";
                    query = " SELECT CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(invoice_no, '') WHEN invoice_flag != 0 AND pay_billing_material_history.month >= 4 AND pay_billing_material_history.year >= 2019 THEN IFNULL(auto_invoice_no, '') ELSE '' END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', material_contract, contract_type, COMP_STATE AS 'STATE', pay_billing_material_history.unit_code, pay_billing_material_history.fromtodate, pay_billing_material_history.STATE_NAME, pay_billing_material_history.CLIENT_CODE, UNIT_NAME, Client_branch_code, grade_desc AS 'designation', material_name, rate, quantity, ROUND(rate * quantity, 2) AS 'total', CASE WHEN pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_percent > 0 THEN ROUND((((rate * quantity) * pay_material_billing_details.handling_percent) / 100), 2) WHEN pay_material_billing_details.handling_applicable = 1 AND pay_material_billing_details.handling_charges_amount > 0 THEN pay_billing_material_history.handling_charges_amount ELSE 0 END AS 'handling_charge', pay_material_billing_details.handling_percent, SGST, CGST, IGST from  pay_billing_material_history INNER JOIN pay_material_billing_details ON pay_billing_material_history.comp_code = pay_material_billing_details.comp_Code AND pay_billing_material_history.client_code = pay_material_billing_details.client_code AND pay_billing_material_history.state_name = pay_material_billing_details.state AND pay_billing_material_history.unit_code = pay_material_billing_details.unit_code1 AND pay_billing_material_history.month = pay_material_billing_details.month AND pay_billing_material_history.year = pay_material_billing_details.year WHERE " + where_fix + " AND pay_billing_material_history.tot_days_present > 0 AND pay_billing_material_history.material_contract = 3 AND grade_code = 'HK' GROUP BY pay_billing_material_history.unit_code, Id_material ORDER BY UNIT_NAME  ";
                }
                else if (d.getsinglestring("select max(material_contract) from pay_billing_material_history   " + where_clause + " limit  1").Equals("4"))
                {
                    query = "SELECT material_contract, CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', contract_type, COMP_STATE AS 'STATE', pay_billing_material_history.unit_code, pay_billing_material_history.STATE_NAME, pay_billing_material_history.CLIENT_CODE, UNIT_NAME, Client_branch_code, grade_desc AS 'designation', pay_billing_material_history.handling_percent, material_area, IF(material_contract != 0, contract_amount, 0) AS 'rate', IF(material_contract != 0 AND contract_type = 2, ROUND(contract_amount * material_area, 2), ROUND(contract_amount, 2)) AS 'sub_total', IF(material_contract != 0 AND contract_type = 2, ROUND(((contract_amount * material_area) + machine_rental_amount), 2), ROUND(contract_amount + machine_rental_amount, 2)) AS 'total', IF(pay_billing_material_history.handling_applicable = 1, IF(pay_billing_material_history.handling_charges_amount > 0, pay_billing_material_history.handling_charges_amount, (IF(material_contract != 0 AND contract_type = 2, ROUND((((contract_amount * material_area) + machine_rental_amount) * pay_billing_material_history.handling_percent) / 100, 2), (ROUND((contract_amount + machine_rental_amount), 2) * pay_billing_material_history.handling_percent) / 100))), 0) AS 'handling_charge', CGST, SGST, IGST, machine_rental_amount, machine_rental_applicable, fromtodate FROM pay_billing_material_history INNER JOIN pay_material_details ON pay_billing_material_history.comp_code = pay_material_details.comp_code AND pay_billing_material_history.client_code = pay_material_details.client_code AND pay_billing_material_history.emp_code = pay_material_details.emp_code AND pay_billing_material_history.month = pay_material_details.month AND pay_billing_material_history.year = pay_material_details.year WHERE " + where_emp;
                }
                else
                {
                    query = "SELECT material_contract,CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no',CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date',contract_type,COMP_STATE AS 'STATE',unit_code,STATE_NAME,CLIENT_CODE,UNIT_NAME,Client_branch_code,grade_desc AS 'designation',handling_percent,material_area,IF(material_contract != 0, contract_amount, 0) AS 'rate',IF(material_contract != 0 AND contract_type = 2, ROUND(contract_amount * material_area, 2), ROUND(contract_amount, 2)) AS 'sub_total',IF(material_contract != 0 AND contract_type = 2, ROUND(((contract_amount * material_area) + machine_rental_amount), 2), ROUND(contract_amount + machine_rental_amount, 2)) AS 'total',  IF(handling_applicable = 1, IF(handling_charges_amount > 0, handling_charges_amount, (IF(material_contract != 0 AND contract_type = 2, ROUND((((contract_amount * material_area) + machine_rental_amount) * handling_percent) / 100, 2), (ROUND((contract_amount+machine_rental_amount), 2) * handling_percent) / 100))), 0) AS 'handling_charge',CGST,SGST,IGST,machine_rental_amount,machine_rental_applicable,fromtodate FROM pay_billing_material_history WHERE " + where;
                    //query = "SELECT material_contract, CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(invoice_no, '') WHEN invoice_flag != 0 AND pay_billing_material_history.month >= 4 AND pay_billing_material_history.year >= 2019 THEN IFNULL(auto_invoice_no, '') ELSE '' END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', contract_type, COMP_STATE AS 'STATE', unit_code, STATE_NAME, CLIENT_CODE, UNIT_NAME, Client_branch_code, grade_desc AS 'designation', handling_percent, material_area, IF(material_contract != 0, contract_amount, 0) AS 'rate', IF(material_contract = 2, ROUND(contract_amount * material_area, 2), ROUND(contract_amount, 2)) AS 'sub_total', IF(material_contract = 2, ROUND(((contract_amount * material_area) + machine_rental_amount), 2), ROUND(contract_amount + machine_rental_amount, 2)) AS 'total', IF(handling_applicable = 1, (IF(material_contract = 2, ROUND(((contract_amount * material_area)), 2), ROUND(contract_amount, 2)) * handling_percent) / 100, 0) AS 'handling_charge', IF(gst_applicable = 0 AND LOCATE(COMP_STATE, STATE_NAME), ((IF(material_contract = 2, ROUND(((contract_amount * material_area) + machine_rental_amount), 2), ROUND(contract_amount + machine_rental_amount, 2)) + IF(handling_applicable = 1, (IF(material_contract = 2, ROUND(((contract_amount * material_area)), 2), ROUND(contract_amount, 2)) * handling_percent) / 100, 0)) * 9) / 100, 0) AS 'SGST', IF(gst_applicable = 0 AND LOCATE(COMP_STATE, STATE_NAME), ((IF(material_contract = 2, ROUND(((contract_amount * material_area) + machine_rental_amount), 2), ROUND(contract_amount + machine_rental_amount, 2)) + IF(handling_applicable = 1, (IF(material_contract = 2, ROUND(((contract_amount * material_area)), 2), ROUND(contract_amount, 2)) * handling_percent) / 100, 0)) * 9) / 100, 0) AS 'CGST', IF(gst_applicable = 0 AND LOCATE(COMP_STATE, STATE_NAME) != 1, ((IF(material_contract = 2, ROUND(((contract_amount * material_area) + machine_rental_amount), 2), ROUND(contract_amount + machine_rental_amount, 2)) + IF(handling_applicable = 1, (IF(material_contract = 2, ROUND(((contract_amount * material_area)), 2), ROUND(contract_amount, 2)) * handling_percent) / 100, 0)) * 18) / 100, 0) AS 'IGST', machine_rental_amount, machine_rental_applicable, fromtodate FROM pay_billing_material_history WHERE " + where;
                    //  query = "SELECT material_contract,CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(invoice_no, '') WHEN invoice_flag != 0 AND pay_billing_material_history.month >= 4 AND pay_billing_material_history.year >= 2019 THEN IFNULL(auto_invoice_no, '') ELSE '' END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', contract_type,COMP_STATE AS 'STATE',unit_code, STATE_NAME, CLIENT_CODE, UNIT_NAME, Client_branch_code, grade_desc AS 'designation', handling_percent, material_area, IF(material_contract = 2, contract_amount, 0) AS 'rate', IF(material_contract = 2 AND contract_type = 2, ROUND(contract_amount * material_area, 2), ROUND(contract_amount, 2)) AS 'sub_total', IF(material_contract = 2 AND contract_type = 2, ROUND(((contract_amount * material_area) + machine_rental_amount), 2), ROUND(contract_amount + machine_rental_amount, 2)) AS 'total', IF(handling_applicable = 2, (IF(material_contract = 1 AND contract_type = 2, ROUND(((contract_amount * material_area) / month_days), 2), (ROUND(contract_amount, 2) * handling_percent) / 100)), 0) AS 'handling_charge', IF(gst_applicable = 0 AND LOCATE(COMP_STATE, STATE_NAME), ((IF(material_contract = 2 AND contract_type = 2, ROUND(((contract_amount * material_area) + machine_rental_amount), 2), ROUND(contract_amount + machine_rental_amount, 2)) + IF(handling_applicable = 1, (IF(material_contract = 1 AND contract_type = 2, ROUND(((contract_amount * material_area)), 2), ROUND(contract_amount, 2)) * handling_percent) / 100, 0)) * 9) / 100, 0) AS 'SGST', IF(gst_applicable = 0 AND LOCATE(COMP_STATE, STATE_NAME), ((IF(material_contract = 2 AND contract_type = 2, ROUND(((contract_amount * material_area) + machine_rental_amount), 2), ROUND(contract_amount + machine_rental_amount, 2)) + IF(handling_applicable = 1, (IF(material_contract = 1 AND contract_type = 2, ROUND(((contract_amount * material_area)), 2), ROUND(contract_amount, 2)) * handling_percent) / 100, 0)) * 9) / 100, 0) AS 'CGST', IF(gst_applicable = 0 AND LOCATE(COMP_STATE, STATE_NAME) != 1, ((IF(material_contract = 2 AND contract_type = 2, ROUND(((contract_amount * material_area) + machine_rental_amount), 2), ROUND(contract_amount + machine_rental_amount, 2)) + IF(handling_applicable = 1, (IF(material_contract = 1 AND contract_type = 2, ROUND(((contract_amount * material_area)), 2), ROUND(contract_amount, 2)) * handling_percent) / 100, 0)) * 18) / 100, 0) AS 'IGST', machine_rental_amount, machine_rental_applicable, fromtodate FROM pay_billing_material_history WHERE " + where;
                }
            }
            //Deep Clean finance copy
            else if (i == 3)
            {
                if (ddl_client.SelectedValue != "ALL")
                {
                    where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and unit_code = '" + ddl_unitcode.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 AND dc_contract = 1  GROUP BY unit_code, designation  ORDER BY STATE_NAME, UNIT_NAME";
                }
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 AND dc_contract = 1 GROUP BY unit_code, designation ORDER BY STATE_NAME, UNIT_NAME ";
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 AND dc_contract = 1 GROUP BY unit_code, designation ORDER BY STATE_NAME, UNIT_NAME ";
                }
                if (ddl_client.SelectedValue == "ALL")
                {
                    where = " comp_code = '" + Session["comp_code"].ToString() + "'  and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 AND dc_contract = 1  GROUP BY unit_code, designation  ORDER BY client,STATE_NAME, UNIT_NAME";
                }
                query = "SELECT  CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', COMP_STATE  AS 'STATE',client,  STATE_NAME ,  UNIT_NAME ,  Client_branch_code ,  grade_desc  AS 'designation',  dc_handling_percent ,  dc_rate , IF( dc_contract  = 1 AND  dc_type  = 2, ( dc_rate  *  dc_area ),  dc_rate ) AS 'total', IF( dc_handling_charge  = 1, (IF( dc_contract  = 1 AND  dc_type  = 2, ( dc_rate  *  dc_area ),  dc_rate ) *  dc_handling_percent ) / 100, 0) AS 'handling_charge', SGST,CGST, IGST FROM  pay_billing_material_history  WHERE " + where;
            }
            //Pest Control finance copy
            else if (i == 4)
            {
                where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and unit_code = '" + ddl_unitcode.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 AND pc_contract = 1  GROUP BY unit_code, designation  ORDER BY STATE_NAME, UNIT_NAME ";
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 AND pc_contract = 1 GROUP BY unit_code, designation ORDER BY STATE_NAME, UNIT_NAME ";
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 AND pc_contract = 1 GROUP BY unit_code, designation ORDER BY STATE_NAME, UNIT_NAME ";
                }
                query = "SELECT CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', COMP_STATE  AS 'STATE', STATE_NAME , UNIT_NAME , Client_branch_code , grade_desc  AS 'designation', pc_handling_percent , IF( pc_contract  = 1 AND  pc_type  = 2, ( pc_rate  *  pc_area ),  pc_rate ) AS 'total', IF( pc_handling_charge  = 1, (IF( pc_contract  = 1 AND  pc_type  = 2, ( pc_rate  *  pc_area ),  pc_rate ) *  pc_handling_percent ) / 100, 0) AS 'handling_charge', IF( gst_applicable  = 1 AND LOCATE( COMP_STATE ,  STATE_NAME ), ((IF( pc_contract  = 1 AND  pc_type  = 2, ( pc_rate  *  pc_area ),  pc_rate ) + IF( pc_handling_charge  = 1, (IF( pc_contract  = 1 AND  pc_type  = 2, ( pc_rate  *  pc_area ),  pc_rate ) *  pc_handling_percent ) / 100, 0)) * 9) / 100, 0) AS 'SGST', IF( gst_applicable  = 1 AND LOCATE( COMP_STATE ,  STATE_NAME ), ((IF( pc_contract  = 1 AND  pc_type  = 2, ( pc_rate  *  pc_area ),  pc_rate ) + IF( pc_handling_charge  = 1, (IF( pc_contract  = 1 AND  pc_type  = 2, ( pc_rate  *  pc_area ),  pc_rate ) *  pc_handling_percent ) / 100, 0)) * 9) / 100, 0) AS 'CGST', IF( gst_applicable  = 1 AND LOCATE( COMP_STATE ,  STATE_NAME ) != 1, ((IF( pc_contract  = 1 AND  pc_type  = 2, ( pc_rate  *  pc_area ),  pc_rate ) + IF( pc_handling_charge  = 1, (IF( pc_contract  = 1 AND  pc_type  = 2, ( pc_rate  *  pc_area ),  pc_rate ) *  pc_handling_percent ) / 100, 0)) * 18) / 100, 0) AS 'IGST' FROM  pay_billing_material_history  WHERE  " + where;
            }
            // Conveyance
            else if (i == 5)
            {
                if (ddl_client.SelectedValue != "ALL")
                {
                    where = " pay_transaction.comp_code = '" + Session["comp_code"].ToString() + "' and pay_transaction.CUST_CODE = '" + ddl_client.SelectedValue + "' and pay_transaction.state = '" + ddl_billing_state.SelectedValue + "' and pay_transaction.branch_name = '" + ddl_unitcode.SelectedValue + "' and  pay_transaction.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_transaction.year = '" + txt_month_year.Text.Substring(3) + "' ";
                }

                if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = " pay_transaction.comp_code = '" + Session["comp_code"].ToString() + "' and pay_transaction.CUST_CODE = '" + ddl_client.SelectedValue + "' and pay_transaction.state = '" + ddl_billing_state.SelectedValue + "' and pay_transaction.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_transaction.year = '" + txt_month_year.Text.Substring(3) + "'";
                }
                if (ddl_client.SelectedValue == "ALL")
                {
                    where = " pay_transaction.comp_code = '" + Session["comp_code"].ToString() + "' and pay_transaction.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_transaction.year = '" + txt_month_year.Text.Substring(3) + "'";
                }
                query = "SELECT  CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', client, pay_transaction.state, (SELECT UNIT_NAME FROM pay_unit_master WHERE unit_code = pay_transaction.branch_name AND comp_code = pay_transaction.COMP_CODE) AS 'BRANCH', (SELECT ITEM_NAME FROM pay_item_master WHERE ITEM_CODE = pay_transaction_details.ITEM_CODE AND comp_code = pay_transaction_details.COMP_CODE) AS 'ITEMS', RATE, QUANTITY, pay_transaction_details.DESIGNATION AS 'UNIT', AMOUNT,  pay_transaction_details.Vat AS 'GST %', (AMOUNT * pay_transaction_details.Vat) / 100 AS 'GST AMOUNT', (AMOUNT + (AMOUNT * pay_transaction_details.Vat) / 100) AS 'TOTAL' FROM pay_transaction INNER JOIN pay_transaction_details ON pay_transaction.DOC_NO = pay_transaction_details.DOC_NO AND pay_transaction.COMP_CODE = pay_transaction_details.COMP_CODE INNER JOIN pay_client_master on  pay_client_master.client_code = pay_transaction.CUST_CODE WHERE " + where;
            }
            // Driver Conveyance
            else if (i == 6)
            {
                if (ddl_client.SelectedValue != "ALL")
                {
                    where = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_material_history.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "'  and pay_billing_material_history.conveyance_type = 100  ORDER BY state_name,unit_name,emp_name ";
                }
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "'  and pay_billing_material_history.conveyance_type = 100 ORDER BY STATE_NAME, UNIT_NAME  ";
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_material_history.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "'  and pay_billing_material_history.conveyance_type = 100 ORDER BY state_name,unit_name,emp_name ";
                }
                if (ddl_client.SelectedValue == "ALL")
                {
                    where = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "'  " + where_state + " and pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "'  and pay_billing_material_history.conveyance_type = 100 ORDER BY state_name,unit_name,emp_name ";
                }
                //query = "SELECT CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(invoice_no, '') WHEN invoice_flag != 0 AND pay_billing_material_history.month >= 4 AND pay_billing_material_history.year >= 2019 THEN IFNULL(auto_invoice_no, '') ELSE '' END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', CONCAT(UPPER(DATE_FORMAT(STR_TO_DATE('2019-6-21', '%Y-%m-%d'), '%d %b %Y')), ' TO ', UPPER(DATE_FORMAT(STR_TO_DATE('2019-07-20', '%Y-%m-%d'), '%d %b %Y'))) AS 'fromtodate', UNIT_NAME, pay_billing_material_history.unit_code, STATE_NAME, pay_billing_material_history.EMP_NAME, grade_desc AS 'designation', food_allowance_rate , food_allowance_days, outstation_allowance_rate, outstation_allowance_days, outstation_food_allowance_rate, outstation_food_allowance_days, night_halt_rate, night_halt_days, km_rate, total_km ,'0' AS 'Service_Charge','0' AS 'SGST','0' AS 'CGST','0' AS 'IGST' FROM pay_billing_material_history INNER JOIN pay_conveyance_amount_history ON pay_conveyance_amount_history.emp_code = pay_billing_material_history.emp_code  AND pay_conveyance_amount_history.comp_code = pay_billing_material_history.comp_code and  (pay_conveyance_amount_history.conveyance_rate IS NULL || pay_conveyance_amount_history.conveyance_rate='') WHERE  " + where;
                //query = "SELECT CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(invoice_no, '') WHEN invoice_flag != 0 AND pay_billing_material_history.month >= 4 AND pay_billing_material_history.year >= 2019 THEN IFNULL(auto_invoice_no, '') ELSE '' END AS 'bill_invoice_no', CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date', CONCAT(UPPER(DATE_FORMAT(STR_TO_DATE('2019-6-21', '%Y-%m-%d'), '%d %b %Y')), ' TO ', UPPER(DATE_FORMAT(STR_TO_DATE('2019-07-20', '%Y-%m-%d'), '%d %b %Y'))) AS 'fromtodate', UNIT_NAME, pay_billing_material_history.unit_code, STATE_NAME, pay_billing_material_history.EMP_NAME, grade_desc AS 'designation', food_allowance_rate, food_allowance_days, (food_allowance_rate * food_allowance_days) AS 'food_total', outstation_allowance_rate, outstation_allowance_days, (outstation_allowance_rate * outstation_allowance_days) AS 'out_total', outstation_food_allowance_rate, outstation_food_allowance_days, (outstation_food_allowance_rate * outstation_food_allowance_days) AS 'out_food_total', night_halt_rate, night_halt_days, (night_halt_rate * night_halt_days) AS 'night_total', km_rate, total_km, (km_rate * total_km) AS 'km_total', ((food_allowance_rate * food_allowance_days)+(outstation_allowance_rate * outstation_allowance_days)+(outstation_food_allowance_rate * outstation_food_allowance_days)+  (night_halt_rate * night_halt_days)+(km_rate * total_km)) as Subtotal_A, (((food_allowance_rate * food_allowance_days)+(outstation_allowance_rate * outstation_allowance_days)+(outstation_food_allowance_rate * outstation_food_allowance_days)+  (night_halt_rate * night_halt_days)+(km_rate * total_km))*5/100) AS 'Service_Charge', (((food_allowance_rate * food_allowance_days)+(outstation_allowance_rate * outstation_allowance_days)+(outstation_food_allowance_rate * outstation_food_allowance_days)+  (night_halt_rate * night_halt_days)+(km_rate * total_km)) +   (((food_allowance_rate * food_allowance_days)+(outstation_allowance_rate * outstation_allowance_days)+(outstation_food_allowance_rate * outstation_food_allowance_days)+  (night_halt_rate * night_halt_days)+(km_rate * total_km))*5/100)) as sub_total, if(LOCATE(COMP_STATE, state_name),((((food_allowance_rate * food_allowance_days)+(outstation_allowance_rate * outstation_allowance_days)+(outstation_food_allowance_rate * outstation_food_allowance_days)+  (night_halt_rate * night_halt_days)+(km_rate * total_km)) +   (((food_allowance_rate * food_allowance_days)+(outstation_allowance_rate * outstation_allowance_days)+(outstation_food_allowance_rate * outstation_food_allowance_days)+  (night_halt_rate * night_halt_days)+(km_rate * total_km))*5/100))*9/100),0) AS 'SGST', if(LOCATE(COMP_STATE, state_name),((((food_allowance_rate * food_allowance_days)+(outstation_allowance_rate * outstation_allowance_days)+(outstation_food_allowance_rate * outstation_food_allowance_days)+  (night_halt_rate * night_halt_days)+(km_rate * total_km)) +   (((food_allowance_rate * food_allowance_days)+(outstation_allowance_rate * outstation_allowance_days)+(outstation_food_allowance_rate * outstation_food_allowance_days)+  (night_halt_rate * night_halt_days)+(km_rate * total_km))*5/100))*9/100),0) AS 'CGST', if(LOCATE(COMP_STATE, state_name),0,((((food_allowance_rate * food_allowance_days)+(outstation_allowance_rate * outstation_allowance_days)+(outstation_food_allowance_rate * outstation_food_allowance_days)+  (night_halt_rate * night_halt_days)+(km_rate * total_km)) +   (((food_allowance_rate * food_allowance_days)+(outstation_allowance_rate * outstation_allowance_days)+(outstation_food_allowance_rate * outstation_food_allowance_days)+  (night_halt_rate * night_halt_days)+(km_rate * total_km))*5/100))*18/100)) AS 'IGST' FROM pay_billing_material_history INNER JOIN pay_conveyance_amount_history ON pay_conveyance_amount_history.emp_code = pay_billing_material_history.emp_code AND pay_conveyance_amount_history.comp_code = pay_billing_material_history.comp_code AND (pay_conveyance_amount_history.conveyance_rate IS NULL || pay_conveyance_amount_history.conveyance_rate = '') WHERE " + where;
                query = "SELECT CASE WHEN invoice_flag != 0 AND pay_billing_material_history.month <= 3 AND pay_billing_material_history.year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'bill_invoice_no',CASE WHEN invoice_flag != 0 THEN DATE_FORMAT(billing_date, '%d/%m/%Y') ELSE '' END AS 'billing_date'," + daterange + ", CLIENT,UNIT_NAME, Client_branch_code as 'unit_code', STATE_NAME, pay_billing_material_history.EMP_NAME, grade_desc AS 'designation', food_allowance_rate, food_allowance_days, (food_allowance_rate * food_allowance_days) AS 'food_total', outstation_allowance_rate, outstation_allowance_days, (outstation_allowance_rate * outstation_allowance_days) AS 'out_total', outstation_food_allowance_rate, outstation_food_allowance_days, (outstation_food_allowance_rate * outstation_food_allowance_days) AS 'out_food_total', night_halt_rate, night_halt_days, (night_halt_rate * night_halt_days) AS 'night_total', km_rate, kms, (total_km) AS 'km_total', ((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) AS 'Subtotal_A', (((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) * 5 / 100) AS 'Service_Charge', (((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) + (((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) * 5 / 100)) AS 'sub_total',SGST, CGST,IGST FROM pay_billing_material_history INNER JOIN pay_conveyance_amount_history ON pay_conveyance_amount_history.emp_code = pay_billing_material_history.emp_code AND pay_conveyance_amount_history.comp_code = pay_billing_material_history.comp_code  AND pay_conveyance_amount_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' and  pay_conveyance_amount_history.conveyance = 'driver_conveyance' INNER JOIN pay_billing_master ON pay_billing_master.billing_unit_code = pay_billing_material_history.unit_code AND pay_billing_master.comp_code = pay_billing_material_history.comp_code AND pay_billing_master.designation = pay_billing_material_history.GRADE_CODE  WHERE " + where;
            }
            //adp1 = new MySqlDataAdapter("SELECT (SELECT ITEM_NAME FROM pay_item_master WHERE ITEM_CODE = pay_transaction_details.ITEM_CODE AND comp_code = pay_transaction_details.COMP_CODE) AS 'ITEMS',RATE,QUANTITY,	DESIGNATION as 'UNIT', AMOUNT, (SELECT UNIT_NAME FROM pay_unit_master WHERE unit_code = pay_transaction.branch_name AND comp_code = pay_transaction.COMP_CODE) AS 'BRANCH', pay_transaction_details.Vat AS 'GST %', (AMOUNT * pay_transaction_details.Vat) / 100 AS 'GST AMOUNT',(AMOUNT +(AMOUNT * pay_transaction_details.Vat) / 100) as 'TOTAL' FROM pay_transaction INNER JOIN pay_transaction_details ON pay_transaction.DOC_NO = pay_transaction_details.DOC_NO AND pay_transaction.COMP_CODE = pay_transaction_details.COMP_CODE WHERE " + where, d1.con1);

            DataSet ds = new DataSet();
            MySqlDataAdapter adp1 = new MySqlDataAdapter(query, d1.con1);
            adp1.Fill(ds);


            if (ds.Tables[0].Rows.Count > 0)
            {
                Response.Clear();
                Response.Buffer = true;
                if (i == 1)
                {
                    Response.AddHeader("content-disposition", "attachment;filename=Conveyance_Finance_Copy_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");

                }
                else if (i == 2)
                {
                    Response.AddHeader("content-disposition", "attachment;filename=Material_Finance_Copy_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                }
                else if (i == 3)
                {
                    Response.AddHeader("content-disposition", "attachment;filename=Deep_Cleaning_Finance_Copy_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                }
                else if (i == 4)
                {
                    Response.AddHeader("content-disposition", "attachment;filename=PestControl_Finance_Copy_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                }
                else if (i == 5)
                {
                    Response.AddHeader("content-disposition", "attachment;filename=Material_Billing_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                }
                else if (i == 6)
                {
                    Response.AddHeader("content-disposition", "attachment;filename=Driver_Conveyance_Finance_Copy_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                }
                if (ddl_client.SelectedValue == "RCPL" && i == 2) { invoice = ""; }
                Response.Charset = "";
                Response.ContentType = "application/vnd.ms-excel";
                Repeater Repeater1 = new Repeater();
                Repeater1.DataSource = ds;
                Repeater1.HeaderTemplate = new MyTemplate1(ListItemType.Header, ds, i, invoice, bill_date, 1);
                Repeater1.ItemTemplate = new MyTemplate1(ListItemType.Item, ds, i, invoice, bill_date, 1);
                Repeater1.FooterTemplate = new MyTemplate1(ListItemType.Footer, null, i, invoice, bill_date, 1);
                Repeater1.DataBind();

                System.IO.StringWriter stringWrite = new System.IO.StringWriter();
                System.Web.UI.HtmlTextWriter htmlWrite = new HtmlTextWriter(stringWrite);
                Repeater1.RenderControl(htmlWrite);

                if (ddl_client.SelectedValue == "RCPL" && i == 2) { stringWrite = update_material_grp_companies(stringWrite, ds); }

                string style = @"<style> .textmode { } </style>";
                Response.Write(style);
                Response.Output.Write(stringWrite.ToString());
                Response.Flush();
                Response.End();
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('No Matching Records Found.');", true);
            }
        }

        catch (Exception ex) { throw ex; }
        finally
        {
            d.con.Close();
        }
    }

    public class MyTemplate1 : ITemplate
    {

        ListItemType type;
        LiteralControl lc;
        DataSet ds;
        int i, i3 = 1, ctr1, state_change = 0;
        static int ctr;
        string invoice = "";
        string bill_date = "";
        string km_per_rate = "";
        string km_per_rate_value = "", col1 = "", col2 = "", total = "BASE AMOUNT", state_name = "";
        double grand_tot = 0, cgst = 0, sgst = 0, igst = 0, total1 = 0, sub_total = 0, machine_rate_amt = 0, no_of_duties = 0, gst = 0, handl = 0, handltotal = 0, rate = 0, material_area = 0;
        double grand_tot1 = 0, cgst1 = 0, sgst1 = 0, igst1 = 0, total2 = 0, sub_total1 = 0, machine_rate_amt1 = 0, gst1 = 0, handl1 = 0, handltotal1 = 0, rate1 = 0, material_area1 = 0, grand_tot3 = 0;

        public MyTemplate1(ListItemType type, DataSet ds, int i, string invoice, string bill_date, int i3)
        {
            this.type = type;
            this.ds = ds;
            ctr = 0;
            this.i = i;
            this.invoice = invoice;
            this.bill_date = bill_date;
            this.i3 = i3;
        }
        public void InstantiateIn(Control container)
        {

            switch (type)
            {
                case ListItemType.Header:
                    if (i == 1)
                    {
                        int colsize = 18;
                        if (!ds.Tables[0].Rows[ctr]["conveyance_type"].ToString().Equals("3"))
                        {
                            km_per_rate = "<th>RATE PER KM.</th><th>TOTAL KM.</th>";
                            total = "SUB TOTAL";
                            colsize = 20;

                        }
                        lc = new LiteralControl("<table border=1><tr><th  colspan=" + colsize + " bgcolor=yellow align=center >CONVEYANCE FINANCE COPY FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr></tr><tr><th>SR.NO.</th><th>BILL NO</th><th>BILL DATE</th><th>BILLING PERIOD</th><th>CLIENT NAME<th>STATE</th><th>LOCATION</th><th>BRANCH CODE</th><th>EMPLOYEE NAME</th><th>DESIGNATION</th>" + km_per_rate + "<th>" + total + "</th><th>SERVICE CHARGE " + ds.Tables[0].Rows[ctr]["conveyance_service_charge_per"].ToString() + "%</th><th>TOTAL</th><th>CGST 9%</th><th>SGST 9%</th><th>IGST 18%</th><th>TOTAL GST</th><th>GRAND TOTAL</th></tr>");


                    }
                    else if (i == 2)
                    {
                        string handling = "";
                        int colspan = 16;
                        string sqr_fit_columns = "<th>RATE (PER SQ.FT.)</th><th>BRANCH AREA (SQ.FT.)</th>";
                        string machine_rental = "";
                        if (!ds.Tables[0].Rows[ctr]["CLIENT_CODE"].ToString().Equals("RBL"))
                        {
                            handling = "<th>HANDLING CHARGES(" + ds.Tables[0].Rows[ctr]["handling_percent"] + "%)</th><th>TOTAL</th>";

                            if (ds.Tables[0].Rows[ctr]["contract_type"].ToString().Equals("1") || ds.Tables[0].Rows[ctr]["contract_type"].ToString().Equals("4"))
                            {
                                sqr_fit_columns = "";
                                colspan = 16;
                            }
                            else
                            {
                                colspan = 18;
                            }
                        }
                        if (ds.Tables[0].Rows[ctr]["CLIENT_CODE"].ToString().Equals("RCPL") || ds.Tables[0].Rows[ctr]["machine_rental_applicable"].ToString().Equals("1"))
                        {
                            machine_rental = "<th>MACHINE RENTAL</th>";
                            colspan = 17;
                        }
                        if (ds.Tables[0].Rows[ctr]["material_contract"].ToString().Equals("3"))
                        {
                            lc = new LiteralControl("<table border=1><tr><th  colspan=" + colspan + " bgcolor=yellow align=center >MATERIAL FINANCE COPY FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr></tr><tr><th>SR.NO.</th><th>BILL NO</th><th>BILL DATE</th><th>INVOICE PERIOD</th><th>STATE</th><th>LOCATION</th><th>BRANCH CODE</th><th>MATERIAL NAME</th><th>RATE</th><th> QTY.</th><th>SUB TOTAL</th>" + handling + "<th>CGST 9%</th><th>SGST 9%</th><th>IGST 18%</th><th>TOTAL GST</th><th>GRAND TOTAL</th></tr>");
                        }
                        else
                        {
                            lc = new LiteralControl("<table border=1><tr><th  colspan=" + colspan + " bgcolor=yellow align=center >MATERIAL FINANCE COPY FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr></tr><tr><th>SR.NO.</th><th>BILL NO</th><th>BILL DATE</th><th>INVOICE PERIOD</th><th>STATE</th><th>LOCATION</th><th>BRANCH CODE</th>" + sqr_fit_columns + "<th>TOTAL MATERIAL COST</th>" + machine_rental + "<th>SUB TOTAL</th>" + handling + "<th>CGST 9%</th><th>SGST 9%</th><th>IGST 18%</th><th>TOTAL GST</th><th>GRAND TOTAL</th></tr>");
                            //if (ds.Tables[0].Rows.Count == ctr + 1)
                            //{
                            //    lc.Text = lc.Text + "<tr><b><td align=center colspan=10>Total</td><td>=ROUND(SUM(K2:K" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(L2:L" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(M2:M" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(N2:N" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(O2:O" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(P2:P" + (ctr + 2) + "),2)</td></b></tr>";
                            //}
                        }
                    }
                    else if (i == 3)
                    {
                        lc = new LiteralControl("<table border=1><tr><th  colspan=15 bgcolor=yellow align=center >DEEP CLEAN FINANCE COPY FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr></tr><tr><th>SR.NO.</th><th>BILL NO</th><th>BILL DATE</th><th>CLIENT NAME</th><th>STATE</th><th>LOCATION</th><th>BRANCH CODE</th><th>RATE</th><th>SERVICE CHARGE(" + ds.Tables[0].Rows[ctr]["dc_handling_percent"] + "%)</th><th>SUB TOTAL</th><th>CGST 9%</th><th>SGST 9%</th><th>IGST 18%</th><th>TOTAL GST</th><th>GRAND TOTAL</th></tr>");
                    }
                    else if (i == 4)
                    {
                        lc = new LiteralControl("<table border=1><tr><th  colspan=14 bgcolor=yellow align=center >PEST CONTROL FINANCE COPY FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr></tr><tr><th>SR.NO.</th><th>BILL NO</th><th>BILL DATE</th><th>STATE</th><th>LOCATION</th><th>BRANCH CODE</th><th>RATE</th><th>HANDLING CHARGES(" + ds.Tables[0].Rows[ctr]["pc_handling_percent"] + "%)</th><th>SUB TOTAL</th><th>CGST 9%</th><th>SGST 9%</th><th>IGST 18%</th><th>TOTAL GST</th><th>GRAND TOTAL</th></tr>");
                    }
                    else if (i == 5)
                    {
                        lc = new LiteralControl("<TABLE BORDER=1><TR><TH colspan=2>CLIENT NAME</TH><TH colspan=2>STATE</TH><TH colspan=2>BRANCH NAME</TH><TH colspan=2>ITEM NAME</TH><TH colspan=2>ITEM RATE</TH><TH colspan=2>QUANTITY</TH><TH colspan=2>UNIT</TH><TH colspan=2>AMOUNT </TH><TH colspan=2>GST %</TH><TH colspan=2>GST AMOUNT</TH><TH colspan=2>TOTAL AMOUNT</TH></TR>");

                    }
                    else if (i == 6)
                    {
                        lc = new LiteralControl("<table border =1><tr ><th style=background-color:yellow  colspan = 33 align=center >DRIVER CONVEYANCE FINANCE COPY FOR " + Billing_rates.month_name.ToUpper() + "</th></tr><tr style=font-weight:bold;text-align:center;><td rowspan=2 style=background-color:yellow>SR.NO</td><td style=background-color:yellow rowspan=2>BILL NO</td><td rowspan=2 style=background-color:yellow>BILL DATE</td><td style=background-color:yellow;white-space:nowrap;text-align:center; rowspan=2>BILLING PERIOD</td><td style=background-color:yellow rowspan=2>CLIENT NAME</td><td style=background-color:yellow rowspan=2>LOCATION</td><td style=background-color:yellow rowspan=2>BRANCH CODE</td><td style=background-color:yellow rowspan=2>STATE</td><td style=background-color:yellow rowspan=2>NAME OF THE DEPUTY</td><td style=background-color:yellow rowspan=2>DESIGNATION</td><td style=background-color:yellow colspan=3>FOOD ALLOWANCE</td><td style=background-color:yellow colspan=3>OUTSTATION ALLOWANCE/CONVEYANCE </td><td style=background-color:yellow colspan=3>OUTSTATION FOOD ALLOWANCE </td><td style=background-color:yellow colspan=3>NIGHT HALT</td><td style=background-color:yellow colspan=3>TOTAL KM AMOUNT</td><td style=background-color:yellow rowspan=2>SUB TOTAL (A) REGULAR + OT</td><td style=background-color:yellow rowspan=2>SERVICE CHARGE@5%</td><td style=background-color:yellow rowspan=2>SUB TOTAL</td><td style=background-color:yellow;text-align:center; colspan=3>GST</td><td style=background-color:yellow rowspan=2>TOTAL GST</td><td style=background-color:yellow rowspan=2>GRAND TOTAL</td></tr><tr><td style=background-color:pink;>RATE</td><td style=background-color:pink;>DAYS</td><td style=background-color:pink;>TOTAL</td><td style=background-color:skyblue;>RATE</td><td style=background-color:skyblue>DAYS</td><td style=background-color:skyblue>TOTAL</td><td style=background-color:pink;>RATE</td><td style=background-color:pink;>DAYS</td><td style=background-color:pink;>TOTAL</td><td style=background-color:skyblue>RATE</td><td style=background-color:skyblue>DAYS</td><td style=background-color:skyblue>TOTAL</td><td style=background-color:pink;>RATE</td><td style=background-color:pink;>TOTAL KM</td><td style=background-color:pink;>TOTAL</td><td style=background-color:yellow;>CGST 9%</td><td style=background-color:yellow;>SGST 9%</td><td style=background-color:yellow;>IGST 18%</td></tr>");

                    }
                    break;
                case ListItemType.Item:
                    if (i == 5)
                    {
                        lc = new LiteralControl("<tr><td colspan=2 >" + ds.Tables[0].Rows[ctr]["CLIENT_NAME"] + " </td><td colspan=2>" + ds.Tables[0].Rows[ctr]["state"] + "</td><td colspan=2>" + ds.Tables[0].Rows[ctr]["BRANCH"] + "</td><td colspan=2>" + ds.Tables[0].Rows[ctr]["ITEMS"] + " </td><td colspan=2>'" + ds.Tables[0].Rows[ctr]["RATE"] + "</td><td colspan=2>'" + ds.Tables[0].Rows[ctr]["QUANTITY"] + "</td><td colspan=2>" + ds.Tables[0].Rows[ctr]["UNIT"] + "</td><td colspan=2>" + ds.Tables[0].Rows[ctr]["AMOUNT"] + "</td><td colspan=2>" + ds.Tables[0].Rows[ctr]["GST %"] + "</td><td colspan=2>" + ds.Tables[0].Rows[ctr]["GST AMOUNT"] + "</td><td colspan=2>'" + ds.Tables[0].Rows[ctr]["TOTAL"] + "</td></tr>");
                    }
                    else if (i == 2)
                    {
                        int start_first_row = 4;
                        if (ds.Tables[0].Rows[ctr]["CLIENT_CODE"].ToString().Equals("RCPL"))
                        {
                            string handling = "";
                            string handling_tot = "";
                            string sqr_fit_columns = "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["rate"].ToString()), 2) + "</td><td>" + double.Parse(ds.Tables[0].Rows[ctr]["material_area"].ToString()) + "</td>";
                            string grand_total = "<td>=ROUND(SUM(L" + (ctr + start_first_row) + ",P" + (ctr + start_first_row) + "),2)</td>";


                            if (!ds.Tables[0].Rows[ctr]["CLIENT_CODE"].ToString().Equals("RBL"))
                            {
                                handling = "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()), 2) + "</td>";
                                handling_tot = "<td>=ROUND(SUM(R" + start_first_row + ":R" + (ctr + start_first_row) + "),2)</td><td>= ROUND(SUM(S" + start_first_row + ": S" + (ctr + start_first_row) + "), 2) </td>";
                                grand_total = "<td>=ROUND(SUM(N" + (ctr + start_first_row) + ",R" + (ctr + start_first_row) + "),2)</td>";

                                if (ds.Tables[0].Rows[ctr]["contract_type"].ToString().Equals("1"))
                                {
                                    sqr_fit_columns = "";
                                    handling = "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()), 2) + "</td>";
                                    handling_tot = "<td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td>= ROUND(SUM(P" + start_first_row + ": P" + (ctr + start_first_row) + "), 2) </td>";
                                    grand_total = "<td>=ROUND(SUM(L" + (ctr + start_first_row) + ",P" + (ctr + start_first_row) + "),2)</td>";

                                }

                            }
                            if (state_name != ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper())
                            {
                                if (state_name != "")
                                {

                                    i3 = i3 + 1;

                                    lc.Text = lc.Text + "<tr><b><td align=center colspan = 7>Total</td><td>" + sub_total + "</td><td>" + machine_rate_amt + "</td><td>" + total1 + "</td><td>" + handl + "</td><td>" + handltotal + "</td><td>" + cgst + "</td><td>" + sgst + "</td><td>" + igst + "</td><td>" + gst + "</td><td>" + grand_tot + "</td></b></tr>";

                                    ctr1 = ctr + i3 + 1;
                                    state_change = 1;
                                    sub_total = 0; machine_rate_amt = 0; total1 = 0; cgst = 0; sgst = 0; handl = 0; handltotal = 0; igst = 0; gst = 0; grand_tot = 0; total1 = 0;

                                }

                            }
                            sub_total = sub_total + double.Parse(ds.Tables[0].Rows[ctr]["sub_total"].ToString());
                            machine_rate_amt = machine_rate_amt + double.Parse(ds.Tables[0].Rows[ctr]["machine_rental_amount"].ToString());
                            total1 = total1 + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString());
                            handl = handl + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString());
                            handltotal = handltotal + (double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()));
                            cgst = cgst + double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString());
                            sgst = sgst + double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString());
                            igst = igst + double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString());
                            gst = gst + ((double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString())));
                            grand_tot = grand_tot + ((double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString())) + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString())));

                            sub_total1 = sub_total + double.Parse(ds.Tables[0].Rows[ctr]["sub_total"].ToString());
                            machine_rate_amt1 = machine_rate_amt + double.Parse(ds.Tables[0].Rows[ctr]["machine_rental_amount"].ToString());
                            total2 = total1 + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString());
                            handl1 = handl + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString());
                            handltotal1 = handltotal + (double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()));
                            cgst1 = cgst + double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString());
                            sgst1 = sgst + double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString());
                            igst1 = igst + double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString());
                            gst1 = gst + ((double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString())));
                            grand_tot1 = grand_tot + ((double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString())) + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString())));

                            state_name = ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper();
                            lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["fromtodate"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"].ToString() + "</td>" + sqr_fit_columns + "<td>" + double.Parse(ds.Tables[0].Rows[ctr]["sub_total"].ToString()) + "</td><td>" + double.Parse(ds.Tables[0].Rows[ctr]["machine_rental_amount"].ToString()) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()), 2) + "</td>" + handling + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>" + grand_tot + "</td></tr>");

                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                if (!ds.Tables[0].Rows[ctr]["CLIENT_CODE"].ToString().Equals("RBL"))
                                {

                                    if (ds.Tables[0].Rows[ctr]["contract_type"].ToString().Equals("1") || ds.Tables[0].Rows[ctr]["contract_type"].ToString().Equals("4"))
                                    {
                                        //lc.Text = lc.Text + "<tr><b><td align=center colspan=7>Total</td><td>=ROUND(SUM(H" + start_first_row + ":H" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(I" + start_first_row + ":I" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(J" + start_first_row + ":J" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(P" + start_first_row + ":P" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td></b></tr>";
                                        lc.Text = lc.Text + "<tr><b><td align=center colspan = 7>Total</td><td>" + sub_total + "</td><td>" + machine_rate_amt + "</td><td>" + total1 + "</td><td>" + handl + "</td><td> " + handltotal + "</td><td>" + cgst + "</td><td>" + sgst + "</td><td>" + igst + "</td><td>" + gst + "</td><td>" + grand_tot + "</td></b></tr>";
                                        if (state_change == 1)
                                        {
                                            lc.Text = lc.Text + "<tr><b><td align=center colspan = 7>Grand Total</td><td>" + sub_total1 + "</td><td>" + machine_rate_amt1 + "</td><td>" + total2 + "</td><td>" + handl1 + "</td><td> " + handltotal1 + "</td><td>" + cgst1 + "</td><td>" + sgst1 + "</td><td>" + igst1 + "</td><td>" + gst1 + "</td><td>" + grand_tot1 + "</td></b></tr>";
                                        }
                                    }
                                    else
                                    {

                                        lc.Text = lc.Text + "<tr><b><td align=center colspan=7>Total</td><td>=ROUND(SUM(H" + start_first_row + ":H" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(I" + start_first_row + ":I" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(J" + start_first_row + ":J" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(P" + start_first_row + ":P" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td>" + handling_tot + "</b></tr>";

                                    }
                                }
                                else
                                {

                                    lc.Text = lc.Text + "<tr><b><td align=center colspan=7>Total</td><td>=ROUND(SUM(H" + start_first_row + ":H" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(I" + start_first_row + ":I" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(J" + start_first_row + ":J" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(P" + start_first_row + ":P" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td>" + handling_tot + "</b></tr>";

                                }
                            }
                        }
                        else
                        {
                            string handling = "";
                            string handling_tot = "";
                            string sqr_fit_columns = "";
                            if (ds.Tables[0].Rows[ctr]["material_contract"].ToString().Equals("3"))
                            {
                                sqr_fit_columns = "";
                            }
                            else
                            {
                                sqr_fit_columns = "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["rate"].ToString()), 2) + "</td><td>" + double.Parse(ds.Tables[0].Rows[ctr]["material_area"].ToString()) + "</td>";
                            }
                            string grand_total = "<td>=ROUND(SUM(K" + (ctr + start_first_row) + ",O" + (ctr + start_first_row) + "),2)</td>";

                            if (!ds.Tables[0].Rows[ctr]["CLIENT_CODE"].ToString().Equals("RBL"))
                            {

                                handling = "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()), 2) + "</td>";
                                handling_tot = "<td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td><td>= ROUND(SUM(R" + start_first_row + ": R" + (ctr + start_first_row) + "), 2) </td>";
                                grand_total = "<td>=ROUND(SUM(M" + (ctr + start_first_row) + ",Q" + (ctr + start_first_row) + "),2)</td>";

                                if (ds.Tables[0].Rows[ctr]["contract_type"].ToString().Equals("1") || ds.Tables[0].Rows[ctr]["contract_type"].ToString().Equals("4"))
                                {
                                    sqr_fit_columns = "";
                                    handling = "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()), 2) + "</td>";
                                    handling_tot = "<td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>= ROUND(SUM(N" + start_first_row + ": N" + (ctr + start_first_row) + "), 2) </td>";
                                    grand_total = "<td>=ROUND(SUM(K" + (ctr + start_first_row) + ",O" + (ctr + start_first_row) + "),2)</td>";

                                }

                            }
                            string machine_rental = "";
                            if (ds.Tables[0].Rows[ctr]["machine_rental_applicable"].ToString().Equals("1"))
                            {
                                machine_rental = "<td>" + ds.Tables[0].Rows[ctr]["machine_rental_amount"].ToString() + "</td>";
                                grand_total = "<td>=ROUND(SUM(L" + (ctr + start_first_row) + ",P" + (ctr + start_first_row) + "),2)</td>";
                            }

                            if (state_name != ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper())
                            {
                                if (state_name != "")
                                {

                                    i3 = i3 + 1;

                                    lc.Text = lc.Text + "<tr><b><td align=center colspan = 7>Total</td><td>" + sub_total + "</td><td>" + total1 + "</td><td>" + handl + "</td><td>" + handltotal + "</td><td>" + cgst + "</td><td>" + sgst + "</td><td>" + igst + "</td><td>" + gst + "</td><td>" + grand_tot3 + "</td></b></tr>";

                                    if (ds.Tables[0].Rows[ctr]["machine_rental_applicable"].ToString().Equals("1"))
                                    {
                                        lc.Text = lc.Text + "<tr><b><td align=center colspan = 7>Total</td><td>" + sub_total + "</td><td>" + total1 + "</td><td>" + handl + "</td><td>" + handltotal + "</td><td>" + cgst + "</td><td>" + sgst + "</td><td>" + igst + "</td><td>" + gst + "</td><td>" + grand_tot3 + "</td></b></tr>";
                                    }
                                    else if (ds.Tables[0].Rows[ctr]["CLIENT_CODE"].ToString().Equals("RBL"))
                                    {
                                        lc.Text = lc.Text + "<tr><b><td align=center colspan = 7>Total</td><td>" + rate + "</td><td>" + material_area + "</td><td>" + sub_total + "</td><td>" + total1 + "</td><td>" + handl + "</td><td>" + handltotal + "</td><td>" + cgst + "</td><td>" + sgst + "</td><td>" + igst + "</td><td>" + gst + "</td><td>" + grand_tot3 + "</td></b></tr>";
                                    }

                                    ctr1 = ctr + i3 + 1;
                                    state_change = 1;
                                    sub_total = 0; machine_rate_amt = 0; total1 = 0; cgst = 0; sgst = 0; handl = 0; handltotal = 0; igst = 0; gst = 0; grand_tot = 0; total1 = 0; rate = 0; material_area = 0; grand_tot3 = 0;

                                }

                            }
                            state_name = ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper();

                            grand_tot = 0;

                            sub_total = sub_total + double.Parse(ds.Tables[0].Rows[ctr]["sub_total"].ToString());
                            rate = rate + double.Parse(ds.Tables[0].Rows[ctr]["rate"].ToString());
                            material_area = material_area + double.Parse(ds.Tables[0].Rows[ctr]["material_area"].ToString());
                            machine_rate_amt = machine_rate_amt + double.Parse(ds.Tables[0].Rows[ctr]["machine_rental_amount"].ToString());
                            total1 = total1 + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString());
                            handl = handl + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString());
                            handltotal = handltotal + (double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()));
                            cgst = cgst + double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString());
                            sgst = sgst + double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString());
                            igst = igst + double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString());
                            gst = gst + ((double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString())));
                            grand_tot = grand_tot + ((double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString())) + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString())));
                            grand_tot3 = grand_tot3 + grand_tot;

                            if (ds.Tables[0].Rows[ctr]["material_contract"].ToString().Equals("3"))
                            {
                                lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["fromtodate"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["material_name"] + "</td><td>" + ds.Tables[0].Rows[ctr]["rate"] + "</td><td>" + ds.Tables[0].Rows[ctr]["quantity"] + "</td>" + machine_rental + "<td>" + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + "</td>" + handling + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>" + grand_tot + "</td></tr>");
                            }
                            else
                            {
                                lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["fromtodate"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"].ToString() + "</td>" + sqr_fit_columns + "<td>" + double.Parse(ds.Tables[0].Rows[ctr]["sub_total"].ToString()) + "</td>" + machine_rental + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()), 2) + "</td>" + handling + "<td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>" + grand_tot + "</td></tr>");
                            }

                            sub_total1 = sub_total1 + double.Parse(ds.Tables[0].Rows[ctr]["sub_total"].ToString());
                            machine_rate_amt1 = machine_rate_amt1 + double.Parse(ds.Tables[0].Rows[ctr]["machine_rental_amount"].ToString());
                            total2 = total2 + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString());
                            handl1 = handl1 + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString());
                            handltotal1 = handltotal1 + (double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()));
                            cgst1 = cgst1 + double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString());
                            sgst1 = sgst1 + double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString());
                            igst1 = igst1 + double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString());
                            gst1 = gst1 + ((double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString())));
                            grand_tot1 = grand_tot1 + ((double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString())) + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + (double.Parse(ds.Tables[0].Rows[ctr]["cgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["sgst"].ToString())) + (double.Parse(ds.Tables[0].Rows[ctr]["igst"].ToString())));


                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                if (!ds.Tables[0].Rows[ctr]["CLIENT_CODE"].ToString().Equals("RBL"))
                                {

                                    if (ds.Tables[0].Rows[ctr]["contract_type"].ToString().Equals("1") || ds.Tables[0].Rows[ctr]["contract_type"].ToString().Equals("4"))
                                    {


                                        if (ds.Tables[0].Rows[ctr]["machine_rental_applicable"].ToString().Equals("1"))
                                        {
                                            //lc.Text = lc.Text + "<td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td>";
                                            //lc.Text = lc.Text + "<td>" + machine_rate_amt + "</td>";
                                            lc.Text = lc.Text + "<tr><b><td align=center colspan = 7>Total</td><td>" + sub_total + "</td><td>" + machine_rate_amt + "</td><td>" + total1 + "</td><td>" + handl + "</td><td> " + handltotal + "</td><td>" + cgst + "</td><td>" + sgst + "</td><td>" + igst + "</td><td>" + gst + "</td><td>" + grand_tot3 + "</td></b></tr>";
                                        }
                                        else
                                        {
                                            // lc.Text = lc.Text + "<tr><b><td align=center colspan=7>Total</td><td>=ROUND(SUM(H" + start_first_row + ":H" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(I" + start_first_row + ":I" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(J" + start_first_row + ":J" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(P" + start_first_row + ":P" + (ctr + start_first_row) + "),2)</td>";
                                            lc.Text = lc.Text + "<tr><b><td align=center colspan = 7>Total</td><td>" + sub_total + "</td><td>" + total1 + "</td><td>" + handl + "</td><td> " + handltotal + "</td><td>" + cgst + "</td><td>" + sgst + "</td><td>" + igst + "</td><td>" + gst + "</td><td>" + grand_tot3 + "</td></b></tr>";

                                        }
                                        if (state_change == 1)
                                        {
                                            lc.Text = lc.Text + "<tr><b><td align=center colspan = 7>Grand Total</td><td>" + sub_total1 + "</td><td>" + total2 + "</td><td>" + handl1 + "</td><td> " + handltotal1 + "</td><td>" + cgst1 + "</td><td>" + sgst1 + "</td><td>" + igst1 + "</td><td>" + gst1 + "</td><td>" + grand_tot1 + "</td></b></tr>";

                                        }

                                        // lc.Text = lc.Text + "</b></tr>";
                                    }
                                    else if (ds.Tables[0].Rows[ctr]["material_contract"].ToString().Equals("3"))
                                    {
                                        lc.Text = lc.Text + "<tr><b><td align=center colspan=8>Total</td><td>=ROUND(SUM(I" + start_first_row + ":I" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(J" + start_first_row + ":J" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(P" + start_first_row + ":P" + (ctr + start_first_row) + "),2)</td>";
                                        if (ds.Tables[0].Rows[ctr]["machine_rental_applicable"].ToString().Equals("1"))
                                        {
                                            lc.Text = lc.Text + "<td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td>";
                                        }
                                        lc.Text = lc.Text + handling_tot + "</b></tr>";
                                    }
                                    else
                                    {

                                        lc.Text = lc.Text + "<tr><b><td align=center colspan=7>Total</td><td>=ROUND(SUM(H" + start_first_row + ":H" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(I" + start_first_row + ":I" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(J" + start_first_row + ":J" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(P" + start_first_row + ":P" + (ctr + start_first_row) + "),2)</td>";
                                        if (ds.Tables[0].Rows[ctr]["machine_rental_applicable"].ToString().Equals("1"))
                                        {
                                            lc.Text = lc.Text + "<td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td>";
                                        }
                                        lc.Text = lc.Text + handling_tot + "</b></tr>";

                                    }
                                }
                                else
                                {
                                    lc.Text = lc.Text + "<tr><b><td align=center colspan = 7>Total</td><td>" + rate + "</td><td>" + material_area + "</td><td>" + sub_total + "</td><td>" + total1 + "</td><td>" + cgst + "</td><td>" + sgst + "</td><td>" + igst + "</td><td>" + gst + "</td><td>" + grand_tot3 + "</td></b></tr>";
                                    // lc.Text = lc.Text + "<tr><b><td align=center colspan=7>Total</td><td>=ROUND(SUM(H" + start_first_row + ":H" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(I" + start_first_row + ":I" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(J" + start_first_row + ":J" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(P" + start_first_row + ":P" + (ctr + start_first_row) + "),2)</td>";
                                    if (ds.Tables[0].Rows[ctr]["machine_rental_applicable"].ToString().Equals("1"))
                                    {
                                        lc.Text = lc.Text + "<td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td>";
                                    }
                                    lc.Text = lc.Text + handling_tot + "</b></tr>";
                                }
                            }
                        }
                    }
                    else if (i == 3)
                    {
                        int start_first_row = 4;
                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["CLIENT"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"].ToString() + "</td><td>" + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + "</td><td>" + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>=ROUND(SUM(J" + (ctr + start_first_row) + ",N" + (ctr + start_first_row) + "),2)</td></tr>");
                        if (ds.Tables[0].Rows.Count == ctr + 1)
                        {
                            lc.Text = lc.Text + "<tr><b><td align=center colspan=7>Total</td><td>=ROUND(SUM(H" + start_first_row + ":H" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(I" + start_first_row + ":I" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(J" + start_first_row + ":J" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M2:M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td></b></tr>";
                        }

                    }
                    else if (i == 4)
                    {
                        int start_first_row = 4;
                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + invoice + "</td><td>" + bill_date + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Client_branch_code"].ToString() + "</td><td>" + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + "</td><td>" + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>=ROUND(SUM(I" + (ctr + start_first_row) + ",M" + (ctr + start_first_row) + "),2)</td></tr>");
                        if (ds.Tables[0].Rows.Count == ctr + 1)
                        {
                            lc.Text = lc.Text + "<tr><b><td align=center colspan=6>Total</td><td>=ROUND(SUM(G" + start_first_row + ":G" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(H" + start_first_row + ":H" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(I" + start_first_row + ":I" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(J" + start_first_row + ":J" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(K2:K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td></b></tr>";
                        }

                    }
                    else if (i == 1)
                    {
                        int start_first_row = 4;
                        if (!ds.Tables[0].Rows[ctr]["conveyance_type"].ToString().Equals("3"))
                        {
                            km_per_rate_value = "<td>" + double.Parse(ds.Tables[0].Rows[ctr]["Conveyance_PerKmRate"].ToString()) + "</td><td>" + double.Parse(ds.Tables[0].Rows[ctr]["conveyance_km"].ToString()) + "</td>";
                            col1 = "O"; col2 = "S";
                        }
                        else { col1 = "M"; col2 = "Q"; }
                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["fromtodate"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["CLIENT"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["client_branch_code"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["EMP_NAME"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["designation"].ToString().ToUpper() + "</td>" + km_per_rate_value + "<td>" + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + "</td><td>" + double.Parse(ds.Tables[0].Rows[ctr]["Service_Charge"].ToString()) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["Service_Charge"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>=ROUND(SUM(" + col1 + "" + (ctr + start_first_row) + "," + col2 + "" + (ctr + start_first_row) + "),2)</td></tr>");
                        if (ds.Tables[0].Rows.Count == ctr + 1)
                        {
                            if (!ds.Tables[0].Rows[ctr]["conveyance_type"].ToString().Equals("3"))
                            {

                                lc.Text = lc.Text + "<tr><b><td align=center colspan=10>Total</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N2:N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(P" + start_first_row + ":P" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(R" + start_first_row + ":R" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(S" + start_first_row + ":S" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(T" + start_first_row + ":T" + (ctr + start_first_row) + "),2)</td></b></tr>";
                            }
                            else
                            {
                                lc.Text = lc.Text + "<tr><b><td align=center colspan=10>Total</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(M" + start_first_row + ":M" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(P" + start_first_row + ":P" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(R" + start_first_row + ":R" + (ctr + start_first_row) + "),2)</td></tr>";
                                //lc.Text = lc.Text + "<tr><b><td align=center colspan=9>Total</td><td>=ROUND(SUM(H2:H" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(I2:I" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(J2:J" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(K2:K" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(L2:L" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(M2:M" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(N2:N" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(O2:O" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(P2:P" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(Q2:Q" + (ctr + 2) + "),2)</td></b></tr>";
                            }
                        }
                    }
                    else if (i == 6)
                    {
                        int start_first_row = 4;
                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>'" + ds.Tables[0].Rows[ctr]["bill_invoice_no"].ToString() + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["fromtodate"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["CLIENT"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_code"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["STATE_NAME"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["EMP_NAME"].ToString() + "</td><td>" + ds.Tables[0].Rows[ctr]["designation"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["food_allowance_rate"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["food_allowance_days"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["food_total"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["outstation_allowance_rate"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["outstation_allowance_days"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["out_total"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["outstation_food_allowance_rate"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["outstation_food_allowance_days"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["out_food_total"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["night_halt_rate"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["night_halt_days"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["night_total"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["km_rate"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["kms"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["km_total"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Subtotal_A"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Service_Charge"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["sub_total"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["SGST"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["CGST"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["IGST"].ToString().ToUpper() + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["sub_total"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["CGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["SGST"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGST"].ToString()), 2) + "</td></tr>");
                        if (ds.Tables[0].Rows.Count == ctr + 1)
                        {
                            lc.Text = lc.Text + "<tr><b><td align=center colspan = 10>Total</td><td>=ROUND(SUM(K" + start_first_row + ":K" + (ctr + start_first_row) + "),2)<td>=ROUND(SUM(L" + start_first_row + ":L" + (ctr + start_first_row) + "),2)</td><td></td><td>=ROUND(SUM(N" + start_first_row + ":N" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(O" + start_first_row + ":O" + (ctr + start_first_row) + "),2)</td><td></td><td>=ROUND(SUM(Q" + start_first_row + ":Q" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(R" + start_first_row + ":R" + (ctr + start_first_row) + "),2)</td><td></td><td>=ROUND(SUM(T" + start_first_row + ":T" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(U" + start_first_row + ":U" + (ctr + start_first_row) + "),2)</td><td></td><td>=ROUND(SUM(W" + start_first_row + ":W" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(X" + start_first_row + ":X" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(Y" + start_first_row + ":Y" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(Z" + start_first_row + ":Z" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AA" + start_first_row + ":AA" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AB" + start_first_row + ":AB" + (ctr + start_first_row) + "),2)</td><td></td><td></td><td>=ROUND(SUM(AE" + start_first_row + ":AE" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AF" + start_first_row + ":AF" + (ctr + start_first_row) + "),2)</td><td>=ROUND(SUM(AG" + start_first_row + ":AG" + (ctr + start_first_row) + "),2)</td></b></tr>";
                        }

                    }
                    ctr++;
                    break;
                case ListItemType.Footer:
                    lc = new LiteralControl("</table>");
                    ctr = 0;
                    break;
            }
            container.Controls.Add(lc);
        }
    }

    protected void btn_conveyance_Click(object sender, EventArgs e)
    {
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        hidtab.Value = "2";
        string where = "",delete_where="";
        string sql = "";
        string query = "", invoice = null, bill_date = null;
        int month = int.Parse(txt_month_year.Text.Substring(0, 2));
        string start_date_common = get_start_date();
        DateTimeFormatInfo mfi = new DateTimeFormatInfo();
        string month_name = mfi.GetMonthName(int.Parse(txt_month_year.Text.Substring(0, 2))).ToString();

        gv_con_emp_approve_load();
        where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "'  and conveyance='emp_conveyance'  ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' and conveyance='emp_conveyance' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.state = '" + ddl_billing_state.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "'  and conveyance='emp_conveyance'";

        }
        string unit = d.getsinglestring("SELECT DISTINCT GROUP_CONCAT(DISTINCT pay_billing_material_history.unit_name) FROM pay_conveyance_amount_history INNER JOIN pay_client_master ON pay_conveyance_amount_history.client_code = pay_client_master.client_code INNER JOIN pay_unit_master ON pay_unit_master.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_unit_master.unit_code = pay_conveyance_amount_history.unit_code INNER JOIN pay_billing_material_history ON pay_billing_material_history.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_billing_material_history.unit_code = pay_conveyance_amount_history.unit_code AND pay_billing_material_history.month = pay_conveyance_amount_history.month AND pay_billing_material_history.year = pay_conveyance_amount_history.year WHERE " + where + "   AND (pay_conveyance_amount_history.conveyance_flag = 1 || pay_conveyance_amount_history.conveyance_flag = 3) AND pay_billing_material_history.invoice_flag = 0 AND pay_conveyance_amount_history.con_emp_status IS NOT NULL ORDER BY pay_billing_material_history.unit_name");
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Employee Conveyance not Approved by Finance for Branch : " + unit + "');", true);
            return;

        }

        //invoice and bill date 
        string invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text, 1, ddlregion.SelectedValue, billing_type.SelectedValue);

        if (invoice_bill_date.Equals(""))
        {
            invoice = "";
            bill_date = "";
        }
        else
        {
            var invoice_bill = invoice_bill_date.Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
            invoice = invoice_bill[0].ToString();
            bill_date = invoice_bill[1].ToString();
        }
        int month1 = int.Parse(txt_month_year.Text.Substring(0, 2)) - 1;
        int year = int.Parse(txt_month_year.Text.Substring(3));
        if (month1 == 0) { month1 = 12; year = year - 1; }

        string daterange = "concat(upper(DATE_FORMAT(str_to_date('" + year + "-" + month + "-01','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(LAST_DAY('" + year + "-" + month + "-01'), '%d %b %Y'))) as start_end_date";
        if (start_date_common != "" && start_date_common != "1")
        {
            daterange = "concat(upper(DATE_FORMAT(str_to_date('" + year + "-" + ((month == 1) ? 12 : (int.Parse(txt_month_year.Text.Substring(0, 2)) - 1)) + "-" + start_date_common + "','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-" + (int.Parse(start_date_common) - 1) + "','%Y-%m-%d'), '%d %b %Y'))) as start_end_date";
        }

        string where1 = "", where_state = "";
        if (ddl_billing_state.SelectedValue.Equals("Maharashtra") && ddl_client.SelectedValue.Equals("BAGIC") && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020) { where_state = " and state='" + ddl_billing_state.SelectedValue + "' and billingwise_id = 5"; }
        //if (!ddl_billing_state.SelectedValue.Equals("ALL")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "'"; }
        if (d.getsinglestring("select billingwise_id from pay_client_billing_details where  client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
        {
            where_state = " and zone = '" + ddlregion.SelectedValue + "'";
            //material_where_state = " and pay_billing_unit_rate_history.zone = '" + ddlregion.SelectedValue + "'";
        }
        else
        { where_state = ""; }
        delete_where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'   and Type = 'Conveyance' ";
        where = "where pay_billing_material_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code= '" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'   and Type = 'Conveyance' ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = "where pay_billing_material_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code= '" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'   and Type = 'Conveyance' ";
            delete_where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'   and Type = 'Conveyance' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = "where pay_billing_material_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'   and Type = 'Conveyance' ";
            delete_where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'   and Type = 'Conveyance' ";
        }

        // rahul add Gst_to_be type  start

        string gst_to_be = d.getsinglestring("  select  DISTINCT (`Gst_to_be`) as 'Gst_to_be' from pay_unit_master where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'");
        // end

        if (!d.getsinglestring("select max(conveyance_type) FROM pay_billing_material_history " + where + " and conveyance_type=3 limit 1").Equals("3"))
        {
            crystalReport.Load(Server.MapPath("~/client_bill_invoice_conveyance.rpt"));
            where1 = where;
            where = where + where_state + " AND Conveyance_PerKmRate > 0 and conveyance_type != '100' GROUP by state_name ";
            query = "SELECT  pay_billing_material_history.comp_code ,  COMPANY_NAME ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  COMP_STATE as 'STATE',  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  STATE_NAME ,  UNIT_full_ADD1 as  'UNIT_ADD1' ,  invoice_shipping_address AS 'UNIT_ADD2' ,  UNIT_CITY ,  UNIT_NAME ,  client  AS 'other',  unit_gst_no ,  grade_desc  AS 'designation',  " + daterange + ",   concat('" + month_name + "',' ' ,'" + txt_month_year.Text.Substring(3) + "') AS 'month' ,  housekeeiing_sac_code ,  Security_sac_code , IF( conveyance_applicable  = 1,  Conveyance_PerKmRate , 0) AS 'grand_total', SUM(IF( conveyance_applicable  = 1 AND  conveyance_type  = 2, ( Conveyance_PerKmRate  *  conveyance_km ),  conveyance_rate )) AS 'total', IF( conveyance_service_charge  = 1,  conveyance_service_charge_per , 0) AS 'Expr1', IF( conveyance_service_charge  = 1,  conveyance_service_amount , 0) AS 'hrs_12_ot', SUM(IF( conveyance_type  = 1, ( conveyance_rate  /  Conveyance_PerKmRate ),  conveyance_km )) AS 'month_days',  unit_code  FROM pay_billing_material_history LEFT JOIN pay_client_billing_details ON pay_client_billing_details.comp_code = pay_billing_material_history.comp_code AND pay_client_billing_details.client_code = pay_billing_material_history.client_code AND pay_client_billing_details.STATE = pay_billing_material_history.state_name AND billing_name = 'Conveyance Billing' " + where;

            //For Report Table
            if (invoice_fl == 1)
            {
                sql = "SELECT comp_code, client_code, client, state_name, billing_date, auto_invoice_no, unit_gst_no,IF(grade_code = 'SG', Security_sac_code, housekeeiing_sac_code) AS 'sac_code', COUNT(emp_code) AS 'emp_count', month, year, 'conveyance' AS 'comp_code', SUM(IF(conveyance_applicable = 1 AND conveyance_type = 2, (Conveyance_PerKmRate * conveyance_km), conveyance_rate)) + (CASE WHEN IF(conveyance_service_charge = 1, conveyance_service_charge_per, 0) > 0 THEN ((SUM(IF(conveyance_applicable = 1 AND conveyance_type = 2, (Conveyance_PerKmRate * conveyance_km), conveyance_rate)) * IF(conveyance_service_charge = 1, conveyance_service_charge_per, 0)) / 100) ELSE IF(conveyance_service_charge = 1, conveyance_service_amount, 0) END) AS 'total', SUM(cgst) AS 'cgst', SUM(sgst) AS 'agst', SUM(igst) AS 'igst','" + gst_to_be + "' FROM pay_billing_material_history  " + where;
                d.operation("delete from pay_report_gst " + delete_where + "");
                d.operation("insert into pay_report_gst (comp_code,client_code,client_name,state_name,invoice_date, invoice_no, gst_no,sac_code,emp_count, month, year,type, Amount, cgst, sgst, igst,gst_to_be) " + sql);
            }

        }
        else
        {
            crystalReport.Load(Server.MapPath("~/client_bill_invoice_conveyance_empwise.rpt"));
            where1 = where;
            where = where + where_state + " and conveyance_type != '100' GROUP by state_name ";
            query = "SELECT  pay_billing_material_history.comp_code ,  COMPANY_NAME ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  COMP_STATE as 'STATE',  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  STATE_NAME ,  UNIT_full_ADD1 as  'UNIT_ADD1' ,  invoice_shipping_address AS 'UNIT_ADD2' ,  UNIT_CITY ,  UNIT_NAME ,  client  AS 'other',  unit_gst_no ,  grade_desc  AS 'designation',  " + daterange + ",   concat('" + month_name + "',' ' ,'" + txt_month_year.Text.Substring(3) + "') AS 'month' ,  housekeeiing_sac_code ,  Security_sac_code , count(emp_code) AS 'grand_total', SUM(IF( conveyance_applicable  = 1 AND  conveyance_type  = 2, ( Conveyance_PerKmRate  *  conveyance_km ),  conveyance_rate )) AS 'total', IF( conveyance_service_charge  = 1,  conveyance_service_charge_per , 0) AS 'Expr1', IF( conveyance_service_charge  = 1,  conveyance_service_amount , 0) AS 'hrs_12_ot', SUM(IF( conveyance_type  = 1, ( conveyance_rate  /  Conveyance_PerKmRate ),  conveyance_km )) AS 'month_days',  unit_code  FROM pay_billing_material_history LEFT JOIN pay_client_billing_details ON pay_client_billing_details.comp_code = pay_billing_material_history.comp_code AND pay_client_billing_details.client_code = pay_billing_material_history.client_code AND pay_client_billing_details.STATE = pay_billing_material_history.state_name AND billing_name = 'Conveyance Billing'" + where;

            //For Report Table
            if (invoice_fl == 1)
            {
                sql = "SELECT comp_code, client_code, client, state_name, billing_date, auto_invoice_no, unit_gst_no,IF(grade_code = 'SG', Security_sac_code, housekeeiing_sac_code) AS 'sac_code', COUNT(emp_code) AS 'emp_count', month, year, 'conveyance' AS 'comp_code', SUM(IF(conveyance_applicable = 1 AND conveyance_type = 2, (Conveyance_PerKmRate * conveyance_km), conveyance_rate)) + (CASE WHEN IF(conveyance_service_charge = 1, conveyance_service_charge_per, 0) > 0 THEN ((SUM(IF(conveyance_applicable = 1 AND conveyance_type = 2, (Conveyance_PerKmRate * conveyance_km), conveyance_rate)) * IF(conveyance_service_charge = 1, conveyance_service_charge_per, 0)) / 100) ELSE IF(conveyance_service_charge = 1, conveyance_service_amount, 0) END) AS 'total',SUM(cgst) AS 'cgst', SUM(sgst) AS 'agst', SUM(igst) AS 'igst','" + gst_to_be + "' FROM pay_billing_material_history  " + where;
                d.operation("delete from pay_report_gst " + delete_where + "");
                d.operation("insert into pay_report_gst (comp_code,client_code,client_name,state_name,invoice_date, invoice_no, gst_no, sac_code,emp_count, month, year,type, Amount, cgst, sgst, igst,gst_to_be) " + sql);
            }

        }

        ReportLoad(query, "Conveyance", invoice, bill_date);
    }
    protected void btn_final_conveyance_Click(object sender, EventArgs e)
    {
        hidtab.Value = "2";
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close
        gv_con_emp_approve_load();
        string where = "";
        where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' and conveyance ='emp_conveyance' ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "'and conveyance ='emp_conveyance' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.state = '" + ddl_billing_state.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' and conveyance ='emp_conveyance' ";

        }
        string unit = d.getsinglestring("SELECT DISTINCT GROUP_CONCAT(DISTINCT pay_billing_material_history.unit_name) FROM pay_conveyance_amount_history INNER JOIN pay_client_master ON pay_conveyance_amount_history.client_code = pay_client_master.client_code INNER JOIN pay_unit_master ON pay_unit_master.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_unit_master.unit_code = pay_conveyance_amount_history.unit_code INNER JOIN pay_billing_material_history ON pay_billing_material_history.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_billing_material_history.unit_code = pay_conveyance_amount_history.unit_code AND pay_billing_material_history.month = pay_conveyance_amount_history.month AND pay_billing_material_history.year = pay_conveyance_amount_history.year WHERE " + where + "     AND (pay_conveyance_amount_history.conveyance_flag = 1 || pay_conveyance_amount_history.conveyance_flag = 3 ) AND pay_billing_material_history.invoice_flag = 0 AND pay_conveyance_amount_history.con_emp_status IS NOT NULL ORDER BY pay_billing_material_history.unit_name");
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Employee Conveyance not Approved by Finance for Branch : " + unit + "');", true);
            return;

        }
        try
        {
            // paypro_no(1);
            material_invoice_flag(1);
            display_ClientBilling();
            invoice_fl = 1;
            btn_conveyance_Click(null, null);
            gv_con_emp_approve_load();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        { }
    }
    protected void btn_conveyance_fc_Click(object sender, EventArgs e)
    {
        ////suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        ////suraj close

        if (ddl_client.SelectedValue == "ALL")
        {

            string client_name = d1.getsinglestring("SELECT group_concat(distinct client) FROM pay_billing_material_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag = 0  and conveyance_type != 100 and  type = 'Conveyance'");
            string state_name = d1.getsinglestring("SELECT group_concat(distinct state_name) FROM pay_billing_material_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag = 0  and conveyance_type != 100 and type = 'Conveyance'");
            if ((!state_name.Equals("")) || (!state_name.Equals(""))) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Client : " + client_name + " And State : " + state_name + " Not Final So You Can Not Generate Finance Copy For ALL Client !!!');", true); return; }
        }
        gv_con_emp_approve_load();
        string where = "";

        where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' and conveyance= 'emp_conveyance' ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' and conveyance= 'emp_conveyance'";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.state = '" + ddl_billing_state.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' and conveyance= 'emp_conveyance'";

        }
        string unit = d.getsinglestring("SELECT DISTINCT GROUP_CONCAT(DISTINCT pay_billing_material_history.unit_name) FROM pay_conveyance_amount_history INNER JOIN pay_client_master ON pay_conveyance_amount_history.client_code = pay_client_master.client_code INNER JOIN pay_unit_master ON pay_unit_master.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_unit_master.unit_code = pay_conveyance_amount_history.unit_code INNER JOIN pay_billing_material_history ON pay_billing_material_history.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_billing_material_history.unit_code = pay_conveyance_amount_history.unit_code AND pay_billing_material_history.month = pay_conveyance_amount_history.month AND pay_billing_material_history.year = pay_conveyance_amount_history.year WHERE " + where + "    AND (pay_conveyance_amount_history.conveyance_flag = 1 || pay_conveyance_amount_history.conveyance_flag = 3 ) AND pay_billing_material_history.invoice_flag = 0 AND pay_conveyance_amount_history.con_emp_status IS NOT NULL ORDER BY pay_billing_material_history.unit_name");
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Empolyee Conveyance not Approved by Finance for Branch : " + unit + "');", true);
            return;

        }

        hidtab.Value = "2";
        material(1);
    }

    protected void btn_dc_Click(object sender, EventArgs e)
    {
        hidtab.Value = "3";
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close


        hidtab.Value = "3";
        string sql = "";
        string start_date_common = get_start_date();
        DateTimeFormatInfo mfi = new DateTimeFormatInfo();
        string month_name = mfi.GetMonthName(int.Parse(txt_month_year.Text.Substring(0, 2))).ToString();

        string invoice = null;
        string bill_date = null;
        string invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text, 3, ddlregion.SelectedValue, billing_type.SelectedValue);

        if (invoice_bill_date.Equals(""))
        {
            invoice = "";
            bill_date = "";
        }
        else
        {
            var invoice_bill = invoice_bill_date.Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
            invoice = invoice_bill[0].ToString();
            bill_date = invoice_bill[1].ToString();
        }

        // rahul add Gst_to_be type  start

        string gst_to_be = d.getsinglestring("  select  DISTINCT (`Gst_to_be`) as 'Gst_to_be' from pay_unit_master where comp_code='" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'");
        // end
        // string daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(LAST_DAY('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01'), '%d %b %Y'))) as start_end_date";
        //if (start_date_common != "" && start_date_common != "1")
        //{
        //    daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? 12 : (int.Parse(txt_month_year.Text.Substring(0, 2)) - 1)) + "-" + start_date_common + "','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-" + (int.Parse(start_date_common) - 1) + "','%Y-%m-%d'), '%d %b %Y'))) as start_end_date";
        //}
        string where = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and unit_code = '" + ddl_unitcode.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 AND dc_contract = 1  GROUP BY unit_code, designation  ORDER BY UNIT_NAME";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 AND dc_contract = 1 GROUP BY unit_code, designation ORDER BY UNIT_NAME";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = " pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and tot_days_present > 0 AND dc_contract = 1 GROUP BY unit_code, designation ORDER BY UNIT_NAME";
        }
        crystalReport.Load(Server.MapPath("~/client_bill_invoice_dc.rpt"));
        string query = "SELECT  pay_billing_material_history.comp_code ,  COMPANY_NAME ,  COMP_ADDRESS1  AS 'ADDRESS1',  COMP_ADDRESS2  AS 'ADDRESS2',  COMP_CITY  AS 'CITY',  COMP_STATE  AS 'STATE',  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  STATE_NAME ,  UNIT_full_ADD1 as  'UNIT_ADD1' ,  invoice_shipping_address AS 'UNIT_ADD2' ,  UNIT_CITY ,  UNIT_NAME ,  CLIENT  AS 'other',  unit_gst_no ,  grade_desc  AS 'designation',  fromtodate AS 'start_end_date',  concat('" + month_name + "' ,'  '," + txt_month_year.Text.Substring(3) + ") as 'month' ,  housekeeiing_sac_code ,  Security_sac_code ,  dc_area  AS 'month_days', IF( dc_contract  = 1,  dc_rate , 0) AS 'grand_total', IF( dc_contract  = 1 AND  dc_type  = 2, ( dc_rate  *  dc_area ),  dc_rate ) AS 'total', IF( dc_handling_charge  = 1,  dc_handling_percent , 0) AS 'Expr1',  unit_code  FROM  pay_billing_material_history LEFT JOIN pay_client_billing_details ON pay_client_billing_details.comp_code = pay_billing_material_history.comp_code AND pay_client_billing_details.client_code = pay_billing_material_history.client_code AND pay_client_billing_details.STATE = pay_billing_material_history.state_name AND billing_name = 'Deep Clean Billing' WHERE " + where;
        //for report_gst table
        if (invoice_fl_dep == 1)
        {
            sql = "SELECT comp_code, client_code, Client, STATE_NAME, billing_date, auto_invoice_no, unit_gst_no, sac_code, COUNT(emp_code) AS 'emp_count', month, year, 'deepclean' AS 'abc', SUM(grand_total) AS 'grand_total', SUM(cgst) AS 'cgst', SUM(sgst) AS 'agst', SUM(igst) AS 'igst','" + gst_to_be + "' FROM (SELECT comp_code, client_code, Client, STATE_NAME, billing_date, CASE WHEN invoice_flag != 0 AND month <= 3 AND year <= 2019 THEN IFNULL(auto_invoice_no, invoice_no) ELSE auto_invoice_no END AS 'auto_invoice_no', unit_gst_no, IF(grade_code = 'SG', Security_sac_code, housekeeiing_sac_code) AS 'sac_code', emp_code, month, year, IF(dc_contract = 1, dc_rate, 0) AS 'grand_total', cgst, sgst, igst FROM pay_billing_material_history WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' AND client_code = '" + ddl_client.SelectedValue + "' AND state_name = '" + ddl_billing_state.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2) + "' AND Year = '" + txt_month_year.Text.Substring(3) + "'  AND tot_days_present > 0 AND dc_contract = 1 GROUP BY unit_code, grade_code ORDER BY 2, 3) AS a GROUP BY a.state_name";
            d.operation("delete from pay_report_gst WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' AND client_code = '" + ddl_client.SelectedValue + "' AND state_name = '" + ddl_billing_state.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2) + "' AND Year = '" + txt_month_year.Text.Substring(3) + "' and type = 'deepclean' ");
            d.operation("insert into pay_report_gst (comp_code,client_code,client_name,state_name,invoice_date, invoice_no, gst_no,sac_code,emp_count, month, year,type, Amount, cgst, sgst, igst,gst_to_be) " + sql);
        }
        d.con1.Close();
        ReportLoad(query, "Deep Clean", invoice, bill_date);
    }
    protected void btn_dc_fc_Click(object sender, EventArgs e)
    {
        hidtab.Value = "3";
        //suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        //suraj close

        if (ddl_client.SelectedValue == "ALL")
        {
            string client_name = d1.getsinglestring("SELECT group_concat(distinct client) FROM pay_billing_material_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag = 0   and  type = 'DeepClean'");
            string state_name = d1.getsinglestring("SELECT group_concat(distinct state_name) FROM pay_billing_material_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag = 0  and type = 'DeepClean'");
            if ((!state_name.Equals("")) || (!state_name.Equals(""))) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Client : " + client_name + " And State : " + state_name + " Not Final So You Can Not Generate Finance Copy For ALL Client !!!');", true); return; }
        }
        material(3);
    }

    protected void btn_pestcontrol_fc_Click(object sender, EventArgs e)
    {
        hidtab.Value = "4";
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        hidtab.Value = "4";
        material(4);
    }


    //komal 23-05-19

    protected void material_billing()
    {
        grd_material_billing.DataSource = null;
        grd_material_billing.DataBind();
        //MySqlCommand cmd1 = new MySqlCommand("SELECT DISTINCT   pay_unit_master . UNIT_CITY  AS 'unit_code',   pay_unit_master . client_code ,   material_name ,   rate ,   handling_charges_amount ,   handling_percent ,   state ,   new_policy_name ,   start_date ,   end_date ,  pay_material_details . designation , pay_unit_master . unit_code  as 'unit_code1'FROM   pay_material_details     INNER JOIN  pay_unit_master  ON  pay_material_details . unit_code  =  pay_unit_master . UNIT_CODE  AND  pay_material_details . client_code  =  pay_unit_master . client_code WHERE  pay_material_details.client_code = '" + ddl_client.SelectedValue + "' AND  state  = '" + ddl_billing_state.SelectedValue + "' AND  pay_material_details . comp_code  = '" + Session["COMP_CODE"].ToString() + "' ORDER BY  unit_code  ASC", d.con);
        MySqlCommand cmd1 = new MySqlCommand("SELECT DISTINCT   pay_unit_master . UNIT_CITY  AS 'unit_code',   pay_unit_master . client_code ,   pay_material_details . material_name ,  pay_material_details . rate ,   pay_material_details . handling_charges_amount ,   pay_material_details . handling_percent ,  pay_material_details . state_name , pay_material_details . new_policy_name , pay_material_details . start_date ,  pay_material_details . end_date , pay_material_details . designation ,  pay_unit_master . unit_code  AS 'unit_code1', pay_material_details . Id ,pay_material_details.handling_applicable as 'handling_applicable', CASE  pay_material_billing_details . quantity  WHEN '' THEN '0' ELSE ifnull( pay_material_billing_details . quantity ,0) END AS 'quantity', pay_material_billing_details . month_year  FROM   pay_material_details  INNER JOIN  pay_unit_master  ON  pay_material_details . unit_code  =  pay_unit_master . UNIT_CODE  AND  pay_material_details . client_code  =  pay_unit_master . client_code  INNER JOIN pay_billing_master ON pay_material_details.unit_code = pay_billing_master.billing_UNIT_CODE AND pay_material_details.comp_code = pay_billing_master.comp_code AND material_contract = 3 LEFT JOIN pay_material_billing_details  ON  pay_material_details . unit_code  =  pay_material_billing_details . unit_code1   and  pay_material_details . client_code  =  pay_material_billing_details . client_code  and  pay_material_details . Id  =  pay_material_billing_details . Id_material  and pay_material_billing_details.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_material_billing_details.year = '" + txt_month_year.Text.Substring(3) + "' WHERE   pay_material_details . client_code  = '" + ddl_client.SelectedValue + "' AND  pay_material_details . state_name  = '" + ddl_billing_state.SelectedValue + "' AND  pay_material_details . comp_code  = '" + Session["COMP_CODE"].ToString() + "' ORDER BY  unit_code  ASC", d.con);
        d.con.Open();
        try
        {
            ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true);
            MySqlDataReader dr1 = cmd1.ExecuteReader();

            if (dr1.HasRows)
            {

                System.Data.DataTable dt2 = new System.Data.DataTable();
                dt2.Load(dr1);
                if (dt2.Rows.Count > 0)
                {

                    ViewState["grd_material_billing"] = dt2;
                }
                grd_material_billing.DataSource = dt2;
                grd_material_billing.DataBind();

            }
            string txt_month = d.getsinglestring("select  month_year  from pay_material_billing_details  where  pay_material_billing_details . client_code  = '" + ddl_client.SelectedValue + "' AND  pay_material_billing_details . state  = '" + ddl_billing_state.SelectedValue + "' AND  pay_material_billing_details . comp_code  = '" + Session["COMP_CODE"].ToString() + "'");
            //txt_month_year.Text = txt_month;

            dr1.Close();
        }
        catch (Exception ex) { throw ex; }
        finally
        {
            d.con.Close();
        }
    }


    protected void grd_material_billing_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        for (int i = 0; i < e.Row.Cells.Count; i++)
        {
            if (e.Row.Cells[i].Text == "&nbsp;")
            {
                e.Row.Cells[i].Text = "";
            }
        }

        e.Row.Cells[5].Visible = false;
        e.Row.Cells[6].Visible = false;
        e.Row.Cells[7].Visible = false;
        e.Row.Cells[8].Visible = false;
        e.Row.Cells[9].Visible = false;
        e.Row.Cells[10].Visible = false;
        e.Row.Cells[11].Visible = false;
        e.Row.Cells[12].Visible = false;
        e.Row.Cells[13].Visible = false;
    }



    protected void downloadfile(string filename, string unit_name)
    {

        var result = filename.Substring(filename.Length - 4);
        if (result.Contains("jpeg"))
        {
            result = ".jpeg";
        }
        try
        {


            string path2 = Server.MapPath("~\\approved_attendance_images\\" + filename);
            string unitName = unit_name + "-Attendance" + result;
            Response.Clear();
            Response.ContentType = "Application/pdf/jpg/jpeg/png/zip";
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + unitName);
            Response.TransmitFile("~\\approved_attendance_images\\" + filename);
            Response.WriteFile(path2);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
            Response.End();
            Response.Close();





        }
        catch (Exception ex) { }


    }

    protected void lnkDownload_Command(object sender, CommandEventArgs e)
    {

        string[] commandArgs = e.CommandArgument.ToString().Split(new char[] { ',' });
        string filename = commandArgs[0];
        string unit_name = commandArgs[1];

        if (filename != "")
        {
            downloadfile(filename, unit_name);
        }

        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attachment File Cannot Be Uploaded !!!')", true);
        }
    }




    protected void gv_approve_attendace_RowDataBound(object sender, GridViewRowEventArgs e)
    {

        Color color = System.Drawing.ColorTranslator.FromHtml("#90EE90");
        Color color1 = System.Drawing.ColorTranslator.FromHtml("#FF4C4C");
        Color color2 = System.Drawing.ColorTranslator.FromHtml("#FACC2E");

        //vinod for region
        string where_state = "";
        if (ddl_billing_state.SelectedValue.Equals("Maharashtra") && ddl_client.SelectedValue.Equals("BAGIC") && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020 && billing_type.SelectedValue.Equals("1")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "' and billingwise_id = 5"; }
        if (d.getsinglestring("select billingwise_id from pay_client_billing_details where client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
        {
            where_state = " and pay_billing_unit_rate_history.zone = '" + ddlregion.SelectedValue + "'";
        }
        else
        { where_state = ""; }
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (ddl_billing_state.SelectedValue != "ALL")
            {
                LinkButton lb1 = e.Row.FindControl("lnk_reject") as LinkButton;
                lb1.Visible = true;
                if (ddl_unitcode.SelectedValue != "ALL")
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_unit_rate_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "' " + where_state + "  AND unit_code = '" + ddl_unitcode.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        LinkButton lb4 = e.Row.FindControl("lnk_reject") as LinkButton;
                        lb4.Visible = false;
                    }
                    if (!d.getsinglestring("select flag from pay_attendance_reject_master where comp_code = '" + Session["COMP_CODE"].ToString() + "' and unit_code = '" + ddl_unitcode.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'").Equals(""))
                    {
                        e.Row.BackColor = color2;
                    }

                }
                else
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_unit_rate_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "' " + where_state + " AND unit_code in (SELECT unit_code FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND state_name = '" + ddl_billing_state.SelectedValue + "' AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) ORDER BY 1)  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        LinkButton lb4 = e.Row.FindControl("lnk_reject") as LinkButton;
                        lb4.Visible = false;
                    }
                    if (!d.getsinglestring("select flag from pay_attendance_reject_master where comp_code = '" + Session["COMP_CODE"].ToString() + "' and unit_code in(SELECT unit_code FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND state_name = '" + ddl_billing_state.SelectedValue + "' AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) ORDER BY 1) and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'").Equals(""))
                    {
                        e.Row.BackColor = color2;
                    }
                }

            }
            for (int i = 0; i < e.Row.Cells.Count; i++)
            {
                if (e.Row.Cells[i].Text == "&nbsp;")
                {
                    e.Row.Cells[i].Text = "";
                }
                if (e.Row.Cells[5].Text.ToUpper().Equals("APPROVE BY FINANCE"))
                {
                    e.Row.BackColor = color;
                }
                else if (e.Row.Cells[5].Text.ToUpper().Equals("REJECT BY FINANCE"))
                {
                    e.Row.BackColor = color1;
                }
            }
        }
        e.Row.Cells[6].Visible = false;
        e.Row.Cells[8].Visible = false;
        e.Row.Cells[9].Visible = false;
        e.Row.Cells[11].Visible = false;
        e.Row.Cells[12].Visible = false;
    }


    protected void lnk_approve_Command(object sender, CommandEventArgs e)
    {
        int result = 0;
        string unit_code = e.CommandArgument.ToString();


        string emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_billing_unit_rate_history where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");




        emp_code = emp_code.Replace(",", "','");

        result = d.operation("update pay_files_timesheet set flag = '2', status = 'Approve By Finance' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  ");
        // result = d.operation("update pay_files_timesheet_history set flag = '2' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and flag = '1' ");
        result = d.operation("update pay_attendance_muster set flag = '2' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "' and emp_code in ('" + emp_code + "')");
        //  result = d.operation("update pay_billing_unit_rate_history set flag = '2' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "'");
        d.operation("Update pay_attendance_reject_master set flag = 1 where comp_code = '" + Session["COMP_CODE"].ToString() + "' and unit_code = '" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");
        if (result > 0)
        {

            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendace Approved Successfully !!');", true);
        }


        attendance_status();
        gv_attendace_load();
    }

    protected void btn_approve_click(object sender, EventArgs e)
    {
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        int result = 0;
        string emp_code = null;
        string unit_code = null;
        foreach (GridViewRow gvrow in gv_approve_attendace.Rows)
        {
            unit_code = null;
            emp_code = null;
            unit_code = (string)gv_approve_attendace.DataKeys[gvrow.RowIndex].Value;


            var checkbox = gvrow.FindControl("chk_client") as System.Web.UI.WebControls.CheckBox;
            if (checkbox.Checked == true)
            {

                try
                {
                    emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_billing_unit_rate_history where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");




                    emp_code = emp_code.Replace(",", "','");
                    if (!emp_code.Equals(""))
                    {
                        result = d.operation("update pay_files_timesheet set flag = '2', status = 'Approve By Finance', reject_status='0' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  ");

                        result = d.operation("update pay_attendance_muster set flag = '2' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "' and emp_code in ('" + emp_code + "')");

                        d.operation("Update pay_attendance_reject_master set flag = 1 where comp_code = '" + Session["COMP_CODE"].ToString() + "' and unit_code = '" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {
                }
            }

        }
        if (result > 0)
        {

            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendace Approved Successfully !!');", true);
        }


        //attendance_status();
        Notification_panel.Visible = false;
        gv_attendace_load();
    }
    protected void lnk_reject_Command(object sender, CommandEventArgs e)
    {
        string unit_code = e.CommandArgument.ToString();
        int result = 0;
        if (d.getsinglestring("select distinct unit_code from pay_attendance_reject_master where month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and unit_code='" + unit_code + "' and flag = 0  ") != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendace Sheet Already Rejected !!');", true);
            // attendance_status();
            Notification_panel.Visible = false;
            gv_attendace_load();

            return;

        }

        string emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_attendance_muster where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and flag != 0");

        emp_code = emp_code.Replace(",", "','");




        if (!emp_code.Equals(""))
        {
            GridViewRow row = (GridViewRow)(((LinkButton)sender)).NamingContainer;
            string reject_reason = (row.FindControl("reject_reason") as System.Web.UI.WebControls.TextBox).Text;

            if (reject_reason != "")
            {
                d.operation("update pay_files_timesheet_history set flag = '1' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "' ");
                result = d.operation("insert into pay_attendance_reject_master(comp_code,client_code,unit_code,month,year,rejected_reason,rejected_date,rejected_by)values('" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + unit_code + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + reject_reason + "',now(),'" + Session["LOGIN_ID"].ToString() + "')");
                result = d.operation("insert into pay_files_timesheet_history (comp_code, client_code, unit_code, file_name, description, month, year, uploaded_by, uploaded_date,state)(select comp_code, client_code, unit_code, file_name, description, month, year, uploaded_by, uploaded_date,state from pay_files_timesheet where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' AND client_code='" + ddl_client.SelectedValue + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "')");
                d.operation("update pay_files_timesheet set flag = '1', status='Reject By Finance',reject_status='" + reject_reason + "' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "'");
                d.operation("update pay_attendance_muster set flag = '0' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "' and emp_code in ('" + emp_code + "')");
                result = 1;

            }
        }


        if (result > 0)
        {
            //   attendance_status();
            gv_attendace_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendace Rejected Successfully !!');", true);
        }
        else
        {

            // attendance_status();
            gv_attendace_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Enter Reason  !!');", true);
        }
        Notification_panel.Visible = false;
    }

    protected void gv_approve_attendace_PreRender(object sender, EventArgs e)
    {
        try
        {
            gv_approve_attendace.UseAccessibleHeader = false;
            gv_approve_attendace.HeaderRow.TableSection = TableRowSection.TableHeader;
        }
        catch { }
    }

    //attendance details MD CHANGE
    protected void attendance_info(object sender, EventArgs e)
    {
        hidtab.Value = "0";
        DataSet ds = new DataSet();
        ds = d.select_data("SELECT (SELECT client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code) AS 'client_name', state_name, unit_name, IFNULL(SUM(IF(employee_type = 'Reliever', 1, 0)), 0) AS 'Reliever', IFNULL(SUM(IF(employee_type = 'Permanent', 1, 0)), 0) AS 'Permanent',IFNULL(SUM(IF(employee_type = 'Temporary', 1, 0)), 0) AS 'Temporary', count(pay_attendance_muster.emp_code) AS 'attendance' FROM pay_unit_master LEFT JOIN pay_employee_master ON pay_unit_master.unit_code = pay_employee_master.unit_code AND pay_unit_master.comp_code = pay_employee_master.comp_code  and (left_date >= str_to_date('" + d.get_start_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text) + "','%d/%m/%Y') || left_date is null) and joining_date <=  str_to_date('" + d.get_end_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text) + "','%d/%m/%Y') LEFT JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code AND pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_attendance_muster.year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.flag = 2 WHERE pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' AND pay_unit_master.comp_code = '" + Session["COMP_CODE"].ToString() + "'   group by  pay_unit_master.unit_code order by client_name");
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        if (ds.Tables[0].Rows.Count > 0)
        {
            Response.Clear();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment;filename=Attendance_Details.xls");
            Response.Charset = "";
            Response.ContentType = "application/vnd.ms-excel";
            Repeater Repeater1 = new Repeater();
            Repeater1.DataSource = ds;
            Repeater1.HeaderTemplate = new MyTemplate2(ListItemType.Header, ds);
            Repeater1.ItemTemplate = new MyTemplate2(ListItemType.Item, ds);
            Repeater1.FooterTemplate = new MyTemplate2(ListItemType.Footer, null);
            Repeater1.DataBind();

            System.IO.StringWriter stringWrite = new System.IO.StringWriter();
            System.Web.UI.HtmlTextWriter htmlWrite = new HtmlTextWriter(stringWrite);
            Repeater1.RenderControl(htmlWrite);

            string style = @"<style> .textmode { } </style>";
            Response.Write(style);
            Response.Output.Write(stringWrite.ToString());
            Response.Flush();
            Response.End();
        }
        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('No Matching Records Found.');", true);
        }
    }

    private string SubString(System.Web.UI.WebControls.TextBox txt_month_year, int p1, int p2)
    {
        throw new NotImplementedException();
    }

    public class MyTemplate2 : ITemplate
    {

        ListItemType type;
        LiteralControl lc;
        DataSet ds;
        static int ctr;
        public MyTemplate2(ListItemType type, DataSet ds)
        {
            this.type = type;
            this.ds = ds;
            ctr = 0;
        }
        public void InstantiateIn(Control container)
        {

            switch (type)
            {
                case ListItemType.Header:
                    lc = new LiteralControl("<TABLE BORDER=1><TR><TH>CLIENT NAME</TH><TH>STATE NAME</TH><TH>BRANCH NAME</TH><TH>PERMANAT EMP COUNT</TH><TH>RELIVER EMP COUNT</TH><TH>TEMPORARY EMP COUNT</TH><TH>EMPLOYEE ATTENDACE COUNT </TH></TR>");
                    break;
                case ListItemType.Item:
                    string color = "";
                    if (ds.Tables[0].Rows[ctr]["Permanent"].ToString() == "0" && ds.Tables[0].Rows[ctr]["Reliever"].ToString() == "0" && ds.Tables[0].Rows[ctr]["Temporary"].ToString() == "0" && ds.Tables[0].Rows[ctr]["attendance"].ToString() == "0") { color = "red"; } else { color = "white"; }
                    lc = new LiteralControl("<tr><td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["client_name"] + " </td><td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["state_name"] + "</td><td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["unit_name"] + "</td><td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["Permanent"] + "</td><td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["Reliever"] + "</td><td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["Temporary"] + "</td><td bgcolor=" + color + ">" + ds.Tables[0].Rows[ctr]["attendance"] + " </td></tr>");
                    ctr++;
                    break;
                case ListItemType.Footer:
                    lc = new LiteralControl("</table>");
                    ctr = 0;
                    break;
            }
            container.Controls.Add(lc);
        }
    }

    protected void gv_load_deployment()
    {
        try
        {
            DataSet ds = new DataSet();
            string where = "", where1 = "";
            where = "comp_code  = '" + Session["COMP_CODE"].ToString() + "' AND  client_code  = '" + ddl_client.SelectedValue + "'";
            where1 = "comp_code  = '" + Session["COMP_CODE"].ToString() + "' AND  client_code  = '" + ddl_client.SelectedValue + "' AND (LEFT_DATE >= str_to_date('" + d.get_start_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text) + "','%d/%m/%Y') || left_date IS NULL) AND joining_date <= str_to_date('" + d.get_end_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text) + "','%d/%m/%Y')";
            if (ddl_billing_state.SelectedValue != "ALL")
            {

                where = "comp_code  = '" + Session["COMP_CODE"].ToString() + "' AND  client_code  = '" + ddl_client.SelectedValue + "' and state_name='" + ddl_billing_state.SelectedValue + "'";
                where1 = "comp_code  = '" + Session["COMP_CODE"].ToString() + "' AND  client_code  = '" + ddl_client.SelectedValue + "' and client_wise_state='" + ddl_billing_state.SelectedValue + "' AND (LEFT_DATE >= str_to_date('" + d.get_start_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text) + "','%d/%m/%Y') || left_date IS NULL) AND joining_date <= str_to_date('" + d.get_end_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, txt_month_year.Text) + "','%d/%m/%Y')";
            }
            ds = d.select_data("SELECT (select client_name from pay_client_master where client_code= '" + ddl_client.SelectedValue + "') as 'client_name', pay_unit_master . STATE_NAME ,  UNIT_NAME,unit_code   FROM  pay_unit_master  WHERE   " + where + " AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) AND  unit_code  NOT IN (SELECT DISTINCT  unit_code  FROM  pay_employee_master  WHERE  " + where1 + ") and deployment_flag != 2");

            gv_deployment.DataSource = null;
            gv_deployment.DataBind();
            if (ds.Tables[0].Rows.Count > 0)
            {
                gv_deployment.DataSource = ds.Tables[0];
                gv_deployment.DataBind();
                gv_deployment_panel.Visible = true;
            }
            ds.Dispose();
        }
        catch (Exception ex) { throw ex; }
        finally { }
    }

    protected void lnk_deployment_Command(object sender, CommandEventArgs e)
    {
        int result = 0;
        string unit_code = e.CommandArgument.ToString();

        result = d.operation("update pay_unit_master set deployment_flag = '2' , unit_month='" + txt_month_year.Text.Substring(0, 2) + "' , unit_year ='" + txt_month_year.Text.Substring(3) + "' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "'");



        ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Branch  Approved Successfully !!');", true);


        gv_load_deployment();
        // attendance_status();
        Notification_panel.Visible = false;

    }
    protected void lnk_hold_Command(object sender, CommandEventArgs e)
    {
        int result = 0;
        string unit_code = e.CommandArgument.ToString();

        result = d.operation("update pay_unit_master set deployment_flag = '0' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "'");


        ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Branch  Are Hold !!');", true);
        gv_load_deployment();
        //  attendance_status();
        Notification_panel.Visible = false;

    }




    protected void btn_final_invoice_Click(object sender, EventArgs e)
    {
        hidtab.Value = "0";

        if (ddl_billing_state.SelectedValue == "ALL")
        {
            zip_files();
            return;
        }

        gv_attendace_load();
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        string unit = d.check_attendance_approve(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 2, ddlregion.SelectedValue);
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendance not Approved by Finance for Branch : " + unit + "');", true);
            return;

        }

        string where_state = "";
        if (!ddl_billing_state.SelectedValue.Equals("ALL")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "'"; }
        if (ddl_billing_state.SelectedValue.Equals("Maharashtra") && ddl_client.SelectedValue.Equals("BAGIC") && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020 && billing_type.SelectedValue.Equals("1")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "' and billingwise_id = 5"; }
        if (d.getsinglestring("select billingwise_id from pay_client_billing_details where client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
        {
            where_state = " and pay_unit_master.zone = '" + ddlregion.SelectedValue + "'";
        }
        else
        { where_state = ""; }


        string branch = d.check_branch_deployment(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 2, ddlregion.SelectedValue);
        if (branch != "")
        {
            gv_load_deployment();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Check  This  Branch : " + branch + " Having No Deployment');", true);
            return;

        }




        // paypro_no(0);
        final_invoice_flag(billing_type.SelectedValue);
        display_ClientBilling();
        gv_attendace_load();
        invoice_fl_man = 1;
        btn_invoice_rpt_Click(null, null);
        //btn_approve.Visible = false;
    }


    protected void final_invoice_flag(string billing_type1)
    {
        string billing_type = "And (bill_type is null || bill_type ='')", bill_type = "and billing_type = 'Manpower'", bill = "'Manpower'";
        string arrear_flag = "";
        if (arrears_invoice == 1) { billing_type = "and bill_type = 'Arrears_bill'"; bill_type = "and billing_type = 'Arrears_bill' "; bill = "'Arrears_bill'"; arrear_flag = " pay_billing_unit_rate_history_arrears as "; }
        if (ot_invoice == 1) { billing_type = "and hdfc_type = 'ot_bill'"; bill_type = "and billing_type = 'ot_bill' "; bill = "'ot_bill'"; }
        if (ot_invoice != 1 && arrears_invoice != 1 && ddl_client.SelectedValue == "HDFC") { billing_type = "and hdfc_type = 'manpower_bill'"; }
        string invoice_history_Where_clause = " where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code =  '" + ddl_unitcode.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and invoice_type = '" + ddl_invoice_type.SelectedValue + "' and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' and designation = '" + ddl_designation.SelectedValue + "' " + bill_type;

        int result = 0;
        string where = "", where1 = "", unit_code = "", grade = "", emp_code = "", bill_from_to_date = "and start_date = '0' and end_date = '0'", auto_invoice_no = "";
        string invoice_clause = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'";
        if (ddl_invoice_type.SelectedValue == "2")
        {
            grade = " and pay_billing_unit_rate_history.grade_code = '" + ddl_designation.SelectedValue + "'";
        }
        //vikas add fro arrears
        string month = "";
        string year = "";

        if (arrears_invoice == 1)
        {
            bill_from_to_date = "";
            month = "  and month in (" + month_list2 + ")";
            year = " and year in (" + year2 + ")";
            if (ddl_arrears_type.SelectedValue == "policy")
            {
                month = " '" + txt_arrear_month_year.Text.Substring(3, 2) + "'";
                year = "'" + txt_arrear_month_year.Text.Substring(6) + "'";
            }
            else
            {
                month = "'" + txt_month_year.Text.Substring(0, 2) + "'";
                year = "'" + txt_month_year.Text.Substring(3) + "' ";
            }
        }
        else
        {
            month = "'" + txt_month_year.Text.Substring(0, 2) + "'";
            year = "'" + txt_month_year.Text.Substring(3) + "' ";
        }
        //from date to date billing 

        if (arrears_invoice == 1)
        {

            invoice_history_Where_clause = " where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code =  '" + ddl_unitcode.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month = " + month + " and year = " + year + "  and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' ";
        }
        if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
        {
            bill_from_to_date = "and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "'";

        }

        //vinod for region
        string where_state = "";
        string region = "";
        if (ddl_billing_state.SelectedValue.Equals("Maharashtra") && ddl_client.SelectedValue.Equals("BAGIC") && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020 && billing_type1.Equals("1")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "' and billingwise_id = 5"; }
        if (d.getsinglestring("select billingwise_id from pay_client_billing_details where client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
        {
            where_state = " and pay_billing_unit_rate_history.zone = '" + ddlregion.SelectedValue + "' ";
            region = " and region = '" + ddlregion.SelectedValue + "'";
        }
        else
        { where_state = ""; }

        invoice_history_Where_clause = " where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code =  '" + ddl_unitcode.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month = " + month + " and year = " + year + "  and invoice_type = '" + ddl_invoice_type.SelectedValue + "' and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "'  and designation = '" + ddl_designation.SelectedValue + "' " + region + " " + bill_type;

        //for update invoice no 
        where1 = " month= " + month + " and year = " + year + " and comp_code='" + Session["comp_code"].ToString() + "'";
        //for get emp and unit to update
        where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'  and month= " + month + " and year = " + year + "  " + bill_from_to_date + "  " + grade;

        if (ddl_billing_state.SelectedValue != "ALL")
        {
            where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month= " + month + " and year = " + year + " " + bill_from_to_date + " " + grade;

        }
        if (ddl_unitcode.SelectedValue != "ALL")
        {

            where = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "'  and month= " + month + " and year =   " + year + "  " + bill_from_to_date + " " + grade;

        }
        //vikas add 12/08/2019
        string area = " pay_billing_invoice_history";
        if (arrears_invoice == 1)
        {
            string w = where;
            where = w.Replace("and start_date = '0' and end_date = '0'", "").Replace("  ", " ");
            string s = billing_type;
            billing_type = s.Replace("and bill_type = 'Arrears_bill'", "").Replace("  ", " ");
            area = " pay_billing_unit_rate_history_arrears";
        }
        emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from " + arrear_flag + " pay_billing_unit_rate_history  " + where + " " + billing_type + where_state);
        unit_code = d.get_group_concat("select distinct(unit_code) as 'unit_code' from  " + arrear_flag + " pay_billing_unit_rate_history  " + where + " " + billing_type + where_state);

        //check month year less than 04/2019
        DateTime date1 = new DateTime(int.Parse(txt_month_year.Text.Substring(3)), int.Parse(txt_month_year.Text.Substring(0, 2)), 1);
        DateTime date2 = new DateTime(2019, 4, 1);
        int res = DateTime.Compare(date1, date2);
        if (res == 0 || res == 1)
        {
            string inv_no = d.getsinglestring("select invoice_no from  pay_billing_invoice_history " + invoice_history_Where_clause);
            if (!inv_no.Equals(""))
            {
                auto_invoice_no = inv_no;
                txt_invoice_no.Text = inv_no;
            }
            else
            {
                auto_invoice_no = btnnew_Click(invoice_clause, 0);
                txt_invoice_no.Text = auto_invoice_no;
            }
        }
        emp_code = emp_code.Replace(",", "','");
        unit_code = unit_code.Replace(",", "','");
        if (d.getsinglestring("select group_concat(emp_code) from " + arrear_flag + " pay_billing_unit_rate_history " + where + " and invoice_flag = 0" + where_state) != "")
        {


            if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
            {
                //rahul 
                if (ddl_client.SelectedValue == "RCPL")
                {
                    result = d.operation("update " + arrear_flag + " pay_billing_unit_rate_history set invoice_flag = '1' , status_flag = '1' ,billing_date = str_to_date('" + txt_bill_date.Text + "','%d/%m/%Y')  where " + where1 + where_state + " and unit_code in ('" + unit_code + "') " + bill_from_to_date + " " + billing_type);
                    result = d.operation("update pay_files_timesheet set invoice_flag = '1'   where unit_code in ('" + unit_code + "') and " + where1 + " and flag = '2' ");

                    result = d.operation("update pay_attendance_muster set invoice_flag = '1' where  emp_code in ('" + emp_code + "') and " + where1);

                    gv_attendace_load();
                }
                else
                {
                    result = d.operation("update " + arrear_flag + " pay_billing_unit_rate_history set invoice_flag = '1' , status_flag = '1',auto_invoice_no='" + auto_invoice_no + "' , billing_date = str_to_date('" + txt_bill_date.Text + "','%d/%m/%Y'), invoice_no='" + txt_invoice_no.Text + "' where emp_code in ('" + emp_code + "') and " + where1 + where_state + " " + bill_from_to_date + " " + billing_type);
                    result = d.operation("update pay_files_timesheet set invoice_flag = '1'   where unit_code in ('" + unit_code + "') and " + where1 + " and flag = '2' ");
                    result = d.operation("update pay_attendance_muster set invoice_flag = '1' where  emp_code in ('" + emp_code + "') and " + where1);
                    
                    d.operation("delete from pay_billing_invoice_history  " + invoice_history_Where_clause);
                    d.operation("insert into pay_billing_invoice_history(Invoice_No,comp_code,CLIENT_CODE,state_name,unit_code,month,year,Invoice_type,designation,billing_type,start_date,end_date,region) values('" + auto_invoice_no + "','" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + ddl_billing_state.SelectedValue + "','" + ddl_unitcode.SelectedValue + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + ddl_invoice_type.SelectedValue + "','" + ddl_designation.SelectedValue + "'," + bill + ",'" + ddl_start_date_common.SelectedValue + "','" + ddl_end_date_common.SelectedValue + "','" + ddlregion.SelectedValue + "')");
                    d.operation("delete from payment_history where  invoice_no='" + txt_invoice_no.Text + "' and  " + where1 + (where_state == "" ? "" : " and region='" + ddlregion.SelectedValue + "'"));
                    d.operation("INSERT INTO payment_history (invoice_no, comp_code, client_code, client_name, state_name, unit_code,unit_name, billing_amt,taxable_amount, month, year, billing_date, GST_Amount,designation,Invoice_type,region) SELECT invoice_no, comp_code, client_code, client,if('" + ddl_billing_state.SelectedValue + "' = 'ALL','ALL',state_name) as 'state_name', if('" + ddl_unitcode.SelectedValue + "' = 'ALL','ALL',unit_code) as 'unit_code' , if('" + ddl_unitcode.SelectedValue + "' = 'ALL','ALL',unit_name) as 'unit_name' ,ROUND(SUM((Amount + Service_charge + uniform + operational_cost + CGST9 + IGST18 + SGST9)),2)  AS 'grand_total',ROUND(SUM((Amount + Service_charge + uniform + operational_cost)),2)  AS 'grand_total', month, year, billing_date, ROUND(SUM(CGST9 + IGST18 + SGST9), 2) AS 'gst_amount' ,if('" + ddl_designation.SelectedValue + "' ='','ALL',grade_desc) as 'designation','ManPower',zone FROM pay_billing_unit_rate_history WHERE  invoice_no='" + txt_invoice_no.Text + "' and " + where1 + "  GROUP BY invoice_no");

                    gv_attendace_load();
                }
                // mahindra
                //result = d.operation("update pay_billing_unit_rate_history set invoice_flag = '1' ,auto_invoice_no='" + auto_invoice_no + "' , billing_date = str_to_date('" + txt_bill_date.Text + "','%d/%m/%Y'), invoice_no='" + txt_invoice_no.Text + "' where emp_code in ('" + emp_code + "')" + where1 + " " + bill_from_to_date +  " " + billing_type);
                //gv_attendace_load();
            }
            else
            {
                if (ddl_client.SelectedValue == "RCPL")
                {
                    result = d.operation("update pay_files_timesheet set invoice_flag = '1'   where unit_code in ('" + unit_code + "') and " + where1 + " and flag = '2' ");

                    result = d.operation("update pay_attendance_muster set invoice_flag = '1' where  emp_code in ('" + emp_code + "') and " + where1);

                    result = d.operation("update " + arrear_flag + " pay_billing_unit_rate_history set invoice_flag = '1', status_flag = '1' , billing_date = str_to_date('" + txt_bill_date.Text + "','%d/%m/%Y') where " + where1 + where_state + " and unit_code in ('" + unit_code + "')  " + bill_from_to_date + " " + billing_type);
                    result = d.operation("update payment_history set invoice_flag = '1' , billing_date = str_to_date('" + txt_bill_date.Text + "','%d/%m/%Y') where " + where1 + " and unit_code in ('" + unit_code + "') ");
                    gv_attendace_load();
                }
                else
                {
                    result = d.operation("update pay_files_timesheet set invoice_flag = '1'   where unit_code in ('" + unit_code + "') and " + where1 + " and flag = '2' ");

                    result = d.operation("update pay_attendance_muster set invoice_flag = '1' where  emp_code in ('" + emp_code + "') and " + where1);

                    result = d.operation("update " + arrear_flag + " pay_billing_unit_rate_history set invoice_flag = '1', status_flag = '1' ,auto_invoice_no='" + auto_invoice_no + "' , billing_date = str_to_date('" + txt_bill_date.Text + "','%d/%m/%Y'), invoice_no='" + txt_invoice_no.Text + "' where emp_code in ('" + emp_code + "') and " + where1 + where_state + " " + bill_from_to_date + " " + billing_type);
                    d.operation("delete from pay_billing_invoice_history  " + invoice_history_Where_clause);
                    d.operation("insert into pay_billing_invoice_history(Invoice_No,comp_code,CLIENT_CODE,state_name,unit_code,month,year,Invoice_type,designation,billing_type,start_date,end_date,region) values('" + auto_invoice_no + "','" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + ddl_billing_state.SelectedValue + "','" + ddl_unitcode.SelectedValue + "'," + month + "," + year + ",'" + ddl_invoice_type.SelectedValue + "','" + ddl_designation.SelectedValue + "'," + bill + ",'" + ddl_start_date_common.SelectedValue + "','" + ddl_end_date_common.SelectedValue + "','" + ddlregion.SelectedValue + "')");

                    if (ddl_client.SelectedValue.Equals("HDFC"))
                    {
                        d.operation("delete from payment_history where  invoice_no='" + txt_invoice_no.Text + "' and  " + where1);
                        d.operation("INSERT INTO payment_history (invoice_no, comp_code, client_code, client_name, state_name, unit_code,unit_name, billing_amt,taxable_amount, month, year, billing_date, GST_Amount,designation,Invoice_type) SELECT invoice_no, comp_code, client_code, client,if('" + ddl_billing_state.SelectedValue + "' = 'ALL','ALL',state_name) as 'state_name', if('" + ddl_unitcode.SelectedValue + "' = 'ALL','ALL',unit_code) as 'unit_code' , if('" + ddl_unitcode.SelectedValue + "' = 'ALL','ALL',unit_name) as 'unit_name' ,ROUND(SUM((Amount + Service_charge + uniform + operational_cost + CGST9 + IGST18 + SGST9)),2)  AS 'grand_total',ROUND(SUM((Amount + Service_charge + uniform + operational_cost)),2)  AS 'grand_total', month, year, billing_date, ROUND(SUM(CGST9 + IGST18 + SGST9), 2) AS 'gst_amount' ,if('" + ddl_designation.SelectedValue + "' ='','ALL',grade_desc) as 'designation','ManPower' FROM pay_billing_unit_rate_history WHERE  invoice_no='" + txt_invoice_no.Text + "' and " + where1 + "  GROUP BY invoice_no");

                    }
                    else
                    {
                        d.operation("delete from payment_history where  invoice_no='" + txt_invoice_no.Text + "' and  " + where1);
                        d.operation("INSERT INTO payment_history (invoice_no, comp_code, client_code, client_name, state_name, unit_code,unit_name, billing_amt,taxable_amount, month, year, billing_date, GST_Amount,designation,Invoice_type) SELECT invoice_no, comp_code, client_code, client,if('" + ddl_billing_state.SelectedValue + "' = 'ALL','ALL',state_name) as 'state_name', if('" + ddl_unitcode.SelectedValue + "' = 'ALL','ALL',unit_code) as 'unit_code' , if('" + ddl_unitcode.SelectedValue + "' = 'ALL','ALL',unit_name) as 'unit_name' ,ROUND(SUM((Amount + Service_charge + uniform + operational_cost + CGST9 + IGST18 + SGST9)),2)  AS 'grand_total',ROUND(SUM((Amount + Service_charge + uniform + operational_cost)),2)  AS 'grand_total', month, year, billing_date, ROUND(SUM(CGST9 + IGST18 + SGST9), 2) AS 'gst_amount' ,if('" + ddl_designation.SelectedValue + "' ='','ALL',grade_desc) as 'designation','ManPower' FROM pay_billing_unit_rate_history WHERE  invoice_no='" + txt_invoice_no.Text + "' and " + where1 + "  GROUP BY invoice_no");
                    }
                    gv_attendace_load();
                }

            }



        }
    }


    //insert backup data for billing
    protected void insert_finance_data(int i)
    {

        string where = "", where_ot = "", material_where = "", r_m_where = "", admini_ex_where = "", driver_where = "", start_end_date = "'" + ddl_start_date_common.SelectedValue + "' as 'start_date','" + ddl_end_date_common.SelectedValue + "' as 'end_date' ";
        string grade = "", ed_date = "", ot_temp = "", des_where = "", des_delete = ""; int res = 0;
        string delete_where = "";
        string history_where = "";
        string pay_attendance_muster = " pay_attendance_muster ", pay_billing_master_history = "pay_billing_master_history", pay_billing_unit_rate = "pay_billing_unit_rate";
        string flag = "";
        //flag for insert query
        if (i == 1)
        {

            flag = " and pay_attendance_muster.flag != 0 and pay_attendance_muster.invoice_flag = 0 ";
        }
        //start date end date flag
        string delete_start_end_date = "AND (start_date = 0 AND end_date = 0)";
        if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
        {
            delete_start_end_date = "AND (start_date = " + ddl_start_date_common.SelectedValue + " AND end_date = " + ddl_end_date_common.SelectedValue + ")";
            flag = "";
        }

        //flag for delete query
        string flag1 = " and pay_billing_unit_rate_history.invoice_flag = 0 ";
        string sql = null;
        int start_date = int.Parse(ddl_start_date_common.SelectedValue);
        string invoice = txt_invoice_no.Text;
        string bill_date = txt_bill_date.Text;
        string daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01','%Y-%m-%d'), '%D %b %Y')),' TO ',upper(DATE_FORMAT(LAST_DAY('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01'), '%D %b %Y'))) as fromtodate";
        string start_date_common = get_start_date();
        if (start_date_common != "" && start_date_common != "1")
        {

            if (ddl_start_date_common.SelectedValue != "0")
            {
                start_date_common = ddl_start_date_common.SelectedValue;
                ed_date = start_date_common == "0" ? (int.Parse(start_date_common) - 1).ToString() : ddl_end_date_common.SelectedValue;
                daterange = "concat(upper(DATE_FORMAT(str_to_date('" + (int.Parse(ddl_start_date_common.SelectedValue) < int.Parse(ddl_end_date_common.SelectedValue) ? int.Parse(txt_month_year.Text.Substring(3)) : int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? int.Parse(txt_month_year.Text.Substring(3)) - 1 : int.Parse(txt_month_year.Text.Substring(3))) + "-" + ((int.Parse(ddl_start_date_common.SelectedValue) < int.Parse(ddl_end_date_common.SelectedValue) ? int.Parse(txt_month_year.Text.Substring(0, 2)) : (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? 12 : int.Parse(txt_month_year.Text.Substring(0, 2)) - 1))) + "-" + start_date_common + "','%Y-%m-%d'), '%D %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-" + (int.Parse(ed_date)) + "','%Y-%m-%d'), '%D %b %Y'))) as fromtodate";
            }
            // pay_attendance_muster = "pay_attendance_muster_diff pay_attendance_muster";
            else
            {
                daterange = "concat(upper(DATE_FORMAT(str_to_date('" + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? int.Parse(txt_month_year.Text.Substring(3)) - 1 : int.Parse(txt_month_year.Text.Substring(3))) + "-" + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? 12 : int.Parse(txt_month_year.Text.Substring(0, 2)) - 1) + "-" + start_date_common + "','%Y-%m-%d'), '%D %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-" + (int.Parse(start_date_common) - 1) + "','%Y-%m-%d'), '%D %b %Y'))) as fromtodate";
            }
        }



        //for region changes vinod pol
        string where_state = "", material_where_state = ""; ;
        if (ddl_billing_state.SelectedValue.Equals("Maharashtra") && ddl_client.SelectedValue.Equals("BAGIC") && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020) { where_state = " and state='" + ddl_billing_state.SelectedValue + "' and billingwise_id = 5"; }
        //if (!ddl_billing_state.SelectedValue.Equals("ALL")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "'"; }
        if (d.getsinglestring("select billingwise_id from pay_client_billing_details where  client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
        {
            where_state = " and pay_unit_master.zone = '" + ddlregion.SelectedValue + "'";
            material_where_state = " and pay_billing_unit_rate_history.zone = '" + ddlregion.SelectedValue + "'";
        }
        else
        { where_state = ""; }

        string type = (i == 2 ? "Material" : (i == 3) ? "Conveyance" : (i == 4) ? "DeepClean" : (i == 5) ? "PestControl" : (i == 6) ? "r_m_billing" : (i == 7) ? "administrative_ex_billing" : " ");

        if (ddl_start_date_common.SelectedValue != "0" && ddl_end_date_common.SelectedValue != "0")
        {

            bs.month_days_calc(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, int.Parse(txt_month_year.Text.Substring(0, 2)), int.Parse(txt_month_year.Text.Substring(3)), int.Parse(ddl_start_date_common.SelectedValue), int.Parse(ddl_end_date_common.SelectedValue));
            pay_attendance_muster = " attendance_muster as pay_attendance_muster ";
            pay_billing_master_history = "pay_billing_from_to_history as pay_billing_master_history";
            pay_billing_unit_rate = "pay_billing_from_to_unit_rate as pay_billing_unit_rate";
        }
        //arrears data insert
        if (i == 8) { pay_attendance_muster = " pay_arrears_attendance_muster as pay_attendance_muster "; }
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            des_where = " pay_designation_count.comp_code  = '" + Session["comp_code"].ToString() + "' AND pay_designation_count.client_code  = '" + ddl_client.SelectedValue + "'";
            des_delete = " comp_code  = '" + Session["comp_code"].ToString() + "' AND client_code  = '" + ddl_client.SelectedValue + "'";
            driver_where = "pay_company_master . comp_code  = '" + Session["comp_code"].ToString() + "' " + where_state + " AND  pay_unit_master . client_code  = '" + ddl_client.SelectedValue + "' AND pay_conveyance_amount_history . month  = '" + txt_month_year.Text.Substring(0, 2) + "' AND  pay_conveyance_amount_history . Year  = '" + txt_month_year.Text.Substring(3) + "'  AND pay_conveyance_amount_history.conveyance = 'driver_conveyance' ORDER BY 4, 3) AS billing_table) AS Final_billing";
            where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + "  and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0  AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) " + flag + "  " + grade + " order by 4,3) AS billing_table) as Final_billing";
            material_where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' " + material_where_state + "  and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_billing_unit_rate_history.tot_days_present > 0  AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) " + flag + "  " + grade + " order by 4,3) AS billing_table) as Final_billing";
            delete_where = "month='" + txt_month_year.Text.Substring(0, 2) + "' " + (where_state == "" ? "" : " and zone='" + ddlregion.SelectedValue + "'") + " and Year = '" + txt_month_year.Text.Substring(3) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "' ";
            history_where = " billing_client_code = '" + ddl_client.SelectedValue + "' and comp_code='" + Session["comp_code"].ToString() + "' ";
            where_ot = " client_code = '" + ddl_client.SelectedValue + "' and comp_code='" + Session["comp_code"].ToString() + "' and month ='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' ";
            r_m_where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "'  and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_r_and_m_service.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_r_and_m_service.Year = '" + txt_month_year.Text.Substring(3) + "' AND pay_r_and_m_service.amount > 0  AND pay_r_and_m_service.approve_flag != 0  AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y'))  order by 4,3) AS billing_table) as Final_billing";
            admini_ex_where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "'  and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_administrative_expense.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_administrative_expense.Year = '" + txt_month_year.Text.Substring(3) + "' AND pay_administrative_expense.amount > 0  AND pay_administrative_expense.approve_flag != 0  AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y'))  order by 4,3) AS billing_table) as Final_billing";

            d.operation("delete from pay_billing_master_history where month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and billing_client_code = '" + ddl_client.SelectedValue + "' and comp_code='" + Session["comp_code"].ToString() + "' and type='" + type + "'");
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            des_where = " pay_designation_count.comp_code  = '" + Session["comp_code"].ToString() + "'  AND   pay_designation_count.client_code  = '" + ddl_client.SelectedValue + "' and state = '" + ddl_billing_state.SelectedValue + "'";
            des_delete = " comp_code  = '" + Session["comp_code"].ToString() + "'  AND   client_code  = '" + ddl_client.SelectedValue + "' and state = '" + ddl_billing_state.SelectedValue + "'";
            driver_where = "pay_company_master . comp_code  = '" + Session["comp_code"].ToString() + "' " + where_state + " AND  pay_unit_master . client_code  = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_conveyance_amount_history . month  = '" + txt_month_year.Text.Substring(0, 2) + "' AND  pay_conveyance_amount_history . Year  = '" + txt_month_year.Text.Substring(3) + "' AND pay_conveyance_amount_history.conveyance = 'driver_conveyance' ORDER BY 4, 3) AS billing_table) AS Final_billing";
            where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) " + flag + "  " + grade + " order by 4,3) AS billing_table) as Final_billing";
            material_where = "pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' " + material_where_state + " and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_billing_unit_rate_history.tot_days_present > 0 AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y'))   " + grade + " order by 4,3) AS billing_table) as Final_billing";
            delete_where = "month='" + txt_month_year.Text.Substring(0, 2) + "' " + (where_state == "" ? "" : " and zone='" + ddlregion.SelectedValue + "'") + " and Year = '" + txt_month_year.Text.Substring(3) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "' and state_name = '" + ddl_billing_state.SelectedValue + "' ";
            history_where = " billing_client_code = '" + ddl_client.SelectedValue + "' and billing_state='" + ddl_billing_state.SelectedValue + "' and comp_code='" + Session["comp_code"].ToString() + "'";
            where_ot = " client_code = '" + ddl_client.SelectedValue + "' and state_name ='" + ddl_billing_state.SelectedValue + "' and comp_code='" + Session["comp_code"].ToString() + "' and month ='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "'";
            r_m_where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "'  and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_r_and_m_service.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_r_and_m_service.Year = '" + txt_month_year.Text.Substring(3) + "'  AND pay_r_and_m_service.amount > 0  AND pay_r_and_m_service.approve_flag != 0  AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y'))  order by 4,3) AS billing_table) as Final_billing";
            admini_ex_where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "'  and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_administrative_expense.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_administrative_expense.Year = '" + txt_month_year.Text.Substring(3) + "'  AND pay_administrative_expense.amount > 0  AND pay_administrative_expense.approve_flag != 0  AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y'))  order by 4,3) AS billing_table) as Final_billing";

            d.operation("delete from pay_billing_master_history where month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and billing_client_code = '" + ddl_client.SelectedValue + "' and comp_code='" + Session["comp_code"].ToString() + "' and billing_state= '" + ddl_billing_state.SelectedValue + "'  and type='" + type + "'");
        }
        else
        {
            des_where = "pay_designation_count.comp_code  = '" + Session["comp_code"].ToString() + "'  AND   pay_designation_count.client_code  = '" + ddl_client.SelectedValue + "' and pay_designation_count.unit_code = '" + ddl_unitcode.SelectedValue + "'";
            des_delete = "comp_code  = '" + Session["comp_code"].ToString() + "'  AND   client_code  = '" + ddl_client.SelectedValue + "' and unit_code = '" + ddl_unitcode.SelectedValue + "'";
            driver_where = "pay_company_master . comp_code  = '" + Session["comp_code"].ToString() + "' " + where_state + " AND  pay_unit_master . client_code  = '" + ddl_client.SelectedValue + "' and pay_unit_master.unit_code = '" + ddl_unitcode.SelectedValue + "' AND pay_conveyance_amount_history . month  = '" + txt_month_year.Text.Substring(0, 2) + "' AND  pay_conveyance_amount_history . Year  = '" + txt_month_year.Text.Substring(3) + "' AND pay_conveyance_amount_history.conveyance = 'driver_conveyance' ORDER BY 4, 3) AS billing_table) AS Final_billing";
            where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' " + where_state + " and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) " + flag + "  " + grade + " order by 4,3) AS billing_table) as Final_billing";
            material_where = "pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' " + material_where + " and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_billing_unit_rate_history.tot_days_present > 0 AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y'))   " + grade + " order by 4,3) AS billing_table) as Final_billing";
            delete_where = "month='" + txt_month_year.Text.Substring(0, 2) + "' " + (where_state == "" ? "" : " and zone='" + ddlregion.SelectedValue + "'") + " and Year = '" + txt_month_year.Text.Substring(3) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "' and unit_code = '" + ddl_unitcode.SelectedValue + "' ";
            history_where = "billing_unit_code ='" + ddl_unitcode.SelectedValue + "' and comp_code='" + Session["comp_code"].ToString() + "'";
            where_ot = "unit_code ='" + ddl_unitcode.SelectedValue + "' and comp_code='" + Session["comp_code"].ToString() + "' and month ='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "'";
            r_m_where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_r_and_m_service.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_r_and_m_service.Year = '" + txt_month_year.Text.Substring(3) + "' AND pay_r_and_m_service.amount > 0  AND pay_r_and_m_service.approve_flag != 0  AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y'))  order by 4,3) AS billing_table) as Final_billing";
            admini_ex_where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_administrative_expense.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_administrative_expense.Year = '" + txt_month_year.Text.Substring(3) + "' AND pay_administrative_expense.amount > 0  AND pay_administrative_expense.approve_flag != 0  AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y'))  order by 4,3) AS billing_table) as Final_billing";

            d.operation("delete from pay_billing_master_history where month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and billing_client_code = '" + ddl_client.SelectedValue + "' and billing_unit_code = '" + ddl_unitcode.SelectedValue + "' and comp_code='" + Session["comp_code"].ToString() + "' and type='" + type + "'");
        }

        if (i == 1)
        {
            string chk_invoice_flag = d.getsinglestring(" select ifnull(invoice_flag,0) from pay_billing_unit_rate_history where  " + delete_where + " " + delete_start_end_date);
            if (!(chk_invoice_flag.Equals("0") || chk_invoice_flag.Equals(""))) { return; }
            if (ddl_client.SelectedValue == "HDFC")
            {
                string where1 = "";
                where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 " + flag + "   " + grade + " group by pay_employee_master.emp_code order by 4,3) AS billing_table) as Final_billing";
                where1 = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' AND ot_hours != 0 and pay_attendance_muster.tot_days_present > 0 " + flag + "   " + grade + " group by pay_employee_master.emp_code order by 4,3) AS billing_table) as Final_billing";
                delete_where = "month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "' and unit_code = '" + ddl_unitcode.SelectedValue + "'";
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 " + flag + "  " + grade + "  group by  pay_employee_master.emp_code order by 4,3) AS billing_table) as Final_billing";
                    where1 = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' AND ot_hours != 0 and pay_attendance_muster.tot_days_present > 0 " + flag + "  " + grade + "  group by  pay_employee_master.emp_code order by 4,3) AS billing_table) as Final_billing";
                    delete_where = "month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "'";
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0  " + flag + "  " + grade + " group by pay_employee_master.emp_code order by 4,3) AS billing_table) as Final_billing";
                    where1 = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND ot_hours != 0 and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0  " + flag + "  " + grade + " group by pay_employee_master.emp_code order by 4,3) AS billing_table) as Final_billing";
                    delete_where = "month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "' and state_name = '" + ddl_billing_state.SelectedValue + "'";
                }
                string ot_type = "";
                ot_type = d.getsinglestring("SELECT billing_ot FROM pay_client_master WHERE comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' ");

                if (ot_type == "With OT")
                {
                    //sql = "SELECT comp_code,client_code ,  unit_code , emp_code,client, state_name, unit_name, unit_city, client_branch_code, emp_name , grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esic_ot, lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN billing_gst_applicable = 1 and LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN billing_gst_applicable = 1 and LOCATE(company_state, state_name) != 1 THEN  ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 18) / 100), 2) else 0 END AS 'IGST18', CASE WHEN billing_gst_applicable = 1 and LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours, " + daterange + ", CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + ((bill_gross * esic_percent) / 100) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,(tot_days_present) as 'no_of_duties',zone,TOT_WORKING_DAYS,GRADE_CODE,month_days,month,year,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE , COMP_STATE , housekeeiing_sac_code, Security_sac_code,joining_date,billing_gst_applicable  FROM (SELECT comp_code,client_code,unit_code,emp_code,client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, (((emp_basic_vda) / 100) * pf_percent) AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing =1, allowances,0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent,  CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing',  CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing_ser', bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,zone,TOT_WORKING_DAYS,GRADE_CODE,month_days,month,year,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE , COMP_STATE , housekeeiing_sac_code, Security_sac_code,joining_date,billing_gst_applicable  FROM (SELECT pay_unit_master.comp_code as 'comp_code',pay_unit_master.client_code as 'client_code',pay_unit_master.unit_code,pay_employee_master.emp_code as 'emp_code',(SELECT client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code AND comp_code = '" + Session["COMP_CODE"].ToString() + "') AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (SELECT CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END) AS 'emp_name', pay_grade_master.grade_desc, SUM(((( pay_billing_master_history . basic  +  pay_billing_master_history . vda ) /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'emp_basic_vda', SUM((( pay_billing_unit_rate . hra  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'hra', CASE WHEN  bonus_taxable  = '1' THEN SUM((( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_gross', CASE WHEN  bonus_taxable  = '0' THEN SUM((( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_after_gross', CASE WHEN  leave_taxable  = '1' THEN SUM((( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_gross', CASE WHEN  leave_taxable  = '0' THEN SUM((( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_after_gross', CASE WHEN  gratuity_taxable  = '1' THEN SUM((( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_gross', CASE WHEN  gratuity_taxable  = '0' THEN SUM((( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_after_gross', SUM((( pay_billing_unit_rate . washing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'washing', SUM((( pay_billing_unit_rate . traveling  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'travelling', SUM((( pay_billing_unit_rate . education  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'education', SUM((( pay_billing_unit_rate . national_holiday_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'NH', SUM((( pay_billing_unit_rate . allowances  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'allowances', SUM(CASE WHEN  pay_employee_master . cca  = 0 THEN ((( pay_billing_unit_rate . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE ((( pay_employee_master . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) END) AS 'cca_billing', SUM(CASE WHEN  pay_employee_master . special_allow  = 0 THEN ((( pay_billing_master_history . other_allow  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE ( pay_employee_master . special_allow ) END) AS 'other_allow', CASE WHEN  pay_billing_master_history . ot_policy_billing  = '1' THEN SUM((( pay_billing_master_history . ot_amount_billing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'hrs_12_ot',  pay_billing_master_history . bill_esic_percent  AS 'esic_percent',  pay_billing_master_history . bill_pf_percent  AS 'pf_percent', SUM((((pay_billing_unit_rate.lwf) / (pay_billing_unit_rate.month_days)) * (pay_attendance_muster.tot_days_present))) AS 'lwf', SUM((( pay_billing_unit_rate . uniform  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'uniform', SUM((( pay_billing_unit_rate . relieving_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'relieving_charg', SUM((( pay_billing_unit_rate . operational_cost  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'operational_cost', SUM(pay_attendance_muster.tot_days_present) as tot_days_present, ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate',  SUM(pay_attendance_muster.ot_hours) as 'ot_hours', pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', sum(IF(pay_employee_master.Employee_type = 'Permanent' OR pay_employee_master.Employee_type = 'Reliever' OR pay_employee_master.Employee_type ='PermanentReliever',((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present),0)) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, bill_service_charge_amount,pay_unit_master.txt_zone, branch_cost_centre_code, adminhead_name, 'IH&MS'as ihms	, pay_unit_master.location_type, pay_unit_master.	unit_add1, case emp_count when '1' then 'A' when '2' then 'B' else 'C' end as emp_count , case emp_count when '1' then 'Single - 8 Hrs. Shift (1 SG)' when '2' then 'Double - 16 Hrs. Shift (2 SG)' ELSE concat('Triple - 24 Hrs. Shift (', emp_count ,'SG)') end as emp_count1 , 'STATE ' as 'state_per',emp_count as 'total_emp_count',zone,TOT_WORKING_DAYS,pay_grade_master.GRADE_CODE,pay_billing_master_history.esic_oa_billing,pay_billing_unit_rate.month_days,pay_attendance_muster.month,pay_attendance_muster.year,pay_company_master.ADDRESS1  as 'COMP_ADDRESS1', pay_company_master.ADDRESS2   as 'COMP_ADDRESS2', pay_company_master.CITY  as 'COMP_CITY', pay_company_master.PF_REG_NO as 'PF_REG_NO', pay_company_master.COMPANY_PAN_NO as 'COMPANY_PAN_NO', pay_company_master.COMPANY_TAN_NO as 'COMPANY_TAN_NO', pay_company_master.COMPANY_CIN_NO as 'COMPANY_CIN_NO', pay_company_master.SERVICE_TAX_REG_NO as 'SERVICE_TAX_REG_NO', pay_company_master.ESIC_REG_NO as 'ESIC_REG_NO',  (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_unit_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST')  as 'unit_gst_no', pay_company_master.COMPANY_NAME  as 'COMPANY_NAME' , (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_unit_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1' , UNIT_ADD2, pay_employee_master.Employee_type as 'EMP_TYPE' , pay_company_master.STATE as 'COMP_STATE',pay_company_master.housekeeiing_sac_code as 'housekeeiing_sac_code',pay_company_master.Security_sac_code as 'Security_sac_code',pay_employee_master.joining_date ,pay_billing_master_history.billing_gst_applicable FROM pay_employee_master INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN  " + pay_billing_unit_rate + "  ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN " + pay_billing_master_history + " ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE WHERE " + where;
                    sql = "SELECT comp_code, client_code, unit_code, emp_code, client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esic_ot, lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) != 1 THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 18) / 100), 2) ELSE 0 END AS 'IGST18', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours," + daterange + ", CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + ((bill_gross * esic_percent) / 100) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count, emp_count1, state_per, branch_cost_centre_code, total_emp_count, (tot_days_present) AS 'no_of_duties', zone, TOT_WORKING_DAYS, GRADE_CODE, month_days, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, joining_date, gst_applicable,'manpower_bill' FROM (SELECT comp_code, client_code, unit_code, emp_code, client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, CASE WHEN pf_cmn_on = 0 THEN (((emp_basic_vda) / 100) * pf_percent) WHEN pf_cmn_on = 1 THEN ((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 2 THEN ((emp_basic_vda + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 3 THEN ((emp_basic_vda + cca_billing + other_allow) / 100) * pf_percent END AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing = 1, allowances, 0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent, CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing', CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing_ser', bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count, emp_count1, state_per, branch_cost_centre_code, total_emp_count, zone, TOT_WORKING_DAYS, GRADE_CODE, month_days, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, joining_date, gst_applicable FROM (SELECT pay_unit_master.comp_code, pay_unit_master.client_code, pay_unit_master.unit_code, pay_employee_master.emp_code, (SELECT client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code AND comp_code = 'C02') AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (SELECT CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END) AS 'emp_name', pay_grade_master.grade_desc, SUM((((pay_billing_master_history.basic + pay_billing_master_history.vda) / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'emp_basic_vda', SUM(((pay_billing_unit_rate.hra / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'hra', CASE WHEN bonus_taxable = '1' THEN SUM(((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN SUM(((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN SUM(((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN SUM(((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN SUM(((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN SUM(((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'gratuity_after_gross', SUM(((pay_billing_unit_rate.washing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'washing', SUM(((pay_billing_unit_rate.traveling / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'travelling', SUM(((pay_billing_unit_rate.education / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'education', SUM(((pay_billing_unit_rate.national_holiday_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'NH', SUM(((pay_billing_unit_rate.allowances / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'allowances', SUM(CASE WHEN pay_employee_master.cca = 0 THEN (((pay_billing_unit_rate.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE (((pay_employee_master.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) END) AS 'cca_billing', SUM(CASE WHEN pay_employee_master.special_allow = 0 THEN (((pay_billing_master_history.other_allow / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE (pay_employee_master.special_allow) END) AS 'other_allow', CASE WHEN pay_billing_master_history.ot_policy_billing = '1' THEN SUM(((pay_billing_master_history.ot_amount_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history.bill_esic_percent AS 'esic_percent', pay_billing_master_history.bill_pf_percent AS 'pf_percent', SUM((((pay_billing_unit_rate.lwf) / (pay_billing_unit_rate.month_days)) * (pay_attendance_muster.tot_days_present))) AS 'lwf', SUM(((pay_billing_unit_rate.uniform / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'uniform', SUM(((pay_billing_unit_rate.relieving_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'relieving_charg', SUM(((pay_billing_unit_rate.operational_cost / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'operational_cost', SUM(pay_attendance_muster.tot_days_present) AS 'tot_days_present', ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate', SUM(pay_attendance_muster.ot_hours) AS 'ot_hours', pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', SUM(IF(pay_employee_master.Employee_type = 'Permanent' OR pay_employee_master.Employee_type = 'Reliever' OR pay_employee_master.Employee_type = 'PermanentReliever', ((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 0)) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, bill_service_charge_amount, pay_unit_master.txt_zone, branch_cost_centre_code, adminhead_name, 'IH&MS' AS 'ihms', pay_unit_master.location_type, pay_unit_master.unit_add1,  CASE pay_designation_count.count WHEN '1' THEN 'A' WHEN '2' THEN 'B' ELSE 'C' END AS 'emp_count', CASE pay_designation_count.count WHEN '1' THEN 'Single - 8 Hrs. Shift (1 SG)' WHEN '2' THEN 'Double - 16 Hrs. Shift (2 SG)' ELSE CONCAT('Triple - 24 Hrs. Shift (', pay_designation_count.count, 'SG)') END AS 'emp_count1', 'STATE ' AS 'state_per', pay_designation_count.count AS 'total_emp_count', zone, TOT_WORKING_DAYS, pay_grade_master.GRADE_CODE, pay_billing_master_history.esic_oa_billing, pay_billing_unit_rate.month_days, pay_attendance_muster.month, pay_attendance_muster.year, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO, pay_company_master.COMPANY_PAN_NO, pay_company_master.COMPANY_TAN_NO, pay_company_master.COMPANY_CIN_NO, pay_company_master.SERVICE_TAX_REG_NO, pay_company_master.ESIC_REG_NO, (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_unit_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME, (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_unit_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_employee_master.Employee_type AS 'EMP_TYPE', pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code, pay_company_master.Security_sac_code, pay_employee_master.joining_date, pay_client_master.gst_applicable, pay_billing_master_history . pf_cmn_on  FROM pay_employee_master inner join pay_client_master on pay_employee_master.client_code = pay_client_master.client_code INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE inner join pay_designation_count on pay_company_master.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.billing_unit_code = pay_designation_count.unit_code AND pay_grade_master.GRADE_desc = pay_designation_count.designation WHERE " + where;
                    d.operation("delete  from pay_billing_unit_rate_history where " + delete_where + "  " + delete_start_end_date + " and hdfc_type ='manpower_bill' " + flag1);
                    res = d.operation("insert into pay_billing_unit_rate_history(comp_code,client_code,unit_code,EMP_CODE,client,state_name,unit_name,unit_city,client_branch_code,emp_name,grade_desc,emp_basic_vda,hra,bonus_gross,leave_gross,gratuity_gross,washing,travelling,education,allowances,cca_billing,other_allow,gross,bonus_after_gross,leave_after_gross,gratuity_after_gross,pf,esic,hrs_12_ot,esic_ot,lwf,uniform,relieving_charg,operational_cost,tot_days_present,Amount,Service_charge,CGST9,IGST18,SGST9,bill_service_charge,NH,hours,fromtodate,sub_total_c,ot_rate,ot_hours,ot_amount,group_insurance_billing,bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count2,emp_count1,state_per,branch_cost_centre_code,total_emp_count,no_of_duties,zone,TOT_WORKING_DAYS,GRADE_CODE,month_days,month,year,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE ,COMP_STATE , housekeeiing_sac_code, Security_sac_code,joining_date,billing_gst_applicable,hdfc_type) " + sql);

                }
                else if (ot_type == "Without OT")
                {
                    //sql = "SELECT comp_code,client_code ,  unit_code , emp_code,client, state_name, unit_name, unit_city, client_branch_code, emp_name , grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esic_ot, lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN billing_gst_applicable = 1 and LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN billing_gst_applicable = 1 and LOCATE(company_state, state_name) != 1 THEN  ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 18) / 100), 2) else 0 END AS 'IGST18', CASE WHEN billing_gst_applicable = 1 and LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours, " + daterange + ", CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + ((bill_gross * esic_percent) / 100) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,(tot_days_present) as 'no_of_duties',zone,TOT_WORKING_DAYS,GRADE_CODE,month_days,month,year,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE , COMP_STATE , housekeeiing_sac_code, Security_sac_code,joining_date,billing_gst_applicable  FROM (SELECT comp_code,client_code,unit_code,emp_code,client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, (((emp_basic_vda) / 100) * pf_percent) AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing =1, allowances,0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent,  CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing',  CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing_ser', bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,zone,TOT_WORKING_DAYS,GRADE_CODE,month_days,month,year,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE , COMP_STATE , housekeeiing_sac_code, Security_sac_code,joining_date,billing_gst_applicable  FROM (SELECT pay_unit_master.comp_code as 'comp_code',pay_unit_master.client_code as 'client_code',pay_unit_master.unit_code,pay_employee_master.emp_code as 'emp_code',(SELECT client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code AND comp_code = '" + Session["COMP_CODE"].ToString() + "') AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (SELECT CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END) AS 'emp_name', pay_grade_master.grade_desc, SUM(((( pay_billing_master_history . basic  +  pay_billing_master_history . vda ) /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'emp_basic_vda', SUM((( pay_billing_unit_rate . hra  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'hra', CASE WHEN  bonus_taxable  = '1' THEN SUM((( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_gross', CASE WHEN  bonus_taxable  = '0' THEN SUM((( pay_billing_unit_rate . bonus_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_after_gross', CASE WHEN  leave_taxable  = '1' THEN SUM((( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_gross', CASE WHEN  leave_taxable  = '0' THEN SUM((( pay_billing_unit_rate . leave_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_after_gross', CASE WHEN  gratuity_taxable  = '1' THEN SUM((( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_gross', CASE WHEN  gratuity_taxable  = '0' THEN SUM((( pay_billing_unit_rate . grauity_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_after_gross', SUM((( pay_billing_unit_rate . washing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'washing', SUM((( pay_billing_unit_rate . traveling  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'travelling', SUM((( pay_billing_unit_rate . education  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'education', SUM((( pay_billing_unit_rate . national_holiday_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'NH', SUM((( pay_billing_unit_rate . allowances  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'allowances', SUM(CASE WHEN  pay_employee_master . cca  = 0 THEN ((( pay_billing_unit_rate . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE ((( pay_employee_master . cca  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) END) AS 'cca_billing', SUM(CASE WHEN  pay_employee_master . special_allow  = 0 THEN ((( pay_billing_master_history . other_allow  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE ( pay_employee_master . special_allow ) END) AS 'other_allow', CASE WHEN  pay_billing_master_history . ot_policy_billing  = '1' THEN SUM((( pay_billing_master_history . ot_amount_billing  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'hrs_12_ot',  pay_billing_master_history . bill_esic_percent  AS 'esic_percent',  pay_billing_master_history . bill_pf_percent  AS 'pf_percent', SUM((((pay_billing_unit_rate.lwf) / (pay_billing_unit_rate.month_days)) * (pay_attendance_muster.tot_days_present))) AS 'lwf', SUM((( pay_billing_unit_rate . uniform  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'uniform', SUM((( pay_billing_unit_rate . relieving_amount  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'relieving_charg', SUM((( pay_billing_unit_rate . operational_cost  /  pay_billing_unit_rate . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'operational_cost', SUM(pay_attendance_muster.tot_days_present) as tot_days_present, ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate',  SUM(pay_attendance_muster.ot_hours) as 'ot_hours', pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', sum(IF(pay_employee_master.Employee_type = 'Permanent' OR pay_employee_master.Employee_type = 'Reliever' OR pay_employee_master.Employee_type ='PermanentReliever',((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present),0)) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, bill_service_charge_amount,pay_unit_master.txt_zone, branch_cost_centre_code, adminhead_name, 'IH&MS'as ihms	, pay_unit_master.location_type, pay_unit_master.	unit_add1, case emp_count when '1' then 'A' when '2' then 'B' else 'C' end as emp_count , case emp_count when '1' then 'Single - 8 Hrs. Shift (1 SG)' when '2' then 'Double - 16 Hrs. Shift (2 SG)' ELSE concat('Triple - 24 Hrs. Shift (', emp_count ,'SG)') end as emp_count1 , 'STATE ' as 'state_per',emp_count as 'total_emp_count',zone,TOT_WORKING_DAYS,pay_grade_master.GRADE_CODE,pay_billing_master_history.esic_oa_billing,pay_billing_unit_rate.month_days,pay_attendance_muster.month,pay_attendance_muster.year,pay_company_master.ADDRESS1  as 'COMP_ADDRESS1', pay_company_master.ADDRESS2   as 'COMP_ADDRESS2', pay_company_master.CITY  as 'COMP_CITY', pay_company_master.PF_REG_NO as 'PF_REG_NO', pay_company_master.COMPANY_PAN_NO as 'COMPANY_PAN_NO', pay_company_master.COMPANY_TAN_NO as 'COMPANY_TAN_NO', pay_company_master.COMPANY_CIN_NO as 'COMPANY_CIN_NO', pay_company_master.SERVICE_TAX_REG_NO as 'SERVICE_TAX_REG_NO', pay_company_master.ESIC_REG_NO as 'ESIC_REG_NO',  (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_unit_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST')  as 'unit_gst_no', pay_company_master.COMPANY_NAME  as 'COMPANY_NAME' , (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_unit_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1' , UNIT_ADD2, pay_employee_master.Employee_type as 'EMP_TYPE' , pay_company_master.STATE as 'COMP_STATE',pay_company_master.housekeeiing_sac_code as 'housekeeiing_sac_code',pay_company_master.Security_sac_code as 'Security_sac_code',pay_employee_master.joining_date ,pay_billing_master_history.billing_gst_applicable FROM pay_employee_master INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN  " + pay_billing_unit_rate + "  ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN " + pay_billing_master_history + " ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE WHERE " + where;
                    sql = "SELECT comp_code, client_code, unit_code, emp_code, client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esic_ot, lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) != 1 THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 18) / 100), 2) ELSE 0 END AS 'IGST18', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours," + daterange + ", CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + ((bill_gross * esic_percent) / 100) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count, emp_count1, state_per, branch_cost_centre_code, total_emp_count, (tot_days_present) AS 'no_of_duties', zone, TOT_WORKING_DAYS, GRADE_CODE, month_days, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, joining_date, gst_applicable,'manpower_bill' FROM (SELECT comp_code, client_code, unit_code, emp_code, client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, CASE WHEN pf_cmn_on = 0 THEN (((emp_basic_vda) / 100) * pf_percent) WHEN pf_cmn_on = 1 THEN ((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 2 THEN ((emp_basic_vda + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 3 THEN ((emp_basic_vda + cca_billing + other_allow) / 100) * pf_percent END AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing = 1, allowances, 0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent, CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing', CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing_ser', bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count, emp_count1, state_per, branch_cost_centre_code, total_emp_count, zone, TOT_WORKING_DAYS, GRADE_CODE, month_days, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, joining_date, gst_applicable FROM (SELECT  pay_unit_master.comp_code, pay_unit_master.client_code, pay_unit_master.unit_code, pay_employee_master.emp_code, (SELECT  client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code AND comp_code = 'C02') AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (SELECT  CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END ) AS 'emp_name', pay_grade_master.grade_desc, SUM((((pay_billing_master_history.basic + pay_billing_master_history.vda) / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'emp_basic_vda', SUM(((pay_billing_unit_rate.hra / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'hra', CASE WHEN bonus_taxable = '1' THEN SUM(((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN SUM(((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN SUM(((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN SUM(((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN SUM(((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN SUM(((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'gratuity_after_gross', SUM(((pay_billing_unit_rate.washing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'washing', SUM(((pay_billing_unit_rate.traveling / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'travelling', SUM(((pay_billing_unit_rate.education / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'education', SUM(((pay_billing_unit_rate.national_holiday_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'NH', SUM(((pay_billing_unit_rate.allowances / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'allowances', SUM(CASE WHEN pay_employee_master.cca = 0 THEN (((pay_billing_unit_rate.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE (((pay_employee_master.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) END) AS 'cca_billing', SUM(CASE WHEN pay_employee_master.special_allow = 0 THEN (((pay_billing_master_history.other_allow / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE (pay_employee_master.special_allow) END) AS 'other_allow', CASE WHEN pay_billing_master_history.ot_policy_billing = '1' THEN SUM(((0 / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history.bill_esic_percent AS 'esic_percent', pay_billing_master_history.bill_pf_percent AS 'pf_percent', SUM((((pay_billing_unit_rate.lwf) / (pay_billing_unit_rate.month_days)) * (pay_attendance_muster.tot_days_present))) AS 'lwf', SUM(((pay_billing_unit_rate.uniform / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'uniform', SUM(((pay_billing_unit_rate.relieving_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'relieving_charg', SUM(((pay_billing_unit_rate.operational_cost / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present)) AS 'operational_cost', SUM(pay_attendance_muster.tot_days_present) AS 'tot_days_present', ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, '0' AS 'ot_rate', '0' AS 'ot_hours', pay_billing_unit_rate.esic_amount, '0' as 'esi_on_ot_amount', pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', SUM(IF(pay_employee_master.Employee_type = 'Permanent' OR pay_employee_master.Employee_type = 'Reliever' OR pay_employee_master.Employee_type = 'PermanentReliever', ((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 0)) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, bill_service_charge_amount, pay_unit_master.txt_zone, branch_cost_centre_code, adminhead_name, 'IH&MS' AS 'ihms', pay_unit_master.location_type, pay_unit_master.unit_add1, CASE pay_designation_count.count WHEN '1' THEN 'A' WHEN '2' THEN 'B' ELSE 'C' END AS 'emp_count', CASE pay_designation_count.count WHEN '1' THEN 'Single - 8 Hrs. Shift (1 SG)' WHEN '2' THEN 'Double - 16 Hrs. Shift (2 SG)' ELSE CONCAT('Triple - 24 Hrs. Shift (', pay_designation_count.count, 'SG)') END AS 'emp_count1', 'STATE ' AS 'state_per', pay_designation_count.count AS 'total_emp_count', zone, TOT_WORKING_DAYS, pay_grade_master.GRADE_CODE, pay_billing_master_history.esic_oa_billing, pay_billing_unit_rate.month_days, pay_attendance_muster.month, pay_attendance_muster.year, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO, pay_company_master.COMPANY_PAN_NO, pay_company_master.COMPANY_TAN_NO, pay_company_master.COMPANY_CIN_NO, pay_company_master.SERVICE_TAX_REG_NO, pay_company_master.ESIC_REG_NO, (SELECT  field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_unit_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME, (SELECT  field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_unit_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_employee_master.Employee_type AS 'EMP_TYPE', pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code, pay_company_master.Security_sac_code, pay_employee_master.joining_date, pay_client_master.gst_applicable, pay_billing_master_history.pf_cmn_on FROM pay_employee_master inner join pay_client_master on pay_employee_master.client_code = pay_client_master.client_code INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE inner join pay_designation_count on pay_company_master.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.billing_unit_code = pay_designation_count.unit_code AND pay_grade_master.GRADE_desc = pay_designation_count.designation WHERE " + where;
                    d.operation("delete  from pay_billing_unit_rate_history where " + delete_where + "  " + delete_start_end_date + " and hdfc_type ='manpower_bill' " + flag1);
                    res = d.operation("insert into pay_billing_unit_rate_history(comp_code,client_code,unit_code,EMP_CODE,client,state_name,unit_name,unit_city,client_branch_code,emp_name,grade_desc,emp_basic_vda,hra,bonus_gross,leave_gross,gratuity_gross,washing,travelling,education,allowances,cca_billing,other_allow,gross,bonus_after_gross,leave_after_gross,gratuity_after_gross,pf,esic,hrs_12_ot,esic_ot,lwf,uniform,relieving_charg,operational_cost,tot_days_present,Amount,Service_charge,CGST9,IGST18,SGST9,bill_service_charge,NH,hours,fromtodate,sub_total_c,ot_rate,ot_hours,ot_amount,group_insurance_billing,bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count2,emp_count1,state_per,branch_cost_centre_code,total_emp_count,no_of_duties,zone,TOT_WORKING_DAYS,GRADE_CODE,month_days,month,year,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE ,COMP_STATE , housekeeiing_sac_code, Security_sac_code,joining_date,billing_gst_applicable,hdfc_type) " + sql);

                    //HDFC OT BILL
                    sql = "SELECT  comp_code, client_code, unit_code, emp_code, client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, (ot_rate * ot_hours) AS 'Amount', IF((((ot_rate * ot_hours) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((ot_rate * ot_hours)) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((ot_rate * ot_hours) + IF(((((ot_rate * ot_hours)) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) != 1 THEN ROUND(((((ot_rate * ot_hours) + IF(((((ot_rate * ot_hours)) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((ot_rate * ot_hours)) * bill_service_charge) / 100))) * 18) / 100), 2) ELSE 0 END AS 'IGST18', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((ot_rate * ot_hours) + IF(((((ot_rate * ot_hours)) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge,  hours," + daterange + ", IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count, emp_count1, state_per, branch_cost_centre_code, total_emp_count, zone, TOT_WORKING_DAYS, GRADE_CODE, month_days, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, joining_date, gst_applicable,tot_days_present,'ot_bill' FROM (SELECT  comp_code, client_code, unit_code, emp_code, client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, bill_service_charge, hours, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count, emp_count1, state_per, branch_cost_centre_code, total_emp_count, zone, TOT_WORKING_DAYS, GRADE_CODE, month_days, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, joining_date, gst_applicable,tot_days_present FROM (SELECT  pay_unit_master.comp_code, pay_unit_master.client_code, pay_unit_master.unit_code, pay_employee_master.emp_code, (SELECT  client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code AND comp_code = 'C02') AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (SELECT  CASE pay_employee_master.Employee_type     WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever')     ELSE pay_employee_master.emp_name END ) AS 'emp_name', pay_grade_master.grade_desc, bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate', SUM(pay_attendance_muster.ot_hours) AS 'ot_hours', pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, service_group_insurance_billing, pay_employee_master.Employee_type, bill_service_charge_amount, pay_unit_master.txt_zone, branch_cost_centre_code, adminhead_name, 'IH&MS' AS 'ihms', pay_unit_master.location_type, pay_unit_master.unit_add1, CASE pay_designation_count.count WHEN '1' THEN 'A' WHEN '2' THEN 'B' ELSE 'C' END AS 'emp_count', CASE pay_designation_count.count WHEN '1' THEN 'Single - 8 Hrs. Shift (1 SG)' WHEN '2' THEN 'Double - 16 Hrs. Shift (2 SG)' ELSE CONCAT('Triple - 24 Hrs. Shift (', pay_designation_count.count, 'SG)') END AS 'emp_count1', 'STATE ' AS 'state_per', pay_designation_count.count AS 'total_emp_count', zone, TOT_WORKING_DAYS, pay_grade_master.GRADE_CODE, pay_billing_master_history.esic_oa_billing, pay_billing_unit_rate.month_days, pay_attendance_muster.month, pay_attendance_muster.year, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO, pay_company_master.COMPANY_PAN_NO, pay_company_master.COMPANY_TAN_NO, pay_company_master.COMPANY_CIN_NO, pay_company_master.SERVICE_TAX_REG_NO, pay_company_master.ESIC_REG_NO, (SELECT  field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_unit_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME, (SELECT  field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_unit_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_employee_master.Employee_type AS 'EMP_TYPE', pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code, pay_company_master.Security_sac_code, pay_employee_master.joining_date, pay_client_master.gst_applicable, pay_billing_master_history.pf_cmn_on,SUM(pay_attendance_muster.tot_days_present) AS 'tot_days_present' FROM pay_employee_master INNER JOIN pay_client_master ON pay_employee_master.client_code = pay_client_master.client_code INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_designation_count ON pay_company_master.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.billing_unit_code = pay_designation_count.unit_code AND pay_grade_master.GRADE_desc = pay_designation_count.designation WHERE " + where1;
                    d.operation("delete  from pay_billing_unit_rate_history where " + delete_where + "  " + delete_start_end_date + " and hdfc_type ='ot_bill' " + flag1);
                    res = d.operation("insert into pay_billing_unit_rate_history(comp_code,client_code,unit_code,EMP_CODE,client,state_name,unit_name,unit_city,client_branch_code,emp_name,grade_desc,Amount,Service_charge,CGST9,IGST18,SGST9,bill_service_charge,hours,fromtodate,ot_rate,ot_hours,ot_amount,bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count2,emp_count1,state_per,branch_cost_centre_code,total_emp_count,zone,TOT_WORKING_DAYS,GRADE_CODE,month_days,month,year,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE ,COMP_STATE , housekeeiing_sac_code, Security_sac_code,joining_date,billing_gst_applicable,tot_days_present,hdfc_type) " + sql);

                }

                //suraj 30/3/2020 from date to date ot zero

                ot_temp = d.getsinglestring("SELECT invoice_flag FROM pay_billing_unit_rate_history WHERE " + where_ot + " and  invoice_flag = '1' ");
                if (ot_temp != "")
                {
                    d.operation("update pay_billing_unit_rate_history set ot_hours = 0  where " + where_ot + " and  invoice_flag = '0' and start_date != '0' and end_date != '0' " + grade + " ");
                }
                //For designation history
                if (res > 0)
                {
                    sql = "SELECT  pay_designation_count.COMP_CODE, pay_designation_count.CLIENT_CODE, STATE, DESIGNATION, pay_designation_count.UNIT_CODE, COUNT, HOURS, CREATED_BY, CREATED_DATE, unit_start_date, unit_end_date, branch_status, start_date, end_date, category, COUNT(emp_code) AS 'permanent_emp', '" + txt_month_year.Text.Substring(0, 2) + "' AS 'month', '" + txt_month_year.Text.Substring(3) + "' AS 'year'  FROM pay_designation_count LEFT JOIN pay_employee_master ON pay_employee_master.COMP_CODE = pay_designation_count.COMP_CODE AND pay_employee_master.UNIT_CODE = pay_designation_count.UNIT_CODE INNER JOIN pay_grade_master ON pay_grade_master.COMP_CODE = pay_designation_count.COMP_CODE AND pay_grade_master.GRADE_DESC = pay_designation_count.DESIGNATION AND pay_grade_master.GRADE_CODE = pay_employee_master.GRADE_CODE WHERE " + des_where + "  AND pay_employee_master.Employee_type = 'Permanent' AND pay_designation_count.UNIT_CODE IS NOT NULL AND pay_employee_master.LEFT_DATE IS NULL GROUP BY pay_designation_count.DESIGNATION , pay_designation_count.UNIT_CODE ";
                    d.operation("delete from pay_designation_count_history where " + des_delete + " and month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' ");
                    d.operation("insert into pay_designation_count_history (COMP_CODE, CLIENT_CODE, STATE, DESIGNATION, UNIT_CODE, COUNT, HOURS, CREATED_BY, CREATED_DATE, unit_start_date, unit_end_date, branch_status, start_date, end_date, category,permanent_emp,month,year) " + sql);
                }
            }
            else
            {
                //sql = "select comp_code, client_code, unit_code, emp_code, client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, IF(gross > 21000, 0, esic) AS 'esic', hrs_12_ot, IF(gross > 21000, 0, esi_on_ot_amount) AS 'esic_ot', lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + IF(gross > 21000, 0, esic) + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN billing_gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + IF(gross > 21000, 0, esic) + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN billing_gst_applicable = 1 AND LOCATE(company_state, state_name) != 1 THEN ROUND(((((Total + pf + IF(gross > 21000, 0, esic) + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 18) / 100), 2) ELSE 0 END AS 'IGST18', CASE WHEN billing_gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + IF(gross > 21000, 0, esic) + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours, CONCAT(UPPER(DATE_FORMAT(STR_TO_DATE('2019-09-01', '%Y-%m-%d'), '%D %b %Y')), ' TO ', UPPER(DATE_FORMAT(LAST_DAY('2019-09-01'), '%D %b %Y'))) AS 'fromtodate', CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + IF(bill_gross > 21000, 0, ((bill_gross * esic_percent) / 100)) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross + monthlwf) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', IF(0 = 1 || 0 = 0, ot_hours, 0) AS 'ot_hours', (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount, branch_type, month_days, gst_applicable, OPus_NO, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, GRADE_CODE, chemical_consumables_rate, tool_tackles_rate, chemical_applicable, bill_amount, tool_applicable, emp_count, joining_date, billing_gst_applicable, penalty, '0' AS 'start_date', '0' AS 'end_date', material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, equmental_handling_percent, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, chemical_unit,conveyance_amount FROM (SELECT comp_code, client_code, unit_code, emp_code, client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, CASE WHEN pf_cmn_on = 0 THEN (((emp_basic_vda) / 100) * pf_percent) WHEN pf_cmn_on = 1 THEN ((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 2 THEN ((emp_basic_vda + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 3 THEN ((emp_basic_vda + cca_billing + other_allow) / 100) * pf_percent END AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing = 1, allowances, 0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot + IF(esic_common_allow = 0, common_allow, 0)) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent, IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing', IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing_ser', bill_service_charge_amount, branch_type, month_days, gst_applicable, OPus_NO, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, GRADE_CODE, chemical_consumables_rate, tool_tackles_rate, chemical_applicable, bill_amount, tool_applicable, emp_count, joining_date, billing_gst_applicable, penalty, material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, equmental_handling_percent, chemical_unit, pf_cmn_on, monthlwf,conveyance_amount FROM (SELECT pay_unit_master.comp_code, pay_unit_master.client_code, pay_unit_master.unit_code, pay_employee_master.emp_code, client_name AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (SELECT CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END) AS 'emp_name', pay_grade_master.grade_desc, (((pay_billing_master_history.basic + pay_billing_master_history.vda) / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'emp_basic_vda', ((pay_billing_unit_rate.hra / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'hra', CASE WHEN bonus_taxable = '1' THEN ((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN ((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN ((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN ((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN ((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN ((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_after_gross', ((pay_billing_unit_rate.washing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'washing', ((pay_billing_unit_rate.traveling / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'travelling', ((pay_billing_unit_rate.education / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'education', ((pay_billing_unit_rate.national_holiday_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'NH', ((pay_billing_unit_rate.allowances / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'allowances', CASE WHEN pay_employee_master.cca = 0 THEN ((pay_billing_unit_rate.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE ((pay_employee_master.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) END AS 'cca_billing', CASE WHEN pay_employee_master.special_allow = 0 THEN ((pay_billing_unit_rate.otherallowance / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE pay_employee_master.special_allow END AS 'other_allow', CASE WHEN pay_billing_master_history.ot_policy_billing = '1' THEN ((pay_billing_master_history.ot_amount_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history.bill_esic_percent AS 'esic_percent', pay_billing_master_history.bill_pf_percent AS 'pf_percent', CASE WHEN pay_employee_master.employee_type = 'Permanent' THEN pay_billing_unit_rate.lwf ELSE 0 END AS 'monthlwf', ((pay_billing_unit_rate.lwf / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'lwf', ((pay_billing_unit_rate.uniform / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'uniform', ((pay_billing_unit_rate.relieving_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'relieving_charg', ((pay_billing_unit_rate.operational_cost / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'operational_cost', pay_attendance_muster.tot_days_present, ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate', pay_attendance_muster.ot_hours, pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', ((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, ((bill_service_charge_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'bill_service_charge_amount', pay_billing_master_history.esic_common_allow, CASE WHEN pay_employee_master.special_allow = 0 THEN ((pay_billing_unit_rate.common_allowance / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE ((pay_employee_master.special_allow / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) END AS 'common_allow', IFNULL(branch_type, 0) AS 'branch_type', pay_billing_master_history.esic_oa_billing, pay_billing_unit_rate.month_days, gst_applicable, OPus_NO, pay_attendance_muster.month, pay_attendance_muster.year, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO, pay_company_master.COMPANY_PAN_NO, pay_company_master.COMPANY_TAN_NO, pay_company_master.COMPANY_CIN_NO, pay_company_master.SERVICE_TAX_REG_NO, pay_company_master.ESIC_REG_NO, (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME, (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_employee_master.Employee_type AS 'EMP_TYPE', pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code, pay_company_master.Security_sac_code, pay_grade_master.grade_code AS 'GRADE_CODE', pay_client_master.bill_amount, pay_billing_master_history.chemical_consumables_rate, pay_billing_master_history.tool_tackles_rate, pay_billing_master_history.chemical_applicable, pay_billing_master_history.tool_applicable, pay_unit_master.emp_count, pay_billing_master_history.basic AS 'actual_basic', pay_billing_master_history.vda AS 'actual_vda', pay_employee_master.joining_date, pay_billing_master_history.billing_gst_applicable, pay_client_master.penalty, material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, equmental_handling_percent, chemical_unit, pay_billing_master_history.pf_cmn_on, pay_billing_master_history.conveyance_amount FROM pay_employee_master INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN  " + pay_billing_unit_rate + "  ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN  " + pay_billing_master_history + " ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE  " + where; d.operation("delete from pay_billing_unit_rate_history where " + delete_where + "  " + delete_start_end_date + " " + flag1);

                //sql = "SELECT comp_code, client_code, unit_code, emp_code, client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, IF(gross > 21000, 0, esic) AS 'esic', hrs_12_ot, IF(gross > 21000, 0, esi_on_ot_amount) AS 'esic_ot', lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + IF(gross > 21000, 0, esic) + group_insurance_billing_ser) AS 'Amount', IF((((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) != 1 THEN ROUND(((((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 18) / 100), 2) ELSE 0 END AS 'IGST18', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours, " + daterange + ", CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + IF(bill_gross > 21000, 0, ((bill_gross * esic_percent) / 100)) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross + monthlwf) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', IF(0 = 1 || 0 = 0, ot_hours, 0) AS 'ot_hours', (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount, branch_type, month_days, gst_applicable, OPus_NO, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, GRADE_CODE, chemical_consumables_rate, tool_tackles_rate, chemical_applicable, bill_amount, tool_applicable, emp_count, joining_date, gst_applicable, penalty, '" + ddl_start_date_common.SelectedValue + "' AS 'start_date', '" + ddl_end_date_common.SelectedValue + "' AS 'end_date', material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, equmental_handling_percent, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, chemical_unit, conveyance_amount, txt_zone, zone, common_allow FROM (SELECT comp_code, client_code, unit_code, emp_code, client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, CASE WHEN pf_cmn_on = 0 THEN (((emp_basic_vda) / 100) * pf_percent) WHEN pf_cmn_on = 1 THEN ((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 2 THEN ((emp_basic_vda + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 3 THEN ((emp_basic_vda + cca_billing + other_allow) / 100) * pf_percent END AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing = 1, allowances, 0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot + IF(esic_common_allow = 0, common_allow, 0)) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent, IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing', IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing_ser', bill_service_charge_amount, branch_type, month_days, gst_applicable, OPus_NO, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, GRADE_CODE, chemical_consumables_rate, tool_tackles_rate, chemical_applicable, bill_amount, tool_applicable, emp_count, joining_date, penalty, material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, equmental_handling_percent, chemical_unit, pf_cmn_on, monthlwf, conveyance_amount, txt_zone, zone, common_allow FROM (SELECT pay_unit_master.comp_code, pay_unit_master.client_code, pay_unit_master.unit_code, pay_employee_master.emp_code, client_name AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (SELECT CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END) AS 'emp_name', pay_grade_master.grade_desc, (((pay_billing_master_history.basic + pay_billing_master_history.vda) / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'emp_basic_vda', ((pay_billing_unit_rate.hra / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'hra', CASE WHEN bonus_taxable = '1' THEN ((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN ((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN ((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN ((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN ((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN ((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_after_gross', ((pay_billing_unit_rate.washing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'washing', ((pay_billing_unit_rate.traveling / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'travelling', ((pay_billing_unit_rate.education / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'education', ((pay_billing_unit_rate.national_holiday_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'NH', ((pay_billing_unit_rate.allowances / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'allowances', CASE WHEN pay_employee_master.cca = 0 THEN ((pay_billing_unit_rate.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE ((pay_employee_master.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) END AS 'cca_billing', CASE WHEN pay_employee_master.special_allow = 0 THEN ((pay_billing_unit_rate.otherallowance / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE pay_employee_master.special_allow END AS 'other_allow', CASE WHEN pay_billing_master_history.ot_policy_billing = '1' THEN ((pay_billing_master_history.ot_amount_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history.bill_esic_percent AS 'esic_percent', pay_billing_master_history.bill_pf_percent AS 'pf_percent', CASE WHEN pay_employee_master.employee_type = 'Permanent' THEN pay_billing_unit_rate.lwf ELSE 0 END AS 'monthlwf', ((pay_billing_unit_rate.lwf / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'lwf', ((pay_billing_unit_rate.uniform / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'uniform', ((pay_billing_unit_rate.relieving_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'relieving_charg', ((pay_billing_unit_rate.operational_cost / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'operational_cost', pay_attendance_muster.tot_days_present, ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate', pay_attendance_muster.ot_hours, pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', ((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, ((bill_service_charge_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'bill_service_charge_amount', pay_billing_master_history.esic_common_allow, CASE WHEN pay_employee_master.special_allow = 0 THEN ((pay_billing_unit_rate.common_allowance / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE ((pay_employee_master.special_allow / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) END AS 'common_allow', IFNULL(branch_type, 0) AS 'branch_type', pay_billing_master_history.esic_oa_billing, pay_billing_unit_rate.month_days, pay_client_master.gst_applicable, OPus_NO, pay_attendance_muster.month, pay_attendance_muster.year, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO, pay_company_master.COMPANY_PAN_NO, pay_company_master.COMPANY_TAN_NO, pay_company_master.COMPANY_CIN_NO, pay_company_master.SERVICE_TAX_REG_NO, pay_company_master.ESIC_REG_NO, (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME, (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_employee_master.Employee_type AS 'EMP_TYPE', pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code, pay_company_master.Security_sac_code, pay_grade_master.grade_code AS 'GRADE_CODE', pay_client_master.bill_amount, pay_billing_master_history.chemical_consumables_rate, pay_billing_master_history.tool_tackles_rate, pay_billing_master_history.chemical_applicable, pay_billing_master_history.tool_applicable, pay_unit_master.emp_count, pay_billing_master_history.basic AS 'actual_basic', pay_billing_master_history.vda AS 'actual_vda', pay_employee_master.joining_date, pay_client_master.penalty, material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, equmental_handling_percent, chemical_unit, pay_billing_master_history.pf_cmn_on,((pay_billing_master_history.conveyance_amount) * tot_days_present / month_days) AS 'conveyance_amount', pay_unit_master.txt_zone, pay_unit_master.zone FROM pay_employee_master INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN " + pay_billing_unit_rate + " ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN " + pay_billing_master_history + " ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE " + where;
                sql = "SELECT comp_code, client_code, unit_code, emp_code, client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, IF(gross > 21000, 0, esic) AS 'esic', hrs_12_ot, IF(gross > 21000, 0, esi_on_ot_amount) AS 'esic_ot', lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + common_allow + pf + IF(gross > 21000, 0, esic) + group_insurance_billing_ser) AS 'Amount', IF((((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + conveyance_amount + pf + common_allow + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total + conveyance_amount + common_allow + pf + IF(gross > 21000, 0, esic) + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + conveyance_amount + common_allow + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + conveyance_amount + pf + common_allow + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) != 1 THEN ROUND(((((Total + conveyance_amount + common_allow + pf + IF(gross > 21000, 0, esic) + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + conveyance_amount + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + conveyance_amount + pf + common_allow + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 18) / 100), 2) ELSE 0 END AS 'IGST18', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total + conveyance_amount + common_allow + pf + IF(gross > 21000, 0, esic) + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + conveyance_amount + common_allow + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + conveyance_amount + common_allow + pf + IF(gross > 21000, 0, esic) + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours, " + daterange + ", CASE WHEN emp_cca = 0 THEN ((sub_total_c + common_allow) - ot_rate) ELSE (bill_gross + IF(bill_gross > 21000, 0, ((bill_gross * esic_percent) / 100)) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + common_allow + gratuity_after_gross + monthlwf) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', IF(0 = 1 || 0 = 0, ot_hours, 0) AS 'ot_hours', (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount, branch_type, month_days, gst_applicable, OPus_NO, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, GRADE_CODE, chemical_consumables_rate, tool_tackles_rate, chemical_applicable, bill_amount, tool_applicable, emp_count, joining_date, gst_applicable, penalty, '" + ddl_start_date_common.SelectedValue + "' AS 'start_date', '" + ddl_end_date_common.SelectedValue + "' AS 'end_date', material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, equmental_handling_percent, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, chemical_unit, conveyance_amount, txt_zone, zone, common_allow FROM (SELECT comp_code, client_code, unit_code, emp_code, client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, CASE WHEN pf_cmn_on = 0 THEN (((emp_basic_vda) / 100) * pf_percent) WHEN pf_cmn_on = 1 THEN ((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 2 THEN ((emp_basic_vda + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 3 THEN ((emp_basic_vda + cca_billing + other_allow) / 100) * pf_percent END AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing = 1, allowances, 0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot + IF(esic_common_allow = 0, common_allow, 0)) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent, IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing', IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing_ser', bill_service_charge_amount, branch_type, month_days, gst_applicable, OPus_NO, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, GRADE_CODE, chemical_consumables_rate, tool_tackles_rate, chemical_applicable, bill_amount, tool_applicable, emp_count, joining_date, penalty, material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, equmental_handling_percent, chemical_unit, pf_cmn_on, monthlwf, conveyance_amount, txt_zone, zone, common_allow FROM (SELECT pay_unit_master.comp_code, pay_unit_master.client_code, pay_unit_master.unit_code, pay_employee_master.emp_code, client_name AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (SELECT CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END) AS 'emp_name', pay_grade_master.grade_desc, (((pay_billing_master_history.basic + pay_billing_master_history.vda) / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'emp_basic_vda', ((pay_billing_unit_rate.hra / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'hra', CASE WHEN bonus_taxable = '1' THEN ((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN ((pay_billing_unit_rate.bonus_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN ((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN ((pay_billing_unit_rate.leave_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN ((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN ((pay_billing_unit_rate.grauity_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_after_gross', ((pay_billing_unit_rate.washing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'washing', ((pay_billing_unit_rate.traveling / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'travelling', ((pay_billing_unit_rate.education / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'education', ((pay_billing_unit_rate.national_holiday_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'NH', ((pay_billing_unit_rate.allowances / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'allowances', CASE WHEN pay_employee_master.cca = 0 THEN ((pay_billing_unit_rate.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE ((pay_employee_master.cca / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) END AS 'cca_billing', ((pay_billing_unit_rate.otherallowance / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'other_allow', CASE WHEN pay_billing_master_history.ot_policy_billing = '1' THEN ((pay_billing_master_history.ot_amount_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history.bill_esic_percent AS 'esic_percent', pay_billing_master_history.bill_pf_percent AS 'pf_percent', CASE WHEN pay_employee_master.employee_type = 'Permanent' THEN pay_billing_unit_rate.lwf ELSE 0 END AS 'monthlwf', ((pay_billing_unit_rate.lwf / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'lwf', ((pay_billing_unit_rate.uniform / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'uniform', ((pay_billing_unit_rate.relieving_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'relieving_charg', ((pay_billing_unit_rate.operational_cost / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'operational_cost', pay_attendance_muster.tot_days_present, ROUND(((pay_billing_unit_rate.sub_total_c / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history.hours, pay_billing_unit_rate.sub_total_c, pay_billing_master_history.bill_ser_operations, pay_billing_master_history.bill_ser_uniform, pay_billing_unit_rate.ot_1_hr_amount AS 'ot_rate', pay_attendance_muster.ot_hours, pay_billing_unit_rate.esic_amount, pay_billing_unit_rate.esi_on_ot_amount, pay_employee_master.cca AS 'emp_cca', pay_billing_unit_rate.gross AS 'bill_gross', pay_billing_unit_rate.pf_amount AS 'bill_pf', pay_billing_unit_rate.uniform AS 'bill_uniform', ((pay_billing_master_history.group_insurance_billing / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, ((bill_service_charge_amount / pay_billing_unit_rate.month_days) * pay_attendance_muster.tot_days_present) AS 'bill_service_charge_amount', pay_billing_master_history.esic_common_allow, CASE WHEN pay_employee_master.special_allow = 0 THEN pay_billing_unit_rate.common_allowance ELSE pay_employee_master.special_allow END AS 'common_allow', IFNULL(branch_type, 0) AS 'branch_type', pay_billing_master_history.esic_oa_billing, pay_billing_unit_rate.month_days, pay_client_master.gst_applicable, OPus_NO, pay_attendance_muster.month, pay_attendance_muster.year, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO, pay_company_master.COMPANY_PAN_NO, pay_company_master.COMPANY_TAN_NO, pay_company_master.COMPANY_CIN_NO, pay_company_master.SERVICE_TAX_REG_NO, pay_company_master.ESIC_REG_NO, (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME, (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_employee_master.Employee_type AS 'EMP_TYPE', pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code, pay_company_master.Security_sac_code, pay_grade_master.grade_code AS 'GRADE_CODE', pay_client_master.bill_amount, pay_billing_master_history.chemical_consumables_rate, pay_billing_master_history.tool_tackles_rate, pay_billing_master_history.chemical_applicable, pay_billing_master_history.tool_applicable, pay_unit_master.emp_count, pay_billing_master_history.basic AS 'actual_basic', pay_billing_master_history.vda AS 'actual_vda', pay_employee_master.joining_date, pay_client_master.penalty, material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, equmental_handling_percent, chemical_unit, pay_billing_master_history.pf_cmn_on,((pay_billing_master_history.conveyance_amount) * tot_days_present / month_days) AS 'conveyance_amount', pay_unit_master.txt_zone, pay_unit_master.zone FROM pay_employee_master INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN " + pay_billing_unit_rate + " ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN " + pay_billing_master_history + " ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE " + where;
                d.operation("delete from pay_billing_unit_rate_history where " + delete_where + "  " + delete_start_end_date + " " + flag1);
                //employee 
                res = d.operation("insert into pay_billing_unit_rate_history(comp_code,client_code,unit_code,EMP_CODE,client,state_name,unit_name,unit_city,client_branch_code,emp_name,grade_desc,emp_basic_vda,hra,bonus_gross,leave_gross,gratuity_gross,washing,travelling,education,allowances,cca_billing,other_allow,gross,bonus_after_gross,leave_after_gross,gratuity_after_gross,pf,esic,hrs_12_ot,esic_ot,lwf,uniform,relieving_charg,operational_cost,tot_days_present,Amount,Service_charge,CGST9,IGST18,SGST9,bill_service_charge,NH,hours,fromtodate,sub_total_c,ot_rate,ot_hours,ot_amount,group_insurance_billing,bill_service_charge_amount,branch_type,month_days,gst_applicable,OPus_NO,month,year ,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE,COMP_STATE , housekeeiing_sac_code, Security_sac_code,GRADE_CODE,chemical_consumables_rate,tool_tackles_rate,chemical_applicable,bill_amount ,tool_applicable,emp_count,joining_date,billing_gst_applicable,penalty,start_date,end_date,material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, equmental_handling_percent, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent,chemical_unit,conveyance_amount,txt_zone,zone,allowances_no_esic) " + sql);


                ot_temp = d.getsinglestring("SELECT invoice_flag FROM pay_billing_unit_rate_history WHERE " + where_ot + " and invoice_flag = '0' ");
                if (ot_temp != "" && (ddl_start_date_common.SelectedValue != "0" && ddl_start_date_common.SelectedValue != "1"))
                {
                    d.operation("update pay_billing_unit_rate_history set ot_hours = 0 where " + where_ot + " and  invoice_flag = '0' and start_date != '0' and end_date != '0'  ");
                }

                //For designation history
                if (res > 0)
                {
                    sql = "SELECT  pay_designation_count.COMP_CODE, pay_designation_count.CLIENT_CODE, STATE, DESIGNATION, pay_designation_count.UNIT_CODE, COUNT, HOURS, CREATED_BY, CREATED_DATE, unit_start_date, unit_end_date, branch_status, start_date, end_date, category, COUNT(emp_code) AS 'permanent_emp', '" + txt_month_year.Text.Substring(0, 2) + "' AS 'month', '" + txt_month_year.Text.Substring(3) + "' AS 'year'  FROM pay_designation_count LEFT JOIN pay_employee_master ON pay_employee_master.COMP_CODE = pay_designation_count.COMP_CODE AND pay_employee_master.UNIT_CODE = pay_designation_count.UNIT_CODE INNER JOIN pay_grade_master ON pay_grade_master.COMP_CODE = pay_designation_count.COMP_CODE AND pay_grade_master.GRADE_DESC = pay_designation_count.DESIGNATION AND pay_grade_master.GRADE_CODE = pay_employee_master.GRADE_CODE WHERE " + des_where + "  AND pay_employee_master.Employee_type = 'Permanent' AND pay_designation_count.UNIT_CODE IS NOT NULL AND pay_employee_master.LEFT_DATE IS NULL GROUP BY pay_designation_count.DESIGNATION , pay_designation_count.UNIT_CODE ";
                    d.operation("delete from pay_designation_count_history where " + des_delete + " and month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' ");
                    d.operation("insert into pay_designation_count_history (COMP_CODE, CLIENT_CODE, STATE, DESIGNATION, UNIT_CODE, COUNT, HOURS, CREATED_BY, CREATED_DATE, unit_start_date, unit_end_date, branch_status, start_date, end_date, category,permanent_emp,month,year) " + sql);
                }
                //Akshay 23-04-2019
                if (ddl_client.SelectedValue == "RCPL")
                {
                    comp_group(daterange);
                }
            }
        }
        //material
        else if (i == 2)
        {

            d.operation("insert into pay_billing_master_history (comp_code, billing_client_code, billing_state, billing_unit_code,designation,hours,policy_name1,start_date,end_date,create_user,create_date,month,year,type,material_contract ,contract_type ,contract_amount ,handling_applicable,handling_percent,equmental_applicable,equmental_unit,equmental_rental_rate,equmental_handling_applicable,chemical_applicable,chemical_unit,chemical_consumables_rate,chemical_handling_applicable,chemical_handling_percent,dustbin_applicable,dustbin_unit,dustbin_liners_rate,dustbin_handling_applicable,dustbin_handling_percent,femina_applicable,femina_unit,femina_hygiene_rate,femina_handling_applicable,femina_handling_percent,aerosol_applicable,aerosol_unit,aerosol_dispenser_rate,aerosol_handling_applicable,aerosol_handling_percent,tool_applicable,tool_unit,tool_tackles_rate,tool_handling_applicable,tool_handling_percent,equmental_handling_percent,machine_rental_applicable,machine_rental_amount,start_date_common,end_date_common,handling_charges_amount) select comp_code, billing_client_code, billing_state, billing_unit_code,designation,hours,policy_name1,start_date,end_date,'" + Session["LOGIN_ID"].ToString() + "',now(),'" + txt_month_year.Text.Substring(0, 2) + "' ,'" + txt_month_year.Text.Substring(3) + "','Material',material_contract ,contract_type ,contract_amount ,handling_applicable,handling_percent,equmental_applicable,equmental_unit,equmental_rental_rate,equmental_handling_applicable,chemical_applicable,chemical_unit,chemical_consumables_rate,chemical_handling_applicable,chemical_handling_percent,dustbin_applicable,dustbin_unit,dustbin_liners_rate,dustbin_handling_applicable,dustbin_handling_percent,femina_applicable,femina_unit,femina_hygiene_rate,femina_handling_applicable,femina_handling_percent,aerosol_applicable,aerosol_unit,aerosol_dispenser_rate,aerosol_handling_applicable,aerosol_handling_percent,tool_applicable,tool_unit,tool_tackles_rate,tool_handling_applicable,tool_handling_percent,equmental_handling_percent,machine_rental_applicable, machine_rental_amount  ,start_date_common,end_date_common,handling_charges_amount from pay_billing_master where " + history_where);

            string machine_rental = "pay_billing_master_history.machine_rental_applicable, IF(pay_billing_master_history.machine_rental_applicable = 1, pay_billing_master_history.machine_rental_amount, 0) AS 'machine_rental_amount'";

            // }
            // for emp material contract_type 4

            string contract_inner = "";
            string contract_amount = "pay_billing_master_history.contract_amount";
            string gst = "", close = "", emp_flag = "";
            string contract_type = d.getsinglestring("SELECT distinct(contract_type) FROM pay_billing_master WHERE comp_code = '" + Session["comp_code"].ToString() + "' AND billing_client_code = '" + ddl_client.SelectedValue + "' AND billing_state = '" + ddl_billing_state.SelectedValue + "' and contract_type = 4");
            if (contract_type == "4")
            {
                contract_amount = " (CASE  WHEN pay_billing_master_history.contract_type = '4' THEN material_amount ELSE pay_billing_master_history.contract_amount END) AS contract_amount ";
                contract_inner = "INNER JOIN pay_material_details ON pay_billing_unit_rate_history.comp_code = pay_material_details.comp_code AND pay_billing_unit_rate_history.client_code = pay_material_details.client_code AND pay_billing_unit_rate_history.emp_code = pay_material_details.emp_code AND pay_material_details.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_material_details.Year = '" + txt_month_year.Text.Substring(3) + "'";
                gst = "IF(pay_billing_master_history.contract_type = '4', (IF(pay_billing_master_history.handling_charges_amount > 0, (pay_billing_master_history.handling_charges_amount + material_amount), ((((material_amount * pay_billing_master_history.handling_percent) / 100) + material_amount)))),";
                close = ")"; emp_flag = "material_flag != '0' and material_amount !='0' AND ";
            }

            //sql = "SELECT  comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  state_name ,  unit_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc , tot_days_present,  month_days ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE ,  material_contract ,  contract_type ,  contract_amount ,  handling_applicable ,  handling_percent ,  equmental_applicable ,  equmental_unit ,  equmental_rental_rate ,  equmental_handling_applicable ,  equmental_handling_percent ,  chemical_applicable ,  chemical_unit ,  chemical_consumables_rate ,  chemical_handling_applicable ,  chemical_handling_percent ,  dustbin_applicable ,  dustbin_unit ,  dustbin_liners_rate ,  dustbin_handling_applicable ,  dustbin_handling_percent ,  femina_applicable ,  femina_unit ,  femina_hygiene_rate ,  femina_handling_applicable ,  femina_handling_percent ,  aerosol_applicable ,  aerosol_unit ,  aerosol_dispenser_rate ,  aerosol_handling_applicable ,  aerosol_handling_percent ,  tool_applicable ,  tool_unit ,  tool_tackles_rate ,  tool_handling_applicable ,  tool_handling_percent,material_calc,material_days,material_area,gst_applicable,'Material',  machine_rental_applicable, machine_rental_amount," + daterange + ",handling_charges_amount FROM (SELECT  comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  company_state ,  unit_name ,  state_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc ,  tot_days_present ,  month_days ,  gst_applicable ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE ,  material_contract ,  contract_type ,  contract_amount ,  handling_applicable ,  handling_percent ,  equmental_applicable ,  equmental_unit ,  equmental_rental_rate ,  equmental_handling_applicable ,  chemical_applicable ,  chemical_consumables_rate ,  chemical_unit ,  chemical_handling_applicable ,  chemical_handling_percent ,  dustbin_applicable ,  dustbin_unit ,  dustbin_liners_rate ,  dustbin_handling_applicable ,  dustbin_handling_percent ,  femina_applicable ,  femina_unit ,  femina_hygiene_rate ,  femina_handling_applicable ,  femina_handling_percent ,  aerosol_applicable ,  aerosol_unit ,  aerosol_dispenser_rate ,  aerosol_handling_applicable ,  aerosol_handling_percent ,  tool_tackles_rate ,  tool_applicable ,  tool_unit ,  tool_handling_applicable ,  tool_handling_percent ,  equmental_handling_percent,material_calc,material_days,material_area,machine_rental_applicable,machine_rental_amount,handling_charges_amount  FROM (SELECT  pay_unit_master . comp_code ,  pay_unit_master . client_code ,  pay_unit_master . unit_code ,  pay_employee_master . emp_code ,  client_name  AS 'client',  pay_company_master . state  AS 'company_state',  pay_unit_master . unit_name ,  pay_unit_master . state_name ,  pay_unit_master . unit_city ,  pay_unit_master . client_branch_code , (CASE  pay_employee_master . Employee_type  WHEN 'Reliever' THEN CONCAT( pay_employee_master . emp_name , '-', 'Reliever') ELSE  pay_employee_master . emp_name  END) AS 'emp_name',  pay_grade_master . grade_desc , tot_days_present,  pay_billing_unit_rate . month_days ,  gst_applicable ,  pay_attendance_muster . month ,  pay_attendance_muster . year ,  pay_company_master . ADDRESS1  AS 'COMP_ADDRESS1',  pay_company_master . ADDRESS2  AS 'COMP_ADDRESS2',  pay_company_master . CITY  AS 'COMP_CITY',  pay_company_master . PF_REG_NO ,  pay_company_master . COMPANY_PAN_NO ,  pay_company_master . COMPANY_TAN_NO ,  pay_company_master . COMPANY_CIN_NO ,  pay_company_master . SERVICE_TAX_REG_NO ,  pay_company_master . ESIC_REG_NO , (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST')  as 'unit_gst_no',  pay_company_master . COMPANY_NAME , (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1',  UNIT_ADD2 ,  pay_employee_master . Employee_type  AS 'EMP_TYPE',  pay_company_master . STATE  AS 'COMP_STATE',  pay_company_master . housekeeiing_sac_code ,  pay_company_master . Security_sac_code ,  pay_grade_master . grade_code  AS 'GRADE_CODE',  pay_billing_master_history . material_contract ,  pay_billing_master_history . contract_type ,  pay_billing_master_history . contract_amount ,  pay_billing_master_history . handling_applicable ,  pay_billing_master_history . handling_percent ,  pay_billing_master_history . equmental_applicable ,  pay_billing_master_history . equmental_unit ,  pay_billing_master_history . equmental_rental_rate ,  pay_billing_master_history . equmental_handling_applicable ,  pay_billing_master_history . equmental_handling_percent ,  pay_billing_master_history . chemical_applicable ,  pay_billing_master_history . chemical_consumables_rate ,  pay_billing_master_history . chemical_unit ,  pay_billing_master_history . chemical_handling_applicable ,  pay_billing_master_history . chemical_handling_percent ,  pay_billing_master_history . dustbin_applicable ,  pay_billing_master_history . dustbin_unit ,  pay_billing_master_history . dustbin_liners_rate ,  pay_billing_master_history . dustbin_handling_applicable ,  pay_billing_master_history . dustbin_handling_percent ,  pay_billing_master_history . femina_applicable ,  pay_billing_master_history . femina_unit ,  pay_billing_master_history . femina_hygiene_rate ,  pay_billing_master_history . femina_handling_applicable ,  pay_billing_master_history . femina_handling_percent ,  pay_billing_master_history . aerosol_applicable ,  pay_billing_master_history . aerosol_unit ,  pay_billing_master_history . aerosol_dispenser_rate ,  pay_billing_master_history . aerosol_handling_applicable ,  pay_billing_master_history . aerosol_handling_percent ,  pay_billing_master_history . tool_tackles_rate ,  pay_billing_master_history . tool_applicable ,  pay_billing_master_history . tool_unit ,  pay_billing_master_history . tool_handling_applicable ,  pay_billing_master_history . tool_handling_percent,material_calc,material_days,material_area," + machine_rental + ",handling_charges_amount  FROM pay_employee_master INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'Material' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE  pay_billing_master_history.material_contract != 0 AND " + where;

            // sql = "SELECT comp_code, client_code, unit_code, emp_code, client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, tot_days_present, month_days, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, GRADE_CODE, material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, equmental_handling_percent, chemical_applicable, chemical_unit, chemical_consumables_rate, chemical_handling_applicable, chemical_handling_percent, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, tool_applicable, tool_unit, tool_tackles_rate, tool_handling_applicable, tool_handling_percent, material_calc, material_days, material_area, gst_applicable, 'Material', machine_rental_applicable, machine_rental_amount, " + daterange + ", handling_charges_amount,cgst,sgst,igst FROM (SELECT comp_code, client_code, unit_code, emp_code, client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, tot_days_present, month_days, gst_applicable, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, GRADE_CODE, material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, chemical_applicable, chemical_consumables_rate, chemical_unit, chemical_handling_applicable, chemical_handling_percent, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, tool_tackles_rate, tool_applicable, tool_unit, tool_handling_applicable, tool_handling_percent, equmental_handling_percent, material_calc, material_days, material_area, machine_rental_applicable, machine_rental_amount, handling_charges_amount,cgst,sgst,igst FROM (SELECT pay_unit_master.comp_code, pay_unit_master.client_code, pay_unit_master.unit_code, pay_employee_master.emp_code, pay_client_master.client_name AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END) AS 'emp_name', pay_grade_master.grade_desc, tot_days_present, pay_billing_unit_rate.month_days, gst_applicable, pay_attendance_muster.month, pay_attendance_muster.year, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO, pay_company_master.COMPANY_PAN_NO, pay_company_master.COMPANY_TAN_NO, pay_company_master.COMPANY_CIN_NO, pay_company_master.SERVICE_TAX_REG_NO, pay_company_master.ESIC_REG_NO, (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME, (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_employee_master.Employee_type AS 'EMP_TYPE', pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code, pay_company_master.Security_sac_code, pay_grade_master.grade_code AS 'GRADE_CODE', pay_billing_master_history.material_contract, pay_billing_master_history.contract_type, " + contract_amount + ", pay_billing_master_history.handling_applicable, pay_billing_master_history.handling_percent, pay_billing_master_history.equmental_applicable, pay_billing_master_history.equmental_unit, pay_billing_master_history.equmental_rental_rate, pay_billing_master_history.equmental_handling_applicable, pay_billing_master_history.equmental_handling_percent, pay_billing_master_history.chemical_applicable, pay_billing_master_history.chemical_consumables_rate, pay_billing_master_history.chemical_unit, pay_billing_master_history.chemical_handling_applicable, pay_billing_master_history.chemical_handling_percent, pay_billing_master_history.dustbin_applicable, pay_billing_master_history.dustbin_unit, pay_billing_master_history.dustbin_liners_rate, pay_billing_master_history.dustbin_handling_applicable, pay_billing_master_history.dustbin_handling_percent, pay_billing_master_history.femina_applicable, pay_billing_master_history.femina_unit, pay_billing_master_history.femina_hygiene_rate, pay_billing_master_history.femina_handling_applicable, pay_billing_master_history.femina_handling_percent, pay_billing_master_history.aerosol_applicable, pay_billing_master_history.aerosol_unit, pay_billing_master_history.aerosol_dispenser_rate, pay_billing_master_history.aerosol_handling_applicable, pay_billing_master_history.aerosol_handling_percent, pay_billing_master_history.tool_tackles_rate, pay_billing_master_history.tool_applicable, pay_billing_master_history.tool_unit, pay_billing_master_history.tool_handling_applicable, pay_billing_master_history.tool_handling_percent, material_calc, material_days, material_area, " + machine_rental + ", pay_billing_master_history.handling_charges_amount,IF( gst_applicable  = 1 AND SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) = SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  type  = 'GST'),1, 2), " + gst + " ((IF( material_contract  != 0 AND  contract_type  = 2, ROUND((( contract_amount  *  material_area ) +  machine_rental_amount ), 2), ROUND( contract_amount  +  machine_rental_amount , 2)) + IF( pay_billing_master_history . handling_applicable  = 1, IF( pay_billing_master_history . handling_charges_amount  > 0,  pay_billing_master_history . handling_charges_amount , (IF( material_contract  != 0 AND  contract_type  = 2, ROUND((( contract_amount  *  material_area ) +  machine_rental_amount ), 2), ROUND(( contract_amount  +  machine_rental_amount ), 2)) *  pay_billing_master_history . handling_percent ) / 100), 0))) " + close + " *0.09, 0) AS 'CGST',IF( gst_applicable  = 1 AND SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) = SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  type  = 'GST'),1, 2), " + gst + " ((IF( material_contract  != 0 AND  contract_type  = 2, ROUND((( contract_amount  *  material_area ) +  machine_rental_amount ), 2), ROUND( contract_amount  +  machine_rental_amount , 2)) + IF( pay_billing_master_history . handling_applicable  = 1, IF( pay_billing_master_history . handling_charges_amount  > 0,  pay_billing_master_history . handling_charges_amount , (IF( material_contract  != 0 AND  contract_type  = 2, ROUND((( contract_amount  *  material_area ) +  machine_rental_amount ), 2), ROUND(( contract_amount  +  machine_rental_amount ), 2)) *  pay_billing_master_history . handling_percent ) / 100), 0)))" + close + "*0.09, 0)  as 'sgst', IF( gst_applicable  = 1 AND SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) != SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  type  = 'GST'),1, 2), " + gst + " ((IF( material_contract  != 0 AND  contract_type  = 2, ROUND((( contract_amount  *  material_area ) +  machine_rental_amount ), 2), ROUND( contract_amount  +  machine_rental_amount , 2)) + IF( pay_billing_master_history . handling_applicable  = 1, IF( pay_billing_master_history . handling_charges_amount  > 0,  pay_billing_master_history . handling_charges_amount , (IF( material_contract  != 0 AND  contract_type  = 2, ROUND((( contract_amount  *  material_area ) +  machine_rental_amount ), 2), ROUND(( contract_amount  +  machine_rental_amount ), 2)) *  pay_billing_master_history . handling_percent ) / 100), 0)))" + close + "*0.18, 0) AS  'igst' FROM pay_employee_master INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'Material' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code " + contract_inner + " WHERE  pay_billing_master_history.material_contract != 0 AND " + where;

            sql = "SELECT comp_code, client_code, unit_code, emp_code, client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, tot_days_present, month_days, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, GRADE_CODE, material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, equmental_handling_percent, chemical_applicable, chemical_unit, chemical_consumables_rate, chemical_handling_applicable, chemical_handling_percent, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, tool_applicable, tool_unit, tool_tackles_rate, tool_handling_applicable, tool_handling_percent, material_calc, material_days, material_area, gst_applicable, 'Material', machine_rental_applicable, machine_rental_amount," + daterange + ", handling_charges_amount, cgst, sgst, igst FROM (SELECT comp_code, client_code, unit_code, emp_code, client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, tot_days_present, month_days, gst_applicable, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, GRADE_CODE, material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, chemical_applicable, chemical_consumables_rate, chemical_unit, chemical_handling_applicable, chemical_handling_percent, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent, tool_tackles_rate, tool_applicable, tool_unit, tool_handling_applicable, tool_handling_percent, equmental_handling_percent, material_calc, material_days, material_area, machine_rental_applicable, machine_rental_amount, handling_charges_amount, cgst, sgst, igst FROM (SELECT pay_billing_unit_rate_history.comp_code, pay_billing_unit_rate_history.client_code, pay_billing_unit_rate_history.unit_code, pay_billing_unit_rate_history.emp_code, pay_billing_unit_rate_history.client, pay_billing_unit_rate_history.comp_state AS 'company_state', pay_billing_unit_rate_history.unit_name, pay_billing_unit_rate_history.state_name, pay_billing_unit_rate_history.unit_city, pay_billing_unit_rate_history.client_branch_code, (CASE pay_billing_unit_rate_history.Emp_type WHEN 'Reliever' THEN CONCAT(pay_billing_unit_rate_history.emp_name, '-', 'Reliever') ELSE pay_billing_unit_rate_history.emp_name END) AS 'emp_name', pay_billing_unit_rate_history.grade_desc, tot_days_present, pay_billing_unit_rate_history.month_days, pay_client_master.gst_applicable, pay_billing_unit_rate_history.month, pay_billing_unit_rate_history.year, pay_billing_unit_rate_history.COMP_ADDRESS1, pay_billing_unit_rate_history.COMP_ADDRESS2, pay_billing_unit_rate_history.comp_CITY AS 'COMP_CITY', pay_billing_unit_rate_history.PF_REG_NO, pay_billing_unit_rate_history.COMPANY_PAN_NO, pay_billing_unit_rate_history.COMPANY_TAN_NO, pay_billing_unit_rate_history.COMPANY_CIN_NO, pay_billing_unit_rate_history.SERVICE_TAX_REG_NO, pay_billing_unit_rate_history.ESIC_REG_NO, (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_billing_unit_rate_history.client_code AND pay_zone_master.region = pay_billing_unit_rate_history.state_name AND type = 'GST') AS 'unit_gst_no', pay_billing_unit_rate_history.COMPANY_NAME, (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_billing_unit_rate_history.client_code AND pay_zone_master.region = pay_billing_unit_rate_history.state_name AND comp_code = pay_billing_unit_rate_history.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', pay_unit_master.UNIT_ADD2, pay_billing_unit_rate_history.Emp_type AS 'EMP_TYPE', pay_billing_unit_rate_history.comp_STATE AS 'COMP_STATE', pay_billing_unit_rate_history.housekeeiing_sac_code, pay_billing_unit_rate_history.Security_sac_code, pay_billing_unit_rate_history.grade_code AS 'GRADE_CODE', pay_billing_master_history.material_contract, pay_billing_master_history.contract_type," + contract_amount + ", pay_billing_master_history.handling_applicable, pay_billing_master_history.handling_percent, pay_billing_master_history.equmental_applicable, pay_billing_master_history.equmental_unit, pay_billing_master_history.equmental_rental_rate, pay_billing_master_history.equmental_handling_applicable, pay_billing_master_history.equmental_handling_percent, pay_billing_master_history.chemical_applicable, pay_billing_master_history.chemical_consumables_rate, pay_billing_master_history.chemical_unit, pay_billing_master_history.chemical_handling_applicable, pay_billing_master_history.chemical_handling_percent, pay_billing_master_history.dustbin_applicable, pay_billing_master_history.dustbin_unit, pay_billing_master_history.dustbin_liners_rate, pay_billing_master_history.dustbin_handling_applicable, pay_billing_master_history.dustbin_handling_percent, pay_billing_master_history.femina_applicable, pay_billing_master_history.femina_unit, pay_billing_master_history.femina_hygiene_rate, pay_billing_master_history.femina_handling_applicable, pay_billing_master_history.femina_handling_percent, pay_billing_master_history.aerosol_applicable, pay_billing_master_history.aerosol_unit, pay_billing_master_history.aerosol_dispenser_rate, pay_billing_master_history.aerosol_handling_applicable, pay_billing_master_history.aerosol_handling_percent, pay_billing_master_history.tool_tackles_rate, pay_billing_master_history.tool_applicable, pay_billing_master_history.tool_unit, pay_billing_master_history.tool_handling_applicable, pay_billing_master_history.tool_handling_percent, material_calc, material_days, material_area," + machine_rental + ", pay_billing_master_history.handling_charges_amount, IF(pay_client_master.gst_applicable = 1 AND SUBSTRING(SERVICE_TAX_REG_NO,1, 2) = SUBSTRING((SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST'),1, 2), " + gst + " ((IF(pay_billing_master_history.material_contract != 0 AND pay_billing_master_history.contract_type = 2, ROUND(((pay_billing_master_history.contract_amount * material_area) + machine_rental_amount), 2), ROUND(pay_billing_master_history.contract_amount + machine_rental_amount, 2)) + IF(pay_billing_master_history.handling_applicable = 1, IF(pay_billing_master_history.handling_charges_amount > 0, pay_billing_master_history.handling_charges_amount, (IF(pay_billing_master_history.material_contract != 0 AND pay_billing_master_history.contract_type = 2, ROUND(((pay_billing_master_history.contract_amount * material_area) + machine_rental_amount), 2), ROUND((pay_billing_master_history.contract_amount + machine_rental_amount), 2)) * pay_billing_master_history.handling_percent) / 100), 0))) " + close + " * 0.09, 0) AS 'cgst', IF(pay_client_master.gst_applicable = 1 AND SUBSTRING(SERVICE_TAX_REG_NO,1, 2) = SUBSTRING((SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST'),1, 2), " + gst + " ((IF(pay_billing_master_history.material_contract != 0 AND pay_billing_master_history.contract_type = 2, ROUND(((pay_billing_master_history.contract_amount * material_area) + machine_rental_amount), 2), ROUND(pay_billing_master_history.contract_amount + machine_rental_amount, 2)) + IF(pay_billing_master_history.handling_applicable = 1, IF(pay_billing_master_history.handling_charges_amount > 0, pay_billing_master_history.handling_charges_amount, (IF(pay_billing_master_history.material_contract != 0 AND pay_billing_master_history.contract_type = 2, ROUND(((pay_billing_master_history.contract_amount * material_area) + machine_rental_amount), 2), ROUND((pay_billing_master_history.contract_amount + machine_rental_amount), 2)) * pay_billing_master_history.handling_percent) / 100), 0)))" + close + " * 0.09, 0) AS 'sgst', IF(pay_client_master.gst_applicable = 1 AND SUBSTRING(SERVICE_TAX_REG_NO,1, 2) != SUBSTRING((SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST'),1, 2)," + gst + " ((IF(pay_billing_master_history.material_contract != 0 AND pay_billing_master_history.contract_type = 2, ROUND(((pay_billing_master_history.contract_amount * material_area) + machine_rental_amount), 2), ROUND(pay_billing_master_history.contract_amount + machine_rental_amount, 2)) + IF(pay_billing_master_history.handling_applicable = 1, IF(pay_billing_master_history.handling_charges_amount > 0, pay_billing_master_history.handling_charges_amount, (IF(pay_billing_master_history.material_contract != 0 AND pay_billing_master_history.contract_type = 2, ROUND(((pay_billing_master_history.contract_amount * material_area) + machine_rental_amount), 2), ROUND((pay_billing_master_history.contract_amount + machine_rental_amount), 2)) * pay_billing_master_history.handling_percent) / 100), 0)))" + close + " * 0.18, 0) AS 'igst' FROM pay_billing_unit_rate_history INNER JOIN pay_unit_master ON pay_billing_unit_rate_history.unit_code = pay_unit_master.unit_code AND pay_billing_unit_rate_history.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate_history.comp_code AND pay_billing_master_history.comp_code = pay_billing_unit_rate_history.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate_history.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate_history.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate_history.month AND pay_billing_master_history.year = pay_billing_unit_rate_history.year AND pay_billing_unit_rate_history.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.hours = pay_billing_unit_rate_history.hours AND pay_billing_master_history.type = 'Material' INNER JOIN pay_client_master ON pay_billing_unit_rate_history.comp_code = pay_client_master.comp_code AND pay_billing_unit_rate_history.client_code = pay_client_master.client_code " + contract_inner + " WHERE pay_billing_master_history.material_contract != 0 and " + emp_flag + material_where;
            d.operation("delete from pay_billing_material_history where Type = 'Material' and " + delete_where + "");
            d.operation("insert into pay_billing_material_history(comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  state_name ,  unit_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc , tot_days_present,  month_days ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE ,  material_contract ,  contract_type ,  contract_amount ,  handling_applicable ,  handling_percent ,  equmental_applicable ,  equmental_unit ,  equmental_rental_rate ,  equmental_handling_applicable ,  equmental_handling_percent ,  chemical_applicable ,  chemical_unit ,  chemical_consumables_rate ,  chemical_handling_applicable ,  chemical_handling_percent ,  dustbin_applicable ,  dustbin_unit ,  dustbin_liners_rate ,  dustbin_handling_applicable ,  dustbin_handling_percent ,  femina_applicable ,  femina_unit ,  femina_hygiene_rate ,  femina_handling_applicable ,  femina_handling_percent ,  aerosol_applicable ,  aerosol_unit ,  aerosol_dispenser_rate ,  aerosol_handling_applicable ,  aerosol_handling_percent ,  tool_applicable ,  tool_unit ,  tool_tackles_rate ,  tool_handling_applicable ,  tool_handling_percent,material_calc,material_days,material_area,gst_applicable,Type,  machine_rental_applicable, machine_rental_amount,fromtodate,handling_charges_amount,cgst,sgst,igst) " + sql);

            if (ddl_client.SelectedValue == "RCPL")
            {
                material_comp_group(daterange);
            }
        }
        //conveyance
        else if (i == 3)
        {
            if (ddl_conveyance_type.SelectedValue == "1")
            {


                d.operation("insert into pay_billing_master_history (comp_code, billing_client_code, billing_state, billing_unit_code,policy_name1,start_date,end_date,designation,hours,create_user,create_date,month,year,type,conveyance_applicable,conveyance_type,conveyance_rate,conveyance_km,conveyance_service_charge,conveyance_service_charge_per,conveyance_service_amount,start_date_common,end_date_common) select comp_code, billing_client_code, billing_state, billing_unit_code,policy_name1,start_date,end_date,designation,hours,'" + Session["LOGIN_ID"].ToString() + "',now(),'" + txt_month_year.Text.Substring(0, 2) + "' ,'" + txt_month_year.Text.Substring(3) + "','Conveyance',conveyance_applicable,conveyance_type,conveyance_rate,conveyance_km,conveyance_service_charge,conveyance_service_charge_per,conveyance_service_amount,start_date_common,end_date_common from pay_billing_master where " + history_where);
                //change gst
                sql = "SELECT  comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  state_name ,  unit_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc , tot_days_present,  month_days ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE ,conveyance_rate ,conveyance_applicable ,conveyance_type ,Conveyance_PerKmRate,conveyance_service_charge ,conveyance_service_charge_per , conveyance_service_amount ,conveyance_km ,gst_applicable,'Conveyance' ," + daterange + ", cgst , sgst , igst,zone  FROM (SELECT  comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  company_state ,  unit_name ,  state_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc ,  tot_days_present ,  month_days ,  gst_applicable ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE , conveyance_rate ,conveyance_applicable ,conveyance_type ,Conveyance_PerKmRate,conveyance_service_charge ,conveyance_service_charge_per , conveyance_service_amount ,conveyance_km, cgst , sgst , igst,zone    FROM (SELECT  pay_unit_master . comp_code ,  pay_unit_master . client_code ,  pay_unit_master . unit_code ,  pay_employee_master . emp_code ,  client_name  AS 'client',  pay_company_master . state  AS 'company_state',  pay_unit_master . unit_name ,  pay_unit_master . state_name ,  pay_unit_master . unit_city ,  pay_unit_master . client_branch_code , (CASE  pay_employee_master . Employee_type  WHEN 'Reliever' THEN CONCAT( pay_employee_master . emp_name , '-', 'Reliever') ELSE  pay_employee_master . emp_name  END) AS 'emp_name',  pay_grade_master . grade_desc , tot_days_present,  pay_billing_unit_rate . month_days ,  gst_applicable ,  pay_attendance_muster . month ,  pay_attendance_muster . year ,  pay_company_master . ADDRESS1  AS 'COMP_ADDRESS1',  pay_company_master . ADDRESS2  AS 'COMP_ADDRESS2',  pay_company_master . CITY  AS 'COMP_CITY',  pay_company_master . PF_REG_NO ,  pay_company_master . COMPANY_PAN_NO ,  pay_company_master . COMPANY_TAN_NO ,  pay_company_master . COMPANY_CIN_NO ,  pay_company_master . SERVICE_TAX_REG_NO ,  pay_company_master . ESIC_REG_NO , (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST')  as 'unit_gst_no',  pay_company_master . COMPANY_NAME , (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1',  UNIT_ADD2 ,  pay_employee_master . Employee_type  AS 'EMP_TYPE',  pay_company_master . STATE  AS 'COMP_STATE',  pay_company_master . housekeeiing_sac_code ,  pay_company_master . Security_sac_code ,  pay_grade_master . grade_code  AS 'GRADE_CODE',pay_conveyance_amount_history.conveyance_rate, pay_billing_master_history.conveyance_applicable, pay_billing_master_history.conveyance_type, pay_billing_master_history.conveyance_rate AS 'Conveyance_PerKmRate', pay_billing_master_history.conveyance_service_charge, pay_billing_master_history.conveyance_service_charge_per, pay_billing_master_history.conveyance_service_amount, conveyance_km,(CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) = SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  comp_code  =  pay_company_master . comp_code  AND  type  = 'GST'),1, 2) THEN ((IF( conveyance_applicable  = 1 AND  conveyance_type = 2, ( pay_billing_master_history . conveyance_rate  *  conveyance_km ), pay_conveyance_amount_history. conveyance_rate )+(IF( conveyance_service_charge_per  <= 0,  conveyance_service_amount , (IF( conveyance_applicable  = 1 AND  conveyance_type  = 2, ( pay_billing_master_history . conveyance_rate  *  conveyance_km ),  pay_conveyance_amount_history . conveyance_rate ) *  conveyance_service_charge_per ) / 100))) * 0.09) ELSE 0 END) AS 'CGST', (CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) = SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  comp_code  =  pay_company_master . comp_code  AND  type  = 'GST'),1, 2) THEN ((IF( conveyance_applicable  = 1 AND  conveyance_type  = 2, ( pay_billing_master_history . conveyance_rate  *  conveyance_km ), pay_conveyance_amount_history. conveyance_rate )+(IF( conveyance_service_charge_per  <= 0,  conveyance_service_amount , (IF( conveyance_applicable  = 1 AND  conveyance_type  = 2, ( pay_billing_master_history . conveyance_rate  *  conveyance_km ),  pay_conveyance_amount_history . conveyance_rate ) *  conveyance_service_charge_per ) / 100))) * 0.09) ELSE 0 END) AS 'SGST', (CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) != SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  comp_code  =  pay_company_master . comp_code  AND  type  = 'GST'),1, 2) THEN ((IF( conveyance_applicable  = 1 AND  conveyance_type  = 2, ( pay_billing_master_history . conveyance_rate  *  conveyance_km ), pay_conveyance_amount_history. conveyance_rate )+(IF( conveyance_service_charge_per  <= 0,  conveyance_service_amount , (IF( conveyance_applicable  = 1 AND  conveyance_type  = 2, ( pay_billing_master_history . conveyance_rate  *  conveyance_km ),  pay_conveyance_amount_history . conveyance_rate ) *  conveyance_service_charge_per ) / 100))) * 0.18) ELSE 0 END) AS 'IGST',pay_unit_master.zone FROM pay_employee_master  INNER JOIN  " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_conveyance_amount_history ON pay_conveyance_amount_history.emp_code = pay_employee_master.emp_code AND pay_conveyance_amount_history.comp_code = pay_employee_master.comp_code AND pay_conveyance_amount_history.month = pay_attendance_muster.month AND pay_conveyance_amount_history.year = pay_attendance_muster.year INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'Conveyance' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code AND IF(pay_billing_master_history.conveyance_type != 2, pay_conveyance_amount_history.conveyance_rate, 1) > 0 WHERE  pay_billing_master_history.conveyance_applicable = 1 " + where_state + " and " + where;

                d.operation("delete from pay_billing_material_history where Type = 'Conveyance' and conveyance_type != '100' and " + delete_where + " ");
                d.operation("insert into pay_billing_material_history(comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  state_name ,  unit_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc , tot_days_present,  month_days ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE , conveyance_rate ,conveyance_applicable ,conveyance_type ,Conveyance_PerKmRate,conveyance_service_charge ,conveyance_service_charge_per , conveyance_service_amount ,conveyance_km,gst_applicable ,Type,fromtodate, cgst , sgst , igst,zone ) " + sql);
                //end gst
            }
            if (ddl_conveyance_type.SelectedValue == "2")
            {

                //driver conveyance
                //change gst 
                sql = "SELECT comp_code, client_code, unit_code, emp_code, client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, GRADE_CODE, 100 AS 'conveyance_type', conveyance_rate, kms, gst_applicable, 'Conveyance', " + daterange + ", CGST , SGST , IGST ,zone FROM (SELECT comp_code, client_code, unit_code, emp_code, client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, gst_applicable, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, GRADE_CODE, conveyance_rate, kms, CGST , SGST , IGST,zone  FROM (SELECT pay_unit_master.comp_code, pay_unit_master.client_code, pay_unit_master.unit_code, pay_employee_master.emp_code, client_name AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END) AS 'emp_name', pay_grade_master.grade_desc, gst_applicable, pay_conveyance_amount_history.month, pay_conveyance_amount_history.year, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO, pay_company_master.COMPANY_PAN_NO, pay_company_master.COMPANY_TAN_NO, pay_company_master.COMPANY_CIN_NO, pay_company_master.SERVICE_TAX_REG_NO, pay_company_master.ESIC_REG_NO, (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME, (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_employee_master.Employee_type AS 'EMP_TYPE', pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code, pay_grade_master.grade_code AS 'GRADE_CODE', (pay_conveyance_amount_history.conveyance_rate + (food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) AS 'conveyance_rate', ROUND(total_km / km_rate) AS 'kms',(CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) = SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  type  = 'GST'),1, 2) THEN ((((( food_allowance_rate  *  food_allowance_days ) + ( outstation_allowance_rate  *  outstation_allowance_days ) + ( outstation_food_allowance_rate  *  outstation_food_allowance_days ) + ( night_halt_rate  *  night_halt_days ) + ( total_km )) + ((( food_allowance_rate  *  food_allowance_days ) + ( outstation_allowance_rate  *  outstation_allowance_days ) + ( outstation_food_allowance_rate  *  outstation_food_allowance_days ) + ( night_halt_rate  *  night_halt_days ) + ( total_km )) * 5 / 100))) * 0.09) ELSE 0 END) AS 'CGST',(CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) = SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  type  = 'GST'),1, 2) THEN ((((( food_allowance_rate  *  food_allowance_days ) + ( outstation_allowance_rate  *  outstation_allowance_days ) + ( outstation_food_allowance_rate  *  outstation_food_allowance_days ) + ( night_halt_rate  *  night_halt_days ) + ( total_km )) + ((( food_allowance_rate  *  food_allowance_days ) + ( outstation_allowance_rate  *  outstation_allowance_days ) + ( outstation_food_allowance_rate  *  outstation_food_allowance_days ) + ( night_halt_rate  *  night_halt_days ) + ( total_km )) * 5 / 100))) * 0.09) ELSE 0 END) AS 'SGST',(CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) != SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  type  = 'GST'),1, 2) THEN ((((( food_allowance_rate  *  food_allowance_days ) + ( outstation_allowance_rate  *  outstation_allowance_days ) + ( outstation_food_allowance_rate  *  outstation_food_allowance_days ) + ( night_halt_rate  *  night_halt_days ) + ( total_km )) + ((( food_allowance_rate  *  food_allowance_days ) + ( outstation_allowance_rate  *  outstation_allowance_days ) + ( outstation_food_allowance_rate  *  outstation_food_allowance_days ) + ( night_halt_rate  *  night_halt_days ) + ( total_km )) * 5 / 100))) * 0.18) ELSE 0 END) AS 'IGST',zone FROM pay_employee_master INNER JOIN pay_unit_master ON pay_employee_master.unit_code = pay_unit_master.unit_code AND pay_employee_master.comp_code = pay_unit_master.comp_code INNER JOIN pay_conveyance_amount_history ON pay_conveyance_amount_history.emp_code = pay_employee_master.emp_code AND pay_conveyance_amount_history.comp_code = pay_employee_master.comp_code INNER JOIN pay_company_master ON pay_unit_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_unit_master.comp_code = pay_grade_master.comp_code AND pay_employee_master.grade_code = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code INNER JOIN pay_billing_master ON pay_billing_master.billing_unit_code = pay_employee_master.unit_code AND pay_billing_master.comp_code = pay_employee_master.comp_code AND pay_billing_master.designation = pay_employee_master.GRADE_CODE where " + driver_where + " ";

                d.operation("delete from pay_billing_material_history where conveyance_type = '100' and " + delete_where + " ");
                d.operation("insert into pay_billing_material_history( comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  state_name ,  unit_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code , GRADE_CODE ,   conveyance_type ,  conveyance_rate ,kms ,gst_applicable ,  Type ,  fromtodate,cgst,sgst,igst,zone ) " + sql);
                //end gst change
            }
        }
        //Deep Cleaning
        else if (i == 4)
        {
            d.operation("insert into pay_billing_master_history (comp_code, billing_client_code, billing_state, billing_unit_code,designation,hours,policy_name1,start_date,end_date,create_user,create_date,month,year,type,dc_contract,dc_type,dc_rate,dc_area,dc_handling_charge,dc_handling_percent,start_date_common,end_date_common) select comp_code, billing_client_code, billing_state, billing_unit_code,designation,hours,policy_name1,start_date,end_date,'" + Session["LOGIN_ID"].ToString() + "',now(),'" + txt_month_year.Text.Substring(0, 2) + "' ,'" + txt_month_year.Text.Substring(3) + "','DeepClean',dc_contract,dc_type,dc_rate,dc_area,dc_handling_charge,dc_handling_percent,start_date_common,end_date_common from pay_billing_master where " + history_where);

            sql = "SELECT  comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  state_name ,  unit_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc , tot_days_present,  month_days ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE , dc_contract ,dc_type ,dc_rate ,dc_area ,dc_handling_charge ,dc_handling_percent,gst_applicable,'DeepClean'," + daterange + ",cgst,sgst,igst FROM (SELECT  comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  company_state ,  unit_name ,  state_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc ,  tot_days_present ,  month_days ,  gst_applicable ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE ,  dc_contract ,dc_type ,dc_rate ,dc_area ,dc_handling_charge ,dc_handling_percent,cgst,sgst,igst  FROM (SELECT  pay_unit_master . comp_code ,  pay_unit_master . client_code ,  pay_unit_master . unit_code ,  pay_employee_master . emp_code ,  client_name  AS 'client',  pay_company_master . state  AS 'company_state',  pay_unit_master . unit_name ,  pay_unit_master . state_name ,  pay_unit_master . unit_city ,  pay_unit_master . client_branch_code , (CASE  pay_employee_master . Employee_type  WHEN 'Reliever' THEN CONCAT( pay_employee_master . emp_name , '-', 'Reliever') ELSE  pay_employee_master . emp_name  END) AS 'emp_name',  pay_grade_master . grade_desc , tot_days_present,  pay_billing_unit_rate . month_days ,  gst_applicable ,  pay_attendance_muster . month ,  pay_attendance_muster . year ,  pay_company_master . ADDRESS1  AS 'COMP_ADDRESS1',  pay_company_master . ADDRESS2  AS 'COMP_ADDRESS2',  pay_company_master . CITY  AS 'COMP_CITY',  pay_company_master . PF_REG_NO ,  pay_company_master . COMPANY_PAN_NO ,  pay_company_master . COMPANY_TAN_NO ,  pay_company_master . COMPANY_CIN_NO ,  pay_company_master . SERVICE_TAX_REG_NO ,  pay_company_master . ESIC_REG_NO , (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST')  as 'unit_gst_no',  pay_company_master . COMPANY_NAME , (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1',  UNIT_ADD2 ,  pay_employee_master . Employee_type  AS 'EMP_TYPE',  pay_company_master . STATE  AS 'COMP_STATE',  pay_company_master . housekeeiing_sac_code ,  pay_company_master . Security_sac_code ,  pay_grade_master . grade_code  AS 'GRADE_CODE', pay_billing_master_history . dc_contract ,pay_billing_master_history . dc_type ,pay_billing_master_history . dc_rate ,pay_billing_master_history . dc_area ,pay_billing_master_history . dc_handling_charge , pay_billing_master_history . dc_handling_percent,(CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) = SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  comp_code  =  pay_company_master . comp_code  AND  type  = 'GST'),1, 2) THEN (IF( dc_contract  = 1 AND  dc_type  = 2, ( dc_rate  *  dc_area ),  dc_rate )*0.09) ELSE 0 END) AS 'CGST', (CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) = SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  comp_code  =  pay_company_master . comp_code  AND  type = 'GST'),1, 2) THEN (IF( dc_contract  = 1 AND  dc_type  = 2, ( dc_rate  *  dc_area ),  dc_rate )*0.09) ELSE 0 END) AS 'SGST', (CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) != SUBSTRING((SELECT  field2  FROM  pay_zone_master  WHERE  pay_zone_master . client_code  =  pay_client_master . client_code  AND  pay_zone_master . region  =  pay_unit_master . state_name  AND  comp_code  =  pay_company_master . comp_code  AND  type  = 'GST'),1, 2) THEN (IF( dc_contract  = 1 AND  dc_type  = 2, ( dc_rate  *  dc_area ),  dc_rate )*0.18) ELSE 0 END) AS 'IGST'  FROM pay_employee_master INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'DeepClean' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE pay_billing_master_history.dc_contract = 1 AND " + where;

            d.operation("delete from pay_billing_material_history where Type = 'DeepClean' and " + delete_where + " ");
            d.operation("insert into pay_billing_material_history(comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  state_name ,  unit_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc , tot_days_present,  month_days ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE ,dc_contract ,dc_type ,dc_rate ,dc_area ,dc_handling_charge ,dc_handling_percent,gst_applicable,Type,fromtodate,cgst,sgst,igst) " + sql);
        }
        //pest Control
        else if (i == 5)
        {
            d.operation("insert into pay_billing_master_history (comp_code, billing_client_code, billing_state, billing_unit_code,designation,hours,policy_name1,start_date,end_date,create_user,create_date,month,year,type,pc_contract,pc_type,pc_rate,pc_area,pc_handling_charge,pc_handling_percent,start_date_common,end_date_common) select comp_code, billing_client_code, billing_state, billing_unit_code,designation,hours,policy_name1,start_date,end_date,'" + Session["LOGIN_ID"].ToString() + "',now(),'" + txt_month_year.Text.Substring(0, 2) + "' ,'" + txt_month_year.Text.Substring(3) + "','PestControl',pc_contract,pc_type,pc_rate,pc_area,pc_handling_charge,pc_handling_percent ,start_date_common,end_date_common from pay_billing_master where " + history_where);

            sql = "SELECT  comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  state_name ,  unit_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc , tot_days_present,  month_days ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE ,  pc_contract , pc_type , pc_rate , pc_area , pc_handling_charge , pc_handling_percent ,gst_applicable,'PestControl'," + daterange + " FROM (SELECT  comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  company_state ,  unit_name ,  state_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc ,  tot_days_present ,  month_days ,  gst_applicable ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE , pc_contract , pc_type , pc_rate , pc_area , pc_handling_charge , pc_handling_percent   FROM (SELECT  pay_unit_master . comp_code ,  pay_unit_master . client_code ,  pay_unit_master . unit_code ,  pay_employee_master . emp_code ,  client_name  AS 'client',  pay_company_master . state  AS 'company_state',  pay_unit_master . unit_name ,  pay_unit_master . state_name ,  pay_unit_master . unit_city ,  pay_unit_master . client_branch_code , (CASE  pay_employee_master . Employee_type  WHEN 'Reliever' THEN CONCAT( pay_employee_master . emp_name , '-', 'Reliever') ELSE  pay_employee_master . emp_name  END) AS 'emp_name',  pay_grade_master . grade_desc , tot_days_present,  pay_billing_unit_rate . month_days ,  gst_applicable ,  pay_attendance_muster . month ,  pay_attendance_muster . year ,  pay_company_master . ADDRESS1  AS 'COMP_ADDRESS1',  pay_company_master . ADDRESS2  AS 'COMP_ADDRESS2',  pay_company_master . CITY  AS 'COMP_CITY',  pay_company_master . PF_REG_NO ,  pay_company_master . COMPANY_PAN_NO ,  pay_company_master . COMPANY_TAN_NO ,  pay_company_master . COMPANY_CIN_NO ,  pay_company_master . SERVICE_TAX_REG_NO ,  pay_company_master . ESIC_REG_NO , (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST')  as 'unit_gst_no',  pay_company_master . COMPANY_NAME , (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1',  UNIT_ADD2 ,  pay_employee_master . Employee_type  AS 'EMP_TYPE',  pay_company_master . STATE  AS 'COMP_STATE',  pay_company_master . housekeeiing_sac_code ,  pay_company_master . Security_sac_code ,  pay_grade_master . grade_code  AS 'GRADE_CODE', pay_billing_master_history . pc_contract ,pay_billing_master_history . pc_type ,pay_billing_master_history . pc_rate ,pay_billing_master_history . pc_area ,pay_billing_master_history . pc_handling_charge ,pay_billing_master_history . pc_handling_percent  FROM pay_employee_master INNER JOIN " + pay_attendance_muster + " ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate ON pay_attendance_muster.unit_code = pay_billing_unit_rate.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate.month AND pay_attendance_muster.year = pay_billing_unit_rate.year INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_billing_unit_rate.comp_code AND pay_billing_master_history.comp_code = pay_employee_master.comp_code AND pay_billing_master_history.billing_client_code = pay_billing_unit_rate.client_code AND pay_billing_master_history.billing_unit_code = pay_billing_unit_rate.unit_code AND pay_billing_master_history.month = pay_billing_unit_rate.month AND pay_billing_master_history.year = pay_billing_unit_rate.year AND pay_employee_master.grade_code = pay_billing_master_history.designation AND pay_billing_master_history.designation = pay_billing_unit_rate.designation AND pay_billing_master_history.hours = pay_billing_unit_rate.hours AND pay_billing_master_history.type = 'PestControl' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history.comp_code = pay_grade_master.comp_code AND pay_billing_master_history.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE  pay_billing_master_history.pc_contract = 1 AND " + where;

            d.operation("delete from pay_billing_material_history where Type = 'PestControl' and " + delete_where + " ");
            d.operation("insert into pay_billing_material_history(comp_code ,  client_code ,  unit_code ,  emp_code ,  client ,  state_name ,  unit_name ,  unit_city ,  client_branch_code ,  emp_name ,  grade_desc , tot_days_present,  month_days ,  month ,  year ,  COMP_ADDRESS1 ,  COMP_ADDRESS2 ,  COMP_CITY ,  PF_REG_NO ,  COMPANY_PAN_NO ,  COMPANY_TAN_NO ,  COMPANY_CIN_NO ,  SERVICE_TAX_REG_NO ,  ESIC_REG_NO ,  unit_gst_no ,  COMPANY_NAME ,  UNIT_full_ADD1 ,  UNIT_ADD2 ,  EMP_TYPE ,  COMP_STATE ,  housekeeiing_sac_code ,  Security_sac_code ,  GRADE_CODE , pc_contract , pc_type , pc_rate , pc_area , pc_handling_charge , pc_handling_percent ,gst_applicable,Type,fromtodate) " + sql);
        }
        //R&M Services
        else if (i == 6)
        {
            d.operation("insert into pay_billing_master_history (comp_code, billing_client_code, billing_state,  billing_unit_code, designation, hours, policy_name1, start_date, end_date, create_user, create_date, month, year, type, start_date_common, end_date_common, service_charge_r_m, rm_service_rate_rs, rm_service_rate_percent)  SELECT  comp_code, billing_client_code, billing_state, billing_unit_code, designation, hours, policy_name1, start_date, end_date,'" + Session["LOGIN_ID"].ToString() + "',now(),'" + txt_month_year.Text.Substring(0, 2) + "' ,'" + txt_month_year.Text.Substring(3) + "', 'r_m_billing', start_date_common, end_date_common, service_charge_r_m, rm_service_rate_rs, rm_service_rate_percent FROM pay_billing_master where " + history_where);

            sql = "SELECT  comp_code, client_code, unit_code, client, state_name, unit_name, unit_city, client_branch_code,emp_code, emp_name, (Total) AS 'Amount', IF(((Total * service_charge_perc) / 100) = 0, service_charge_amount, ((Total * service_charge_perc) / 100)) AS 'Service_charge', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, 'Maharashtra') THEN ROUND((((IF(((Total * service_charge_perc) / 100) = 0,Total+ service_charge_amount, Total + ((Total * service_charge_perc) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, 'Maharashtra') != 1 THEN ROUND((((IF(((Total * service_charge_perc) / 100) = 0, Total+service_charge_amount, Total + ((Total * service_charge_perc) / 100))) * 18) / 100), 2) ELSE 0 END AS 'IGST18', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, 'Maharashtra') THEN ROUND((((IF(((Total * service_charge_perc) / 100) = 0, Total+service_charge_amount,Total + ((Total * service_charge_perc) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', service_charge_perc,   service_charge_amount," + daterange + ", branch_type ,  gst_applicable, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, COMP_STATE, housekeeiing_sac_code, Security_sac_code,  gst_applicable, '" + ddl_start_date_common.SelectedValue + "' AS 'start_date', '" + ddl_end_date_common.SelectedValue + "' AS 'end_date',  txt_zone, zone FROM (SELECT  comp_code, client_code, unit_code, client, company_state, unit_name, state_name, unit_city, client_branch_code,emp_code, emp_name, (amount) AS 'Total', branch_type, gst_applicable, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, COMP_STATE, housekeeiing_sac_code, Security_sac_code, txt_zone, zone, service_charge_r_m, IF(service_charge_r_m = 1, rm_service_rate_rs, 0) AS 'service_charge_amount', IF(service_charge_r_m = 1, rm_service_rate_percent, 0) AS 'service_charge_perc' FROM (SELECT  pay_unit_master.comp_code, pay_unit_master.client_code, pay_unit_master.unit_code, client_name AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, emp_code,(party_name) AS 'emp_name', IFNULL(branch_type, 0) AS 'branch_type', pay_client_master.gst_applicable, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO, pay_company_master.COMPANY_PAN_NO, pay_company_master.COMPANY_TAN_NO, pay_company_master.COMPANY_CIN_NO, pay_company_master.SERVICE_TAX_REG_NO, pay_company_master.ESIC_REG_NO, (SELECT  field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = 'All' AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME, (SELECT  field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = 'All' AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code, pay_company_master.Security_sac_code, pay_unit_master.txt_zone, pay_unit_master.zone, amount, service_charge_r_m, rm_service_rate_rs, rm_service_rate_percent, pay_r_and_m_service.month, pay_r_and_m_service.year FROM pay_r_and_m_service INNER JOIN pay_unit_master ON pay_r_and_m_service.unit_code = pay_unit_master.unit_code AND pay_r_and_m_service.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_r_and_m_service.comp_code AND pay_billing_master_history.comp_code = pay_r_and_m_service.comp_code AND pay_billing_master_history.billing_client_code = pay_r_and_m_service.client_code AND pay_billing_master_history.billing_unit_code = pay_r_and_m_service.unit_code AND pay_billing_master_history.month = pay_r_and_m_service.month AND pay_billing_master_history.year = pay_r_and_m_service.year AND pay_billing_master_history.type = 'r_m_billing' INNER JOIN pay_company_master ON pay_r_and_m_service.comp_code = pay_company_master.comp_code INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE " + r_m_where;

            d.operation("delete from pay_billing_r_m where " + delete_where + " ");

            res = d.operation("insert into pay_billing_r_m(comp_code,client_code,unit_code,client,state_name,unit_name,unit_city,client_branch_code,emp_code,emp_name,Amount,Service_charge,CGST9,IGST18,SGST9,bill_service_charge,bill_service_charge_amount,fromtodate,branch_type,gst_applicable,month,year ,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2,COMP_STATE , housekeeiing_sac_code, Security_sac_code,billing_gst_applicable,start_date,end_date,txt_zone,zone) " + sql);

        }
         //Administrative Expense
        else if (i == 7)
        {
            d.operation("insert into pay_billing_master_history (comp_code, billing_client_code, billing_state,  billing_unit_code, designation, hours, policy_name1, start_date, end_date, create_user, create_date, month, year, type, start_date_common, end_date_common, service_charge_admini, admini_service_rate_rs, admini_service_rate_percent)  SELECT  comp_code, billing_client_code, billing_state, billing_unit_code, designation, hours, policy_name1, start_date, end_date,'" + Session["LOGIN_ID"].ToString() + "',now(),'" + txt_month_year.Text.Substring(0, 2) + "' ,'" + txt_month_year.Text.Substring(3) + "', 'administrative_ex_billing', start_date_common, end_date_common, service_charge_admini, admini_service_rate_rs, admini_service_rate_percent FROM pay_billing_master where " + history_where);

            sql = "SELECT  comp_code, client_code, unit_code, client, state_name, unit_name, unit_city, client_branch_code,emp_code, emp_name, (Total) AS 'Amount', IF(((Total * service_charge_perc) / 100) = 0, service_charge_amount, ((Total * service_charge_perc) / 100)) AS 'Service_charge', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, 'Maharashtra') THEN ROUND((((IF(((Total * service_charge_perc) / 100) = 0, Total+service_charge_amount, Total + ((Total * service_charge_perc) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, 'Maharashtra') != 1 THEN ROUND((((IF(((Total * service_charge_perc) / 100) = 0, Total+service_charge_amount, Total + ((Total * service_charge_perc) / 100))) * 18) / 100), 2) ELSE 0 END AS 'IGST18', CASE WHEN gst_applicable = 1 AND LOCATE(company_state, 'Maharashtra') THEN ROUND((((IF(((Total * service_charge_perc) / 100) = 0, Total+service_charge_amount,Total + ((Total * service_charge_perc) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', service_charge_perc,   service_charge_amount," + daterange + ", branch_type ,  gst_applicable, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, COMP_STATE, housekeeiing_sac_code, Security_sac_code,  gst_applicable, '" + ddl_start_date_common.SelectedValue + "' AS 'start_date', '" + ddl_end_date_common.SelectedValue + "' AS 'end_date',  txt_zone, zone,days FROM (SELECT  comp_code, client_code, unit_code, client, company_state, unit_name, state_name, unit_city, client_branch_code,emp_code, emp_name, (amount) AS 'Total', branch_type, gst_applicable, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, COMP_STATE, housekeeiing_sac_code, Security_sac_code, txt_zone, zone, service_charge_admini, IF(service_charge_admini = 1, admini_service_rate_rs, 0) AS 'service_charge_amount', IF(service_charge_admini = 1, admini_service_rate_percent, 0) AS 'service_charge_perc',days FROM (SELECT  pay_unit_master.comp_code, pay_unit_master.client_code, pay_unit_master.unit_code, client_name AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code,emp_code, (party_name) AS 'emp_name', IFNULL(branch_type, 0) AS 'branch_type', pay_client_master.gst_applicable, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO, pay_company_master.COMPANY_PAN_NO, pay_company_master.COMPANY_TAN_NO, pay_company_master.COMPANY_CIN_NO, pay_company_master.SERVICE_TAX_REG_NO, pay_company_master.ESIC_REG_NO, (SELECT  field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = 'All' AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME, (SELECT  field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = 'All' AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code, pay_company_master.Security_sac_code, pay_unit_master.txt_zone, pay_unit_master.zone, amount, service_charge_admini, admini_service_rate_rs, admini_service_rate_percent, pay_administrative_expense.month, pay_administrative_expense.year,days FROM pay_administrative_expense INNER JOIN pay_unit_master ON pay_administrative_expense.unit_code = pay_unit_master.unit_code AND pay_administrative_expense.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_master_history ON pay_billing_master_history.comp_code = pay_administrative_expense.comp_code AND pay_billing_master_history.comp_code = pay_administrative_expense.comp_code AND pay_billing_master_history.billing_client_code = pay_administrative_expense.client_code AND pay_billing_master_history.billing_unit_code = pay_administrative_expense.unit_code AND pay_billing_master_history.month = pay_administrative_expense.month AND pay_billing_master_history.year = pay_administrative_expense.year AND pay_billing_master_history.type = 'administrative_ex_billing' INNER JOIN pay_company_master ON pay_administrative_expense.comp_code = pay_company_master.comp_code INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE " + admini_ex_where;

            d.operation("delete from pay_billing_admini_expense where " + delete_where + " ");

            res = d.operation("insert into pay_billing_admini_expense(comp_code,client_code,unit_code,client,state_name,unit_name,unit_city,client_branch_code,emp_code,emp_name,Amount,Service_charge,CGST9,IGST18,SGST9,bill_service_charge,bill_service_charge_amount,fromtodate,branch_type,gst_applicable,month,year ,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2,COMP_STATE , housekeeiing_sac_code, Security_sac_code,billing_gst_applicable,start_date,end_date,txt_zone,zone,days) " + sql);


        }


    }
    public void comp_group(string date_range)
    {
        double total = 0, gst = 0;
        string club_invoice = "";
        string invoice_no_gen = "";
        string billing_type = "And (bill_type is null || bill_type ='')", bill_type = "and billing_type = 'Manpower'", bill = "'Manpower'";
        if (arrears_invoice == 1) { billing_type = "and bill_type = 'Arrears_bill'"; bill_type = "and billing_type = 'Arrears_bill' "; bill = "'Arrears_bill'"; }
        string invoice_history_Where_clause = " where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code =  '" + ddl_unitcode.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and invoice_type = '" + ddl_invoice_type.SelectedValue + "' and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' and designation = '" + ddl_designation.SelectedValue + "' " + bill_type;

        if (ddl_invoice_type.SelectedValue == "2")
        {
            club_invoice = "and GRADE_CODE = '" + ddl_designation.SelectedValue + "'";
        }
        string branch_where = " comp_code = '" + Session["comp_code"].ToString() + "' and unit_code = '" + ddl_unitcode.SelectedValue + "'";
        d.operation("Drop table IF EXISTS comp_group");
        d.operation("CREATE TABLE comp_group (Id int(11) AUTO_INCREMENT PRIMARY KEY,comp_code varchar(30),client_code varchar(30),unit_code varchar(30),state_name varchar(100),comp_name varchar(50),amount double DEFAULT  0,percent double DEFAULT 0)");

        string where = "pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedValue + "'  and pay_billing_unit_rate_history.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' and pay_billing_unit_rate_history.tot_days_present > 0 " + club_invoice + " GROUP BY pay_billing_unit_rate_history.state_name";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = "pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_billing_unit_rate_history.tot_days_present > 0  " + club_invoice + " GROUP BY pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.grade_desc";
            branch_where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = "pay_billing_unit_rate_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_billing_unit_rate_history.tot_days_present > 0  " + club_invoice + " GROUP BY pay_billing_unit_rate_history.state_name,pay_billing_unit_rate_history.grade_desc";
            branch_where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'";
        }

        //string amount = d.getsinglestring("SELECT (SUM(Amount) + SUM(Service_charge)+ SUM(uniform)+ SUM(operational_cost)) AS 'total' from pay_billing_unit_rate_history WHERE "+where);
        string where1 = " month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and comp_code='" + Session["comp_code"].ToString() + "'";
        MySqlCommand cmd = new MySqlCommand("Select Unit_code,state_name from pay_unit_master where " + branch_where, d.con1);
        d.con1.Open();
        MySqlDataReader dr = cmd.ExecuteReader();
        while (dr.Read())
        {
            string unit_code = dr.GetValue(0).ToString();
            string state = dr.GetValue(1).ToString();

            string amount = d.getsinglestring("SELECT (SUM(Amount) + SUM(Service_charge)+ SUM(uniform)+ SUM(operational_cost)) AS 'total' from pay_billing_unit_rate_history WHERE " + where);

            //data will not found then return
            if (amount.Equals(""))
            {
                d.con1.Close();
                dr.Dispose();
                return;
            }
            MySqlCommand cmd_cg = new MySqlCommand("Select comp_name,IFNULL(percent,0) as percent,Companyname_gst_no,gst_address from pay_company_group where comp_code ='" + Session["COMP_CODE"].ToString() + "' and unit_code = '" + dr.GetValue(0).ToString() + "'", d1.con1);
            d1.con1.Open();
            MySqlDataReader dr_cg = cmd_cg.ExecuteReader();
            while (dr_cg.Read())
            {
                string invoice_clause = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'";
                invoice_history_Where_clause = " where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code =  '" + ddl_unitcode.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and invoice_type = '" + ddl_invoice_type.SelectedValue + "' and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' and designation = '" + ddl_designation.SelectedValue + "' and comp_name = '" + dr_cg.GetValue(0).ToString() + "' " + bill_type;
                string inv_no = d.getsinglestring("select invoice_no from  pay_billing_invoice_history " + invoice_history_Where_clause);
                if (!inv_no.Equals(""))
                {
                    invoice_no_gen = inv_no;

                }
                else
                {
                    invoice_no_gen = btnnew_Click(invoice_clause, 0);
                }
                //String  invoice_new = d.getsinglestring("select group_concat(distinct(emp_code)) as 'emp_code' from pay_billing_unit_rate_history  " + where + " " + billing_type);
                total = (double.Parse(amount) * double.Parse(dr_cg.GetValue(1).ToString())) / 100;
                gst = total * 0.18;
                //  d.operation("Insert Into comp_group (comp_code,client_code,unit_code,state_name,comp_name,amount,percent) values('"+ Session["comp_code"].ToString() + "','" + ddl_client.SelectedValue + "','"+ unit_code + "','" + state + "','" + dr_cg.GetValue(0).ToString() + "','" + total+ "','" + dr_cg.GetValue(1).ToString() + "')");

                //old 
                //d.operation("Insert into pay_billing_unit_rate_history (comp_code,client_code,unit_code,state_name,state_per,month,year,client,fromtodate,Amount,bill_amount,COMP_ADDRESS1,COMP_ADDRESS2,COMP_CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,COMPANY_NAME,COMP_STATE,auto_invoice_no,companyname_gst_no,gst_address) SELECT pay_company_master.comp_code,pay_company_group.client_code,pay_company_group.unit_code,state_name,comp_name,'" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + ddl_client.SelectedItem.Text + "'," + date_range + ",'" + total + "' AS 'Amount',  percent,ADDRESS1,ADDRESS2,CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,COMPANY_NAME,STATE, '" + invoice_no_gen + "' as 'auto_invoice_no','" + dr_cg.GetValue(2).ToString() + "' as 'companyname_gst_no','" + dr_cg.GetValue(3).ToString() + "' as 'gst_address'  FROM  pay_company_group INNER JOIN pay_company_master ON pay_company_group.comp_code = pay_company_master.comp_code INNER JOIN pay_unit_master ON pay_unit_master.comp_code = pay_company_master.comp_code and pay_unit_master.unit_code = pay_company_group.unit_code  WHERE  pay_company_group.client_code  = '" + ddl_client.SelectedValue + "' AND  pay_company_master . comp_code  = '" + Session["COMP_CODE"].ToString() + "' and pay_company_group.Companyname_gst_no='" + dr_cg.GetValue(2).ToString() + "'");

                d.operation("Insert into pay_billing_unit_rate_history (comp_code,client_code,unit_code,state_name,state_per,month,year,client,fromtodate,Amount,bill_amount,COMP_ADDRESS1,COMP_ADDRESS2,COMP_CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,COMPANY_NAME,COMP_STATE,auto_invoice_no,invoice_no,companyname_gst_no,gst_address, housekeeiing_sac_code,Security_sac_code,IGST18,start_date,end_date) SELECT pay_company_master.comp_code,pay_company_group.client_code,pay_company_group.unit_code,state_name,comp_name,'" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + ddl_client.SelectedItem.Text + "'," + date_range + ",'" + total + "' AS 'Amount',  percent,ADDRESS1,ADDRESS2,CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,COMPANY_NAME,STATE, '" + invoice_no_gen + "' as 'auto_invoice_no','" + invoice_no_gen + "' as 'invoice_no','" + dr_cg.GetValue(2).ToString() + "' as 'companyname_gst_no','" + dr_cg.GetValue(3).ToString() + "' as 'gst_address',pay_company_master.housekeeiing_sac_code,pay_company_master.Security_sac_code," + gst + " ," + ddl_start_date_common.SelectedValue + "," + ddl_end_date_common.SelectedValue + " FROM  pay_company_group INNER JOIN pay_company_master ON pay_company_group.comp_code = pay_company_master.comp_code INNER JOIN pay_unit_master ON pay_unit_master.comp_code = pay_company_master.comp_code and pay_unit_master.unit_code = pay_company_group.unit_code  WHERE  pay_company_group.client_code  = '" + ddl_client.SelectedValue + "' AND  pay_company_master . comp_code  = '" + Session["COMP_CODE"].ToString() + "' and pay_company_group.Companyname_gst_no='" + dr_cg.GetValue(2).ToString() + "'");
                d.operation("delete from pay_billing_invoice_history  " + invoice_history_Where_clause);
                d.operation("insert into pay_billing_invoice_history(Invoice_No,comp_code,CLIENT_CODE,state_name,unit_code,month,year,Invoice_type,designation,billing_type,start_date,end_date,comp_name,region) values('" + invoice_no_gen + "','" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + ddl_billing_state.SelectedValue + "','" + ddl_unitcode.SelectedValue + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + ddl_invoice_type.SelectedValue + "','" + ddl_designation.SelectedValue + "'," + bill + ",'" + ddl_start_date_common.SelectedValue + "','" + ddl_end_date_common.SelectedValue + "','" + dr_cg.GetValue(0).ToString() + "','" + ddlregion.SelectedValue + "')");
                d.operation("delete from payment_history where  invoice_no='" + invoice_no_gen + "' and  " + where1);
                d.operation("INSERT INTO payment_history (invoice_no, comp_code, client_code, client_name, state_name, unit_code,unit_name, billing_amt,taxable_amount, month, year, billing_date, GST_Amount,designation,Invoice_type) SELECT invoice_no, pay_billing_unit_rate_history.comp_code, client_code, client, IF('" + ddl_billing_state.SelectedValue + "' = 'ALL', 'ALL', state_name) AS 'state_name', IF('" + ddl_unitcode.SelectedValue + "' = 'ALL', 'ALL', unit_code) AS 'unit_code', IF('" + ddl_unitcode.SelectedValue + "' = 'ALL', 'ALL', unit_name) AS 'unit_name',  IF(billing_gst_applicable = 1, ROUND('" + total + "' + (('" + total + "') * 18 / 100)), ROUND('" + total + "', 2)) AS 'grand_amount',  ROUND('" + total + "', 2) AS 'taxable amount', month, year, billing_date, IF(billing_gst_applicable = 1, ROUND((('" + total + "') * 18 / 100), 2), 0) AS 'gst_amount', IF('" + ddl_designation.SelectedValue + "' = '', 'ALL', grade_desc) AS 'designation', 'ManPower' FROM pay_billing_unit_rate_history INNER JOIN pay_company_master ON pay_billing_unit_rate_history.comp_code = pay_company_master.comp_code WHERE invoice_no = '" + invoice_no_gen + "' AND month = '" + txt_month_year.Text.Substring(0, 2) + "' AND year = '" + txt_month_year.Text.Substring(3) + "' AND pay_billing_unit_rate_history.comp_code = '" + Session["COMP_CODE"].ToString() + "' GROUP BY invoice_no");
            }
            dr_cg.Dispose();
            dr_cg.Close();
            d1.con1.Close();
        }
        d.operation("update pay_billing_unit_rate_history left outer join (select sum(pf) as pf, sum(esic) as esic, sum(lwf) as lwf, a.month,a.client_code,a.year from pay_billing_unit_rate_history a where 'RCPL' = a.client_code and " + txt_month_year.Text.Substring(0, 2) + " = a.month AND " + txt_month_year.Text.Substring(3) + " = a.year and a.emp_code is not null and auto_invoice_no is null) a on pay_billing_unit_rate_history.client_Code = a.client_code AND pay_billing_unit_rate_history.month = a.month AND pay_billing_unit_rate_history.year = a.year set pay_billing_unit_rate_history.pf = (a.pf * bill_amount / 100), pay_billing_unit_rate_history.esic = (a.esic * bill_amount / 100), pay_billing_unit_rate_history.lwf = (a.lwf * bill_amount / 100) where pay_billing_unit_rate_history.client_Code = 'RCPL' and pay_billing_unit_rate_history.month=" + txt_month_year.Text.Substring(0, 2) + " and pay_billing_unit_rate_history.year=" + txt_month_year.Text.Substring(3) + " and pay_billing_unit_rate_history.auto_invoice_no is not null");
        dr.Dispose();
        dr.Close();
        d.con1.Close();
    }

    public void material_comp_group(string date_range)
    {
        double total = 0, handling_amount = 0, machine_rent_amount = 0, igst = 0;
        string club_invoice = "";
        string invoice_no_gen = "";
        string bill_type = "and billing_type = 'Material'", bill = "'Material'";

        string invoice_history_Where_clause = " where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code =  '" + ddl_unitcode.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and invoice_type = '" + ddl_invoice_type.SelectedValue + "' and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' and designation = '" + ddl_designation.SelectedValue + "' " + bill_type;

        if (ddl_invoice_type.SelectedValue == "2")
        {
            club_invoice = "and GRADE_CODE = '" + ddl_designation.SelectedValue + "'";
        }
        string branch_where = " comp_code = '" + Session["comp_code"].ToString() + "' and unit_code = '" + ddl_unitcode.SelectedValue + "'";
        d.operation("Drop table IF EXISTS comp_group");
        d.operation("CREATE TABLE comp_group (Id int(11) AUTO_INCREMENT PRIMARY KEY,comp_code varchar(30),client_code varchar(30),unit_code varchar(30),state_name varchar(100),comp_name varchar(50),amount double DEFAULT  0,percent double DEFAULT 0)");

        string where = "pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_material_history.state_name = '" + ddl_billing_state.SelectedValue + "'  and pay_billing_material_history.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "' " + club_invoice + " GROUP BY pay_billing_material_history.unit_code";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = "pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "'  " + club_invoice + " GROUP BY pay_billing_material_history.unit_code";
            branch_where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = "pay_billing_material_history.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_material_history.client_code = '" + ddl_client.SelectedValue + "' and pay_billing_material_history.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_billing_material_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.Year = '" + txt_month_year.Text.Substring(3) + "'  " + club_invoice + " GROUP BY pay_billing_material_history.unit_code";
            branch_where = " comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'";
        }

        //string amount = d.getsinglestring("SELECT (SUM(Amount) + SUM(Service_charge)+ SUM(uniform)+ SUM(operational_cost)) AS 'total' from pay_billing_material_history WHERE "+where);

        MySqlCommand cmd = new MySqlCommand("Select Unit_code,state_name from pay_unit_master where " + branch_where, d.con1);
        d.con1.Open();
        MySqlDataReader dr = cmd.ExecuteReader();
        while (dr.Read())
        {
            string unit_code = dr.GetValue(0).ToString();
            string state = dr.GetValue(1).ToString();

            string amount = d.getsinglestring("SELECT  IF(material_contract = 1 AND contract_type = 2, ROUND(contract_amount * material_area, 2), ROUND(contract_amount, 2)) AS 'sub_total'  FROM pay_billing_material_history WHERE " + where);

            string handling_per_amount = d.getsinglestring("SELECT  IF(handling_applicable = 1, (IF(material_contract = 1 AND contract_type = 2, ROUND(((contract_amount * material_area) / month_days), 2), (ROUND(contract_amount, 2) * handling_percent) / 100)), 0) AS 'handling_charge'  FROM pay_billing_material_history WHERE " + where);
            string machine_rental_amount = d.getsinglestring("SELECT  ifnull(machine_rental_amount,0)  FROM pay_billing_material_history WHERE " + where + " limit 1");
            if (machine_rental_amount.Equals("0"))
            {
                machine_rental_amount = d.getsinglestring("SELECT ifnull(sum(total),0) FROM pay_billing_rental_machine WHERE pay_billing_rental_machine.comp_code = '" + Session["COMP_CODE"].ToString() + "' AND pay_billing_rental_machine.unit_code = '" + unit_code + "' AND pay_billing_rental_machine.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_billing_rental_machine.year = '" + txt_month_year.Text.Substring(3) + "'");
            }
            string handling_percent = d.getsinglestring("SELECT  handling_percent  FROM pay_billing_material_history WHERE " + where + " limit 1");
            MySqlCommand cmd_cg = new MySqlCommand("Select comp_name,IFNULL(percent,0) as percent,Companyname_gst_no,gst_address from pay_company_group where comp_code ='" + Session["COMP_CODE"].ToString() + "' and unit_code = '" + dr.GetValue(0).ToString() + "'", d1.con1);
            d1.con1.Open();
            MySqlDataReader dr_cg = cmd_cg.ExecuteReader();
            while (dr_cg.Read())
            {
                string invoice_clause = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'";


                invoice_history_Where_clause = " where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code =  '" + ddl_unitcode.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and invoice_type = '" + ddl_invoice_type.SelectedValue + "' and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' and designation = '" + ddl_designation.SelectedValue + "' and comp_name = '" + dr_cg.GetValue(0).ToString() + "' " + bill_type;
                string inv_no = d.getsinglestring("select invoice_no from  pay_billing_invoice_history " + invoice_history_Where_clause);
                if (!inv_no.Equals(""))
                {
                    invoice_no_gen = inv_no;

                }
                else
                {
                    invoice_no_gen = btnnew_Click(invoice_clause, 2);
                }
                //String  invoice_new = d.getsinglestring("select group_concat(distinct(emp_code)) as 'emp_code' from pay_billing_material_history  " + where + " " + billing_type);
                total = (double.Parse(amount) * double.Parse(dr_cg.GetValue(1).ToString())) / 100;
                //  d.operation("Insert Into comp_group (comp_code,client_code,unit_code,state_name,comp_name,amount,percent) values('"+ Session["comp_code"].ToString() + "','" + ddl_client.SelectedValue + "','"+ unit_code + "','" + state + "','" + dr_cg.GetValue(0).ToString() + "','" + total+ "','" + dr_cg.GetValue(1).ToString() + "')");
                handling_amount = (double.Parse(handling_per_amount) * double.Parse(dr_cg.GetValue(1).ToString())) / 100;
                machine_rent_amount = (double.Parse(machine_rental_amount) * double.Parse(dr_cg.GetValue(1).ToString())) / 100;
                igst = (((double.Parse((amount) + (machine_rental_amount)) * double.Parse(dr_cg.GetValue(1).ToString())) / 100) * 18) / 100;

                //old 
                //d.operation("Insert into pay_billing_material_history (comp_code,client_code,unit_code,state_name,state_per,month,year,client,fromtodate,Amount,bill_amount,COMP_ADDRESS1,COMP_ADDRESS2,COMP_CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,COMPANY_NAME,COMP_STATE,auto_invoice_no,companyname_gst_no,gst_address) SELECT pay_company_master.comp_code,pay_company_group.client_code,pay_company_group.unit_code,state_name,comp_name,'" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + ddl_client.SelectedItem.Text + "'," + date_range + ",'" + total + "' AS 'Amount',  percent,ADDRESS1,ADDRESS2,CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,COMPANY_NAME,STATE, '" + invoice_no_gen + "' as 'auto_invoice_no','" + dr_cg.GetValue(2).ToString() + "' as 'companyname_gst_no','" + dr_cg.GetValue(3).ToString() + "' as 'gst_address'  FROM  pay_company_group INNER JOIN pay_company_master ON pay_company_group.comp_code = pay_company_master.comp_code INNER JOIN pay_unit_master ON pay_unit_master.comp_code = pay_company_master.comp_code and pay_unit_master.unit_code = pay_company_group.unit_code  WHERE  pay_company_group.client_code  = '" + ddl_client.SelectedValue + "' AND  pay_company_master . comp_code  = '" + Session["COMP_CODE"].ToString() + "' and pay_company_group.Companyname_gst_no='" + dr_cg.GetValue(2).ToString() + "'");

                d.operation("Insert into pay_billing_material_history (comp_code,client_code,unit_code,state_name,state_per,month,year,client,fromtodate,Amount,bill_amount,COMP_ADDRESS1,COMP_ADDRESS2,COMP_CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,COMPANY_NAME,COMP_STATE,auto_invoice_no,companyname_gst_no,gst_address, housekeeiing_sac_code,Security_sac_code,type,handling_per_amount,machine_rental_amount,handling_percent,unit_name,machine_rental_applicable,igst) SELECT pay_company_master.comp_code,pay_company_group.client_code,pay_company_group.unit_code,state_name,comp_name,'" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + ddl_client.SelectedItem.Text + "'," + date_range + ",'" + total + "' AS 'Amount',  percent,ADDRESS1,ADDRESS2,CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,COMPANY_NAME,STATE, '" + invoice_no_gen + "' as 'auto_invoice_no','" + dr_cg.GetValue(2).ToString() + "' as 'companyname_gst_no','" + dr_cg.GetValue(3).ToString() + "' as 'gst_address',pay_company_master.housekeeiing_sac_code,pay_company_master.Security_sac_code,'Material','" + handling_amount + "','" + machine_rent_amount + "' ,'" + handling_percent + "',pay_unit_master.unit_name,1," + igst + " FROM  pay_company_group INNER JOIN pay_company_master ON pay_company_group.comp_code = pay_company_master.comp_code INNER JOIN pay_unit_master ON pay_unit_master.comp_code = pay_company_master.comp_code and pay_unit_master.unit_code = pay_company_group.unit_code  WHERE  pay_company_group.client_code  = '" + ddl_client.SelectedValue + "' AND  pay_company_master . comp_code  = '" + Session["COMP_CODE"].ToString() + "' and pay_company_group.Companyname_gst_no='" + dr_cg.GetValue(2).ToString() + "'");
                d.operation("delete from pay_billing_invoice_history  " + invoice_history_Where_clause);
                d.operation("insert into pay_billing_invoice_history(Invoice_No,comp_code,CLIENT_CODE,state_name,unit_code,month,year,Invoice_type,designation,billing_type,start_date,end_date,comp_name,region) values('" + invoice_no_gen + "','" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + ddl_billing_state.SelectedValue + "','" + ddl_unitcode.SelectedValue + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + ddl_invoice_type.SelectedValue + "','" + ddl_designation.SelectedValue + "'," + bill + ",'" + ddl_start_date_common.SelectedValue + "','" + ddl_end_date_common.SelectedValue + "','" + dr_cg.GetValue(0).ToString() + "','" + ddlregion.SelectedValue + "')");

            }
            dr_cg.Dispose();
            dr_cg.Close();
            d1.con1.Close();
        }
        dr.Dispose();
        dr.Close();
        d.con1.Close();
    }
    private StringWriter update_grp_companies(StringWriter stringwrite, DataSet ds)
    {

        string grp_comp = "", where = "", tr = "", td = "", branch_name = "", cell = "";
        double ctc = 0, percentage = 0;
        int row_count = ds.Tables[0].Rows.Count;

        if (ds.Tables[0].Rows[row_count - 1]["branch_type"].ToString() == "0" || ds.Tables[0].Rows[row_count - 1]["branch_type"].ToString() == "")
        {
            //cell = "Y" + (row_count + 4) + "";
            cell = "AA" + (row_count + 3) + "";
        }
        else
        { //cell = "Z" + (row_count + 4) + "";
            cell = "AB" + (row_count + 3) + "";
        }
        where = "comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code = '" + ddl_unitcode.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = "comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = "comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code in (Select unit_code from pay_unit_master where comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "') and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'";
        }


        MySqlCommand cmd = new MySqlCommand("Select state_per from pay_billing_unit_rate_history where client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "' and unit_code = '" + ddl_unitcode.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' AND Emp_code IS NULL group by state_per", d_cg.con);
        d_cg.con.Open();
        MySqlDataReader dr = cmd.ExecuteReader();

        while (dr.Read())
        {
            string invoice_no = d.getsinglestring("select auto_invoice_no from pay_billing_unit_rate_history where " + where + " and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and state_per = '" + dr.GetValue(0).ToString() + "' and invoice_flag != 0 ");
            d1.con1.Open();

            MySqlCommand cmd_cg = new MySqlCommand("Select unit_code,state_per,Companyname_gst_no,gst_address,bill_amount from pay_billing_unit_rate_history where " + where + "  and state_per= '" + dr.GetValue(0).ToString() + "' AND Emp_code IS NULL group by state_per", d1.con1);
            MySqlDataReader dr_cg = cmd_cg.ExecuteReader();
            while (dr_cg.Read())
            {
                percentage = percentage + double.Parse(dr_cg.GetValue(4).ToString());
                td = td + "<td>" + dr_cg.GetValue(4).ToString() + "</td><td>= ROUND(" + cell + " * " + dr_cg.GetValue(4).ToString() + ",2)%</td>";
            }
            dr_cg.Dispose();
            d1.con1.Close();

            tr = tr + "<tr><th colspan=2>'" + invoice_no + "</th><th colspan=2>" + dr.GetValue(0).ToString() + "</th>" + td + "</tr>";
            td = "";
        }
        tr = tr + "<tr><th colspan=4>Total</th><td>=Round(" + percentage + ",2)</td><td>=Round(" + cell + ",2)</td></tr>";
        d_cg.con.Close();



        var ValuetoReturn = (from Rows in ds.Tables[0].AsEnumerable() orderby Rows["unit_code"] select Rows["unit_name"]).Distinct().ToList();

        for (int i = 0; i < ValuetoReturn.Count; i++)
        {
            branch_name = branch_name + "<th>PERCENTAGE</th><th>AMOUNT</th>";
        }

        grp_comp = "<table BORDER=1><tr><th colspan=2>INVOICE NO</th><th colspan=2>COMPANY NAME</th>" + branch_name + "</tr>" + tr + "</table>";

        stringwrite.WriteLine("<br/><br/>");
        stringwrite.WriteLine(grp_comp);

        return stringwrite;
    }

    private StringWriter update_material_grp_companies(StringWriter stringwrite, DataSet ds)
    {

        string grp_comp = "", where = "", tr = "", td = "", branch_name = "", cell = "";
        double ctc = 0, percentage = 0;
        int row_count = ds.Tables[0].Rows.Count;

        cell = "Q" + (row_count + 4) + "";
        where = "comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code = '" + ddl_unitcode.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = "comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = "comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code in (Select unit_code from pay_unit_master where comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "') and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'";
        }

        MySqlCommand cmd = new MySqlCommand("Select state_per from pay_billing_material_history  where " + where + " AND Emp_code IS NULL GROUP BY state_per", d_cg.con);
        d_cg.con.Open();
        MySqlDataReader dr = cmd.ExecuteReader();
        //looop
        while (dr.Read())
        {
            string invoice_no = d.getsinglestring("select auto_invoice_no from pay_billing_material_history where " + where + " and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and state_per = '" + dr.GetValue(0).ToString() + "' and invoice_flag != 0 ");
            d1.con1.Open();
            MySqlCommand cmd_cg = new MySqlCommand("Select  unit_code,state_per,Companyname_gst_no,gst_address,bill_amount from pay_billing_material_history where " + where + "  and state_per= '" + dr.GetValue(0).ToString() + "' GROUP BY state_per", d1.con1);
            MySqlDataReader dr_cg = cmd_cg.ExecuteReader();
            while (dr_cg.Read())
            {
                percentage = percentage + double.Parse(dr_cg.GetValue(4).ToString());
                td = td + "<td>" + dr_cg.GetValue(4).ToString() + "</td><td>= " + cell + " * " + dr_cg.GetValue(4).ToString() + "%</td>";
            }
            dr_cg.Dispose();
            d1.con1.Close();

            tr = tr + "<tr><th colspan=2>'" + invoice_no + "</th><th colspan=2>" + dr.GetValue(0).ToString() + "</th>" + td + "</tr>";
            td = "";
        }
        tr = tr + "<tr><th colspan=4 >Total</th><td>=Round(" + percentage + ",2)</td><td>=Round(" + cell + ",2)</td></tr>";
        d_cg.con.Close();



        var ValuetoReturn = (from Rows in ds.Tables[0].AsEnumerable() orderby Rows["unit_code"] select Rows["unit_name"]).Distinct().ToList();

        for (int i = 0; i < ValuetoReturn.Count; i++)
        {
            branch_name = branch_name + "<th>PERCENTAGE</th><th>AMOUNT</th>";
        }

        grp_comp = "<table BORDER=1><tr><th colspan=2>INVOICE NO</th><th colspan=2>COMPANY NAME</th>" + branch_name + "</tr>" + tr + "</table>";

        stringwrite.WriteLine("<br/><br/>");
        stringwrite.WriteLine(grp_comp);

        return stringwrite;
    }

    protected void btn_material_process_Click(object sender, EventArgs e)
    {
        hidtab.Value = "1";
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        //display_ClientBilling();

        string unit_name = null;
        string invoice_flag = null;
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }

        unit_name = d.get_group_concat("select distinct (unit_name) from pay_billing_material_history " + where_clause(2) + " and invoice_flag != 0");
        if (unit_name != "")
        {

            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + " Already Approve You can not proceed  !!');", true);
            return;
        }

        invoice_flag = d.getsinglestring("select distinct invoice_flag from pay_billing_unit_rate_history " + where_clause(0) + " and invoice_flag != 0");
        if (invoice_flag == "")
        {

            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('First Generate Manpower Bill  !!');", true);
            return;
        }

        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        hidtab.Value = "1";
        insert_finance_data(2);
        process_quantity();
        gv_material_load();

    }


    private void process_quantity()
    {

        try
        {
            d.con.Open();
            int counta = 1;

            foreach (GridViewRow gr in grd_material_billing.Rows)
            {

                string cell_1_Value = grd_material_billing.Rows[gr.RowIndex].Cells[0].Text;
                string cell_2_Value = grd_material_billing.Rows[gr.RowIndex].Cells[1].Text;
                string cell_3_Value = grd_material_billing.Rows[gr.RowIndex].Cells[2].Text;
                string cell_4_Value = grd_material_billing.Rows[gr.RowIndex].Cells[3].Text;
                string cell_5_Value = grd_material_billing.Rows[gr.RowIndex].Cells[4].Text;
                string cell_6_Value = grd_material_billing.Rows[gr.RowIndex].Cells[5].Text;
                string cell_7_Value = grd_material_billing.Rows[gr.RowIndex].Cells[6].Text;
                string cell_8_Value = grd_material_billing.Rows[gr.RowIndex].Cells[7].Text;
                string cell_9_Value = grd_material_billing.Rows[gr.RowIndex].Cells[8].Text;
                string cell_10_Value = grd_material_billing.Rows[gr.RowIndex].Cells[9].Text;
                string cell_11_Value = grd_material_billing.Rows[gr.RowIndex].Cells[10].Text;
                string cell_12_Value = grd_material_billing.Rows[gr.RowIndex].Cells[11].Text;
                string cell_13_Value = grd_material_billing.Rows[gr.RowIndex].Cells[12].Text;
                string cell_14_Value = grd_material_billing.Rows[gr.RowIndex].Cells[13].Text;
                System.Web.UI.WebControls.TextBox lbl_material_name = (System.Web.UI.WebControls.TextBox)gr.FindControl("txt_quantity");
                string lbl_material_name_1 = (lbl_material_name.Text);



                int reft = 0;
                int res = 0;

                if (counta == 1)
                {
                    res = d.operation("delete from pay_material_billing_details where   client_code = '" + cell_6_Value + "' and  comp_code  = '" + Session["COMP_CODE"].ToString() + "' and  state  = '" + cell_7_Value + "' and   designation = '" + cell_11_Value + "' and    month_year  =  '" + txt_month_year.Text + "'  ");

                }
                counta = 2;

                reft = d.operation("insert into pay_material_billing_details(  unit_code ,  material_name ,  rate ,   handling_charges_amount ,  handling_percent , client_code  , state  ,  new_policy_name , start_date , quantity ,   end_date , designation ,unit_code1,  month_year , comp_code , month , year , Id_material , handling_applicable )values('" + cell_1_Value + "','" + cell_2_Value + "','" + cell_3_Value + "','" + cell_4_Value + "','" + cell_5_Value + "','" + cell_6_Value + "','" + cell_7_Value + "','" + cell_8_Value + "','" + cell_9_Value + "','" + lbl_material_name_1 + "','" + cell_10_Value + "','" + cell_11_Value + "','" + cell_12_Value + "','" + txt_month_year.Text + "', '" + Session["COMP_CODE"].ToString() + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3, 4) + "','" + cell_13_Value + "','" + cell_14_Value + "') ");
                if (reft > 0)
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert(' Record Successfully Added... !!!');", true);//
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert(' Record Added Failed... !!!');", true);
                }

            }
        }
        catch (Exception ex) { throw ex; }
        finally
        {
            d.con.Close();
        }
    }

    protected void btn_conveyance_process_Click(object sender, EventArgs e)
    {
        //suraj start
        hidtab.Value = "2";
        //if (billing_type_validation())
        //{
        //    return;
        //}
        ////suraj close
        //display_ClientBilling();
        string unit_name = null;
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }

        hidtab.Value = "2";
        if (ddl_conveyance_type.SelectedValue == "1")
        {
            unit_name = d.getsinglestring("select group_concat( distinct unit_name) from pay_billing_material_history " + where_clause(1) + "  and conveyance_type != 100 and invoice_flag != 0");
        }
        if (ddl_conveyance_type.SelectedValue == "2")
        {
            unit_name = d.getsinglestring("select group_concat( distinct unit_name) from pay_billing_material_history " + where_clause(1) + "  and conveyance_type =100 and invoice_flag != 0");
        }
        //unit_name = d.getsinglestring("select group_concat( distinct unit_name) from pay_billing_material_history " + where_clause(1) + "  and conveyance_type in (1,2,3,100) and invoice_flag != 0");

        if (unit_name != "")
        {

            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + " Already Approve You can not proceed  !!');", true);
            return;
        }

        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        hidtab.Value = "2";
        insert_finance_data(3);
        if (ddl_conveyance_type.SelectedValue == "1")
        {
            gv_con_emp_approve_load();
        }
        if (ddl_conveyance_type.SelectedValue == "2")
        {
            gv_con_driver_approve_load();
        }

    }

    protected void btn_dc_process_Click(object sender, EventArgs e)
    {
        hidtab.Value = "3";
        ////suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        ////suraj close
        // display_ClientBilling();

        string unit_name = null;
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }

        unit_name = d.getsinglestring("select group_concat(distinct unit_name) from pay_billing_material_history " + where_clause(3) + " and invoice_flag != 0");
        if (unit_name != "")
        {

            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + " Already Approve You can not proceed  !!');", true);
            return;
        }



        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        hidtab.Value = "3";
        insert_finance_data(4);
    }

    protected void btn_pc_process_Click(object sender, EventArgs e)
    {
        hidtab.Value = "4";
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close
        //display_ClientBilling();
        string unit_name = null;
        unit_name = d.getsinglestring("select group_concat(distinct unit_name) from pay_billing_material_history " + where_clause(4) + " and invoice_flag != 0");
        if (unit_name != "")
        {

            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + " Already Approve You can not proceed  !!');", true);
            return;
        }
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        hidtab.Value = "4";
        insert_finance_data(5);
    }
    protected void btn_bill_save_Click(object sender, EventArgs e)
    {
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        hidtab.Value = "7";

    }


    protected void DownloadFile(object sender, EventArgs e)
    {
        string filePath = (sender as LinkButton).CommandArgument;

        if (File.Exists(Server.MapPath(filePath)))
        {
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + Path.GetFileName(filePath));
            Response.WriteFile(filePath);
            Response.End();
        }
        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('File Not Available !!!')", true);
        }


    }
    protected void grd_company_files_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        for (int i = 0; i < e.Row.Cells.Count; i++)
        {
            if (e.Row.Cells[i].Text == "&nbsp;")
            {
                e.Row.Cells[i].Text = "";
            }
        }
        e.Row.Cells[1].Visible = false;
        e.Row.Cells[4].Text = get_month(e.Row.Cells[4].Text);

        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            try
            {
                LinkButton lb = (LinkButton)e.Row.Cells[10].Controls[1];
                if (lb != null)
                {
                    lb.Attributes.Add("onclick", "javascript:return confirm('Are you sure you want to delete ? ')");
                }
            }
            catch { }
        }
    }

    private string get_month(string month)
    {
        if (month == "1") { return "January"; }
        if (month == "2") { return "February"; }
        if (month == "3") { return "March"; }
        if (month == "4") { return "April"; }
        if (month == "5") { return "May"; }
        if (month == "6") { return "June"; }
        if (month == "7") { return "July"; }
        if (month == "8") { return "August"; }
        if (month == "9") { return "September"; }
        if (month == "10") { return "October"; }
        if (month == "11") { return "November"; }
        if (month == "12") { return "December"; }
        return month;
    }
    private string get1_month(string month)
    {
        if (month == "January") { return "1"; }
        if (month == "February") { return "2"; }
        if (month == "March") { return "3"; }
        if (month == "April") { return "4"; }
        if (month == "May") { return "5"; }
        if (month == "June") { return "6"; }
        if (month == "July") { return "7"; }
        if (month == "August") { return "8"; }
        if (month == "September") { return "9"; }
        if (month == "October") { return "10"; }
        if (month == "November") { return "11"; }
        if (month == "December") { return "12"; }
        return month;
    }
    protected void lnkDelete_Click(object sender, EventArgs e)
    {

        GridViewRow row = (GridViewRow)(((LinkButton)sender)).NamingContainer;
        string invoice_no = row.Cells[7].Text;
        string month = get1_month(row.Cells[4].Text);
        string year = row.Cells[5].Text;
        string b_type = row.Cells[6].Text;

        if (!((d.getsinglestring("select sent_flag from pay_bill_invoices where  invoice_number = '" + invoice_no + "' and month = '" + month + "' and year = '" + year + "' and bill_type = '" + b_type + "' ")).Equals("1")))
        {
            GridViewRow grdrow = (GridViewRow)((LinkButton)sender).NamingContainer;
            int item = int.Parse(grdrow.Cells[1].Text);
            string temp = d.getsinglestring("SELECT file_name FROM pay_bill_invoices WHERE id=" + item);
            if (temp != "")
            {
                File.Delete(Server.MapPath("~/approved_bills/") + temp);
            }
            d.operation("delete from pay_bill_invoices WHERE id=" + item);
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alertmessage", "javascript:alert('Record Delete Succesfully!!!')", true);
        }
        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alertmessage", "javascript:alert('Bill Already Send You Can Not Delete !!!')", true);

        }


        //load_grdview();
    }

    //arrears invoice billing 
    protected void Req_arrears_bill_Click(object sender, EventArgs e)
    {
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        hidtab.Value = "5";
        try
        {
            ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true);
            if (bs.chk_days_count(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text))
            {

                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('You Cannot Request arrears bill days count full !!!');", true);
                return;
            }

            d.operation("delete from pay_arrears_bill_request where comp_code= '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'and state_name = '" + ddl_billing_state.SelectedValue + "'and unit_code = '" + ddl_unitcode.SelectedValue + "'and month = '" + txt_month_year.Text.Substring(0, 2) + "'and year = '" + txt_month_year.Text.Substring(3) + "'");
            d.operation("insert into pay_arrears_bill_request (comp_code,client_code,state_name,unit_code,month,year,status)values('" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + ddl_billing_state.SelectedValue + "','" + ddl_unitcode.SelectedValue + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','Request by finance to generate arrears bill')");
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Send Request for arrears bill  !!!');", true);
        }
        catch (Exception ex)
        {

            throw ex;
        }
        finally
        {


        }
    }
    protected void btn_arrears_process_Click(object sender, EventArgs e)
    {
        ////suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        ////suraj close

        //display_ClientBilling();

        hidtab.Value = "6";
        try
        {
            string where_state = "", where_check = "";
            if (!ddl_billing_state.Equals("ALL")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "'"; }
            if (d.getsinglestring("select billingwise_id from pay_client_billing_details where client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
            {
                where_state = " and region = '" + ddlregion.SelectedValue + "' ";
            }
            else
            { where_state = ""; }
            where_check = " and client_code = '" + ddl_client.SelectedValue + "'";

            if (ddl_billing_state.SelectedValue != "ALL")
            {


                where_check = " and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'";
            }
            if (ddl_unitcode.SelectedValue != "ALL")
            {

                where_check = " and client_code = '" + ddl_client.SelectedValue + "'  and unit_code  = '" + ddl_unitcode.SelectedValue + "'";
            }
            string unit_name = "";
            if (ddl_arrears_type.SelectedValue.Equals("policy"))
            {
                unit_name = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_unit_rate_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_arrear_monthend.Text.Substring(3, 2) + "' AND YEAR='" + txt_arrear_monthend.Text.Substring(6) + "' and invoice_flag = 0 And (bill_type is null || bill_type ='') and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' " + where_check + (where_state == "" ? "" : " and zone = '" + ddlregion.SelectedValue + "'"));
            }
            else if (ddl_arrears_type.SelectedValue.Equals("month"))
            {
                unit_name = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_unit_rate_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3) + "' and invoice_flag = 0 And (bill_type is null || bill_type ='') and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' " + where_check + (where_state == "" ? "" : " and zone = '" + ddlregion.SelectedValue + "'"));
            }
            if (!unit_name.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branches : " + unit_name + "  Are Not Approved So You Can Not Proceed Arrears Bill!!!');", true); return; }

            //for final check
            if (ddl_arrears_type.SelectedValue.Equals("policy"))
            {
                unit_name = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_unit_rate_history_arrears where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_arrear_monthend.Text.Substring(3, 2) + "' AND YEAR='" + txt_arrear_monthend.Text.Substring(6) + "' and invoice_flag != 0  " + where_check + (where_state == "" ? "" : " and zone = '" + ddlregion.SelectedValue + "'"));
            }
            else if (ddl_arrears_type.SelectedValue.Equals("month"))
            {
                unit_name = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_unit_rate_history_arrears where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3) + "' and invoice_flag != 0    " + where_check + (where_state == "" ? "" : " and zone = '" + ddlregion.SelectedValue + "'"));
            }

            if (!unit_name.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branches : " + unit_name + "  Are Aleady Approved So You Can Not Proceed Arrears Bill!!!');", true); return; }



            ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true);
            if (ddl_arrears_type.SelectedValue.Equals("month"))
            {
                //Suraj - check whats it
                //if (bs.chk_days_count(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text))
                //{

                //    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('You Cannot generate Arrears bill days count full !!!');", true);
                //    return;
                //}

                if (int.Parse(ddl_process_data.SelectedValue).Equals(0))
                {
                    int counter = 0;

                    bs.Billing(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), Session["LOGIN_ID"].ToString(), 2, int.Parse(ddl_start_date_common.SelectedValue), 1, null, null, ddl_arrears_type.SelectedValue);
                    //calculate_costing();
                }
                string grade = "", where = "";
                string delete_where = "";
                string history_where = "";
                string pay_attendance_muster = "  pay_attendance_muster ";
                string flag = "";
                //flag for insert query

                flag = " and pay_attendance_muster.invoice_flag in (1,2) ";

                //flag for delete query
                string sql = null;

                string start_date_common = get_start_date();
                //if (start_date_common != "" && start_date_common != "1")
                //{

                string daterange = "concat(upper(DATE_FORMAT(str_to_date('" + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? int.Parse(txt_month_year.Text.Substring(3)) - 1 : int.Parse(txt_month_year.Text.Substring(3))) + "-" + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? 12 : int.Parse(txt_month_year.Text.Substring(0, 2)) - 1) + "-" + start_date_common + "','%Y-%m-%d'), '%D %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-" + (int.Parse(start_date_common) - 1) + "','%Y-%m-%d'), '%D %b %Y'))) as fromtodate";
                //}
                if (start_date_common.Equals("1"))
                {
                    daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01','%Y-%m-%d'), '%D %b %Y')),' TO ',upper(DATE_FORMAT(LAST_DAY('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01'), '%D %b %Y'))) as fromtodate";
                }


                //where and delete clause start
                string group_by = ddl_client.SelectedValue == "HDFC" ? "group by pay_employee_master.emp_code" : "";

                where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.unit_code = '" + ddl_unitcode.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 " + flag + "   " + grade + " " + group_by + " order by 4,3) AS billing_table) as Final_billing";
                delete_where = "month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "' and unit_code = '" + ddl_unitcode.SelectedValue + "'";
                if (ddl_billing_state.SelectedValue == "ALL")
                {

                    where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0 " + flag + "  " + grade + "  " + group_by + " order by 4,3) AS billing_table) as Final_billing";
                    delete_where = "month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "'";
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_attendance_muster.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_attendance_muster.Year = '" + txt_month_year.Text.Substring(3) + "' and pay_attendance_muster.tot_days_present > 0  " + flag + "  " + grade + " " + group_by + " order by 4,3) AS billing_table) as Final_billing";
                    delete_where = "month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "' and state_name = '" + ddl_billing_state.SelectedValue + "'";
                }

                // end

                if (!d.getsinglestring("select ifnull(MAX(invoice_flag),0) from pay_billing_unit_rate_history where " + delete_where + " and bill_type = 'Arrears_bill'").Equals("0"))
                {

                    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Bill Already Approved You Can Not Procced !!!');", true);
                    return;
                }
                //bs.insert_arrears_data(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text);

                if (ddl_client.SelectedValue == "HDFC")
                {


                    // sql = "SELECT comp_code,client_code ,  unit_code , emp_code,client, state_name, unit_name, unit_city, client_branch_code, emp_name , grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esic_ot, lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100)) AS 'Service_charge', CASE when gst_applicable =0 then 0 WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE when gst_applicable =0 then 0 WHEN LOCATE(company_state, state_name) THEN 0 ELSE ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing)  + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 18) / 100), 2) END AS 'IGST18', CASE when gst_applicable =0 then 0 WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser)  + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours, " + daterange + ", CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + ((bill_gross * esic_percent) / 100) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,(tot_days_present) as 'no_of_duties',zone,TOT_WORKING_DAYS,GRADE_CODE,month_days,month,year,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE , COMP_STATE , housekeeiing_sac_code, Security_sac_code,joining_date,gst_applicable ,'Arrears_bill' as 'bill_type' FROM (SELECT comp_code,client_code,unit_code,emp_code,client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, (((emp_basic_vda) / 100) * pf_percent) AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing =1, allowances,0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent,  CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing',  CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing_ser', bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count,emp_count1,state_per,branch_cost_centre_code,total_emp_count,zone,TOT_WORKING_DAYS,GRADE_CODE,month_days,month,year,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE , COMP_STATE , housekeeiing_sac_code, Security_sac_code,joining_date,gst_applicable  FROM (SELECT pay_unit_master.comp_code as 'comp_code',pay_unit_master.client_code as 'client_code',pay_unit_master.unit_code,pay_employee_master.emp_code as 'emp_code',(SELECT client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code AND comp_code = '" + Session["COMP_CODE"].ToString() + "') AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (SELECT CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END) AS 'emp_name', pay_grade_master.grade_desc, SUM(((( pay_billing_master_history_arrears_arrears . basic  +  pay_billing_master_history_arrears_arrears . vda ) /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'emp_basic_vda', SUM((( pay_billing_unit_rate_arrears . hra  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'hra', CASE WHEN  bonus_taxable  = '1' THEN SUM((( pay_billing_unit_rate_arrears . bonus_amount  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_gross', CASE WHEN  bonus_taxable  = '0' THEN SUM((( pay_billing_unit_rate_arrears . bonus_amount  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'bonus_after_gross', CASE WHEN  leave_taxable  = '1' THEN SUM((( pay_billing_unit_rate_arrears . leave_amount  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_gross', CASE WHEN  leave_taxable  = '0' THEN SUM((( pay_billing_unit_rate_arrears . leave_amount  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'leave_after_gross', CASE WHEN  gratuity_taxable  = '1' THEN SUM((( pay_billing_unit_rate_arrears . grauity_amount  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_gross', CASE WHEN  gratuity_taxable  = '0' THEN SUM((( pay_billing_unit_rate_arrears . grauity_amount  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'gratuity_after_gross', SUM((( pay_billing_unit_rate_arrears . washing  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'washing', SUM((( pay_billing_unit_rate_arrears . traveling  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'travelling', SUM((( pay_billing_unit_rate_arrears . education  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'education', SUM((( pay_billing_unit_rate_arrears . national_holiday_amount  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'NH', SUM((( pay_billing_unit_rate_arrears . allowances  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'allowances', 0 AS 'cca_billing', 0 AS 'other_allow', CASE WHEN  pay_billing_master_history_arrears_arrears . ot_policy_billing  = '1' THEN SUM((( pay_billing_master_history_arrears_arrears . ot_amount_billing  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) ELSE 0 END AS 'hrs_12_ot',  pay_billing_master_history_arrears_arrears . bill_esic_percent  AS 'esic_percent',  pay_billing_master_history_arrears_arrears . bill_pf_percent  AS 'pf_percent', SUM((((pay_billing_unit_rate_arrears.lwf) / (pay_billing_unit_rate_arrears.month_days)) * (pay_attendance_muster.tot_days_present))) AS 'lwf', SUM((( pay_billing_unit_rate_arrears . uniform  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'uniform', SUM((( pay_billing_unit_rate_arrears . relieving_amount  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'relieving_charg', SUM((( pay_billing_unit_rate_arrears . operational_cost  /  pay_billing_unit_rate_arrears . month_days ) *  pay_attendance_muster . tot_days_present )) AS 'operational_cost', SUM(pay_attendance_muster.tot_days_present) as tot_days_present, ROUND(((pay_billing_unit_rate_arrears.sub_total_c / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history_arrears_arrears.hours, pay_billing_unit_rate_arrears.sub_total_c, pay_billing_master_history_arrears_arrears.bill_ser_operations, pay_billing_master_history_arrears_arrears.bill_ser_uniform, pay_billing_unit_rate_arrears.ot_1_hr_amount AS 'ot_rate',  SUM(pay_attendance_muster.ot_hours) as 'ot_hours', pay_billing_unit_rate_arrears.esic_amount, pay_billing_unit_rate_arrears.esi_on_ot_amount, 0 AS 'emp_cca', pay_billing_unit_rate_arrears.gross AS 'bill_gross', pay_billing_unit_rate_arrears.pf_amount AS 'bill_pf', pay_billing_unit_rate_arrears.uniform AS 'bill_uniform', sum(IF(pay_employee_master.Employee_type = 'Permanent' OR pay_employee_master.Employee_type = 'Reliever' OR pay_employee_master.Employee_type ='PermanentReliever',((pay_billing_master_history_arrears_arrears.group_insurance_billing / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present),0)) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, 0 as bill_service_charge_amount,pay_unit_master.txt_zone, branch_cost_centre_code, adminhead_name, 'IH&MS'as ihms	, pay_unit_master.location_type, pay_unit_master.	unit_add1, case emp_count when '1' then 'A' when '2' then 'B' else 'C' end as emp_count , case emp_count when '1' then 'Single - 8 Hrs. Shift (1 SG)' when '2' then 'Double - 16 Hrs. Shift (2 SG)' ELSE concat('Triple - 24 Hrs. Shift (', emp_count ,'SG)') end as emp_count1 , 'STATE ' as 'state_per',emp_count as 'total_emp_count',zone,TOT_WORKING_DAYS,pay_grade_master.GRADE_CODE,pay_billing_master_history_arrears_arrears.esic_oa_billing,pay_billing_unit_rate_arrears.month_days,pay_attendance_muster.month,pay_attendance_muster.year,pay_company_master.ADDRESS1  as 'COMP_ADDRESS1', pay_company_master.ADDRESS2   as 'COMP_ADDRESS2', pay_company_master.CITY  as 'COMP_CITY', pay_company_master.PF_REG_NO as 'PF_REG_NO', pay_company_master.COMPANY_PAN_NO as 'COMPANY_PAN_NO', pay_company_master.COMPANY_TAN_NO as 'COMPANY_TAN_NO', pay_company_master.COMPANY_CIN_NO as 'COMPANY_CIN_NO', pay_company_master.SERVICE_TAX_REG_NO as 'SERVICE_TAX_REG_NO', pay_company_master.ESIC_REG_NO as 'ESIC_REG_NO',  (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_employee_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST')  as 'unit_gst_no', pay_company_master.COMPANY_NAME  as 'COMPANY_NAME' , (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_employee_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1' , UNIT_ADD2, pay_employee_master.Employee_type as 'EMP_TYPE' , pay_company_master.STATE as 'COMP_STATE',pay_company_master.housekeeiing_sac_code as 'housekeeiing_sac_code',pay_company_master.Security_sac_code as 'Security_sac_code',pay_employee_master.joining_date,billing_gst_applicable as 'gst_applicable' FROM pay_employee_master INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate_arrears ON pay_attendance_muster.unit_code = pay_billing_unit_rate_arrears.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate_arrears.month AND pay_attendance_muster.year = pay_billing_unit_rate_arrears.year INNER JOIN pay_billing_unit_rate_arrears ON pay_billing_unit_rate_arrears.comp_code = pay_billing_unit_rate_arrears.comp_code AND pay_billing_unit_rate_arrears.comp_code = pay_employee_master.comp_code AND pay_billing_unit_rate_arrears.billing_client_code = pay_billing_unit_rate_arrears.client_code AND pay_billing_unit_rate_arrears.billing_unit_code = pay_billing_unit_rate_arrears.unit_code AND pay_billing_unit_rate_arrears.month = pay_billing_unit_rate_arrears.month AND pay_billing_unit_rate_arrears.year = pay_billing_unit_rate_arrears.year AND pay_employee_master.grade_code = pay_billing_unit_rate_arrears.designation AND pay_billing_unit_rate_arrears.designation = pay_billing_unit_rate_arrears.designation AND pay_billing_unit_rate_arrears.hours = pay_billing_unit_rate_arrears.hours AND pay_billing_unit_rate_arrears.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_unit_rate_arrears.comp_code = pay_grade_master.comp_code AND pay_billing_unit_rate_arrears.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE " + where;
                    sql = "SELECT  comp_code, client_code, unit_code, emp_code, client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esic_ot, lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100)) AS 'Service_charge', CASE WHEN gst_applicable = 0 THEN 0 WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE WHEN gst_applicable = 0 THEN 0 WHEN LOCATE(company_state, state_name) THEN 0 ELSE ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 18) / 100), 2) END AS 'IGST18', CASE WHEN gst_applicable = 0 THEN 0 WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + group_insurance_billing_ser + group_insurance_billing) + (ot_rate * ot_hours) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, ((((Total + pf + esic + group_insurance_billing_ser) + (ot_rate * ot_hours)) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours,  " + daterange + ", (bill_gross + ((bill_gross * esic_percent) / 100) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross) AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count, emp_count1, state_per, branch_cost_centre_code, total_emp_count, (tot_days_present) AS 'no_of_duties', zone, TOT_WORKING_DAYS, GRADE_CODE, month_days, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, joining_date, gst_applicable, 'Arrears_bill' AS 'bill_type' FROM (SELECT  comp_code, client_code, unit_code, emp_code, client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, CASE WHEN pf_cmn_on = 0 THEN (((emp_basic_vda) / 100) * pf_percent) WHEN pf_cmn_on = 1 THEN ((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 2 THEN ((emp_basic_vda + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 3 THEN ((emp_basic_vda + cca_billing + other_allow) / 100) * pf_percent END AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing = 1, allowances, 0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent, CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing', CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END AS 'group_insurance_billing_ser', bill_service_charge_amount, txt_zone, adminhead_name, ihms, location_type, unit_add1, emp_count, emp_count1, state_per, branch_cost_centre_code, total_emp_count, zone, TOT_WORKING_DAYS, GRADE_CODE, month_days, month, year, COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1, UNIT_ADD2, EMP_TYPE, COMP_STATE, housekeeiing_sac_code, Security_sac_code, joining_date, gst_applicable FROM (SELECT  pay_unit_master.comp_code AS 'comp_code', pay_unit_master.client_code AS 'client_code', pay_unit_master.unit_code, pay_employee_master.emp_code AS 'emp_code', (SELECT  client_name FROM pay_client_master WHERE client_code = pay_unit_master.client_code AND comp_code = '" + Session["COMP_CODE"].ToString() + "') AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (SELECT  CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END ) AS 'emp_name', pay_grade_master.grade_desc, SUM((((pay_billing_master_history_arrears.diff_basic_vda) / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) AS 'emp_basic_vda', SUM(((pay_billing_unit_rate_arrears.hra / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) AS 'hra', CASE WHEN bonus_taxable = '1' THEN SUM(((pay_billing_unit_rate_arrears.bonus_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN SUM(((pay_billing_unit_rate_arrears.bonus_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN SUM(((pay_billing_unit_rate_arrears.leave_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN SUM(((pay_billing_unit_rate_arrears.leave_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN SUM(((pay_billing_unit_rate_arrears.grauity_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN SUM(((pay_billing_unit_rate_arrears.grauity_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'gratuity_after_gross', SUM(((pay_billing_unit_rate_arrears.washing / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) AS 'washing', SUM(((pay_billing_unit_rate_arrears.traveling / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) AS 'travelling', SUM(((pay_billing_unit_rate_arrears.education / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) AS 'education', SUM(((pay_billing_unit_rate_arrears.national_holiday_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) AS 'NH', SUM(((pay_billing_unit_rate_arrears.allowances / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) AS 'allowances', 0 AS 'cca_billing', 0 AS 'other_allow', CASE WHEN pay_billing_master_history_arrears.ot_policy_billing = '1' THEN SUM(((pay_billing_master_history_arrears.ot_amount_billing / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history_arrears.bill_esic_percent AS 'esic_percent', pay_billing_master_history_arrears.bill_pf_percent AS 'pf_percent', SUM((((pay_billing_unit_rate_arrears.lwf) / (pay_billing_unit_rate_arrears.month_days)) * (pay_attendance_muster.tot_days_present))) AS 'lwf', SUM(((pay_billing_unit_rate_arrears.uniform / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) AS 'uniform', SUM(((pay_billing_unit_rate_arrears.relieving_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) AS 'relieving_charg', SUM(((pay_billing_unit_rate_arrears.operational_cost / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present)) AS 'operational_cost', SUM(pay_attendance_muster.tot_days_present) AS tot_days_present, ROUND(((pay_billing_unit_rate_arrears.sub_total_c / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history_arrears.hours, pay_billing_unit_rate_arrears.sub_total_c, pay_billing_master_history_arrears.bill_ser_operations, pay_billing_master_history_arrears.bill_ser_uniform, pay_billing_unit_rate_arrears.ot_1_hr_amount AS 'ot_rate', SUM(pay_attendance_muster.ot_hours) AS 'ot_hours', pay_billing_unit_rate_arrears.esic_amount, pay_billing_unit_rate_arrears.esi_on_ot_amount, 0 AS 'emp_cca', pay_billing_unit_rate_arrears.gross AS 'bill_gross', pay_billing_unit_rate_arrears.pf_amount AS 'bill_pf', pay_billing_unit_rate_arrears.uniform AS 'bill_uniform', '0' AS 'group_insurance_billing','0' as service_group_insurance_billing, pay_employee_master.Employee_type, 0 AS bill_service_charge_amount, pay_unit_master.txt_zone, branch_cost_centre_code, adminhead_name, 'IH&MS' AS ihms, pay_unit_master.location_type, pay_unit_master.unit_add1, CASE emp_count WHEN '1' THEN 'A' WHEN '2' THEN 'B' ELSE 'C' END AS emp_count, CASE emp_count WHEN '1' THEN 'Single - 8 Hrs. Shift (1 SG)' WHEN '2' THEN 'Double - 16 Hrs. Shift (2 SG)' ELSE CONCAT('Triple - 24 Hrs. Shift (', emp_count, 'SG)') END AS emp_count1, 'STATE ' AS 'state_per', emp_count AS 'total_emp_count', zone, TOT_WORKING_DAYS, pay_grade_master.GRADE_CODE, pay_billing_master_history_arrears.esic_oa_billing, pay_billing_unit_rate_arrears.month_days, pay_attendance_muster.month, pay_attendance_muster.year, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO AS 'PF_REG_NO', pay_company_master.COMPANY_PAN_NO AS 'COMPANY_PAN_NO', pay_company_master.COMPANY_TAN_NO AS 'COMPANY_TAN_NO', pay_company_master.COMPANY_CIN_NO AS 'COMPANY_CIN_NO', pay_company_master.SERVICE_TAX_REG_NO AS 'SERVICE_TAX_REG_NO', pay_company_master.ESIC_REG_NO AS 'ESIC_REG_NO', (SELECT  field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_employee_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME AS 'COMPANY_NAME', (SELECT  field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_employee_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_employee_master.Employee_type AS 'EMP_TYPE', pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code AS 'housekeeiing_sac_code', pay_company_master.Security_sac_code AS 'Security_sac_code', pay_employee_master.joining_date, billing_gst_applicable AS 'gst_applicable',pay_billing_master_history_arrears.pf_cmn_on FROM pay_employee_master INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate_arrears ON pay_attendance_muster.unit_code = pay_billing_unit_rate_arrears.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate_arrears.month AND pay_attendance_muster.year = pay_billing_unit_rate_arrears.year INNER JOIN pay_billing_master_history_arrears ON pay_billing_master_history_arrears.comp_code = pay_billing_unit_rate_arrears.comp_code AND pay_billing_master_history_arrears.comp_code = pay_employee_master.comp_code AND pay_billing_master_history_arrears.billing_client_code = pay_billing_unit_rate_arrears.client_code AND pay_billing_master_history_arrears.billing_unit_code = pay_billing_unit_rate_arrears.unit_code AND pay_billing_master_history_arrears.month = pay_billing_unit_rate_arrears.month AND pay_billing_master_history_arrears.year = pay_billing_unit_rate_arrears.year AND pay_employee_master.grade_code = pay_billing_master_history_arrears.designation AND pay_billing_master_history_arrears.designation = pay_billing_unit_rate_arrears.designation AND pay_billing_master_history_arrears.hours = pay_billing_unit_rate_arrears.hours AND pay_billing_master_history_arrears.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history_arrears.comp_code = pay_grade_master.comp_code AND pay_billing_master_history_arrears.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE " + where;
                    d.operation("delete  from pay_billing_unit_rate_history_arrears where " + delete_where + " and bill_type = 'Arrears_bill'");
                    d.operation("insert into pay_billing_unit_rate_history_arrears(comp_code,client_code,unit_code,EMP_CODE,client,state_name,unit_name,unit_city,client_branch_code,emp_name,grade_desc,emp_basic_vda,hra,bonus_gross,leave_gross,gratuity_gross,washing,travelling,education,allowances,cca_billing,other_allow,gross,bonus_after_gross,leave_after_gross,gratuity_after_gross,pf,esic,hrs_12_ot,esic_ot,lwf,uniform,relieving_charg,operational_cost,tot_days_present,Amount,Service_charge,CGST9,IGST18,SGST9,bill_service_charge,NH,hours,fromtodate,sub_total_c,ot_rate,ot_hours,ot_amount,group_insurance_billing,bill_service_charge_amount,txt_zone,adminhead_name,ihms,location_type,unit_add1,emp_count2,emp_count1,state_per,branch_cost_centre_code,total_emp_count,no_of_duties,zone,TOT_WORKING_DAYS,GRADE_CODE,month_days,month,year,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE ,COMP_STATE , housekeeiing_sac_code, Security_sac_code,joining_date,billing_gst_applicable,bill_type ) " + sql);

                }
                else
                {
                    sql = "SELECT comp_code,client_code ,  unit_code , emp_code, client, state_name, unit_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, gross, bonus_after_gross, leave_after_gross, gratuity_after_gross, pf, esic, hrs_12_ot, esi_on_ot_amount as 'esic_ot', lwf, uniform, relieving_charg, operational_cost, tot_days_present, (Total + pf + esic + group_insurance_billing_ser) AS 'Amount', IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100)) AS 'Service_charge', CASE when gst_applicable =0 then 0 WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9', CASE when gst_applicable =0 then 0 WHEN LOCATE(company_state, state_name) THEN 0 ELSE ROUND(((((Total + pf + esic + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 18) / 100), 2) END AS 'IGST18', CASE when gst_applicable =0 then 0 WHEN LOCATE(company_state, state_name) THEN ROUND(((((Total + pf + esic + operational_cost + uniform + (ot_rate * ot_hours) + group_insurance_billing_ser + group_insurance_billing) + IF((((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total + pf + esic + (ot_rate * ot_hours) + group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9', bill_service_charge, NH, hours," + daterange + ", CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross + ((bill_gross * esic_percent) / 100) + bill_pf + bill_uniform + group_insurance_billing_ser + bonus_after_gross + leave_after_gross + gratuity_after_gross) END AS 'sub_total_c', IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate', ot_hours, (ot_rate * ot_hours) AS 'ot_amount', group_insurance_billing, bill_service_charge_amount,branch_type,month_days,gst_applicable,OPus_NO,month,year,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE , COMP_STATE , housekeeiing_sac_code, Security_sac_code,GRADE_CODE ,chemical_consumables_rate,tool_tackles_rate,chemical_applicable,bill_amount ,tool_applicable,emp_count, joining_date,gst_applicable,penalty,'Arrears_bill' as 'bill_type' FROM (SELECT comp_code,client_code ,  unit_code , emp_code,client, company_state, unit_name, state_name, unit_city, client_branch_code, emp_name, grade_desc, emp_basic_vda, hra, bonus_gross, leave_gross, gratuity_gross, washing, travelling, education, allowances, cca_billing, other_allow, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) AS 'gross', bonus_after_gross, leave_after_gross, gratuity_after_gross, CASE WHEN pf_cmn_on = 0 THEN (((emp_basic_vda) / 100) * pf_percent) WHEN pf_cmn_on = 1 THEN ((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 2 THEN ((emp_basic_vda + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 3 THEN ((emp_basic_vda + cca_billing + other_allow) / 100) * pf_percent END AS 'pf', (((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + IF(esic_oa_billing =1, allowances,0) + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * esic_percent) AS 'esic', hrs_12_ot, (((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot', lwf, CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform', relieving_charg, CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost', tot_days_present, (emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + bonus_after_gross + leave_after_gross + gratuity_after_gross + lwf + CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END + relieving_charg + CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END + NH + hrs_12_ot+IF(esic_common_allow = 0, common_allow, 0)) AS 'Total', bill_service_charge, NH, hours, (bill_gross + emp_cca) AS 'bill_gross', sub_total_c, bill_ser_uniform, bill_ser_operations, (ot_rate + esi_on_ot_amount) AS 'ot_rate', ot_hours, esic_amount, esi_on_ot_amount, emp_cca, bill_pf, bill_uniform, esic_percent, IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing', IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing_ser', bill_service_charge_amount,branch_type,month_days,OPus_NO,month,year ,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE , COMP_STATE , housekeeiing_sac_code, Security_sac_code,GRADE_CODE ,chemical_consumables_rate,tool_tackles_rate,chemical_applicable,bill_amount ,tool_applicable ,emp_count,joining_date,gst_applicable ,penalty FROM (SELECT pay_unit_master.comp_code, pay_unit_master.client_code, pay_unit_master.unit_code, pay_employee_master.emp_code, client_name AS 'client', pay_company_master.state AS 'company_state', pay_unit_master.unit_name, pay_unit_master.state_name, pay_unit_master.unit_city, pay_unit_master.client_branch_code, (SELECT CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END) AS 'emp_name', pay_grade_master.grade_desc, (((pay_billing_master_history_arrears.diff_basic_vda) / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'emp_basic_vda', ((pay_billing_unit_rate_arrears.hra / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'hra', CASE WHEN bonus_taxable = '1' THEN ((pay_billing_unit_rate_arrears.bonus_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_gross', CASE WHEN bonus_taxable = '0' THEN ((pay_billing_unit_rate_arrears.bonus_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'bonus_after_gross', CASE WHEN leave_taxable = '1' THEN ((pay_billing_unit_rate_arrears.leave_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_gross', CASE WHEN leave_taxable = '0' THEN ((pay_billing_unit_rate_arrears.leave_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'leave_after_gross', CASE WHEN gratuity_taxable = '1' THEN ((pay_billing_unit_rate_arrears.grauity_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_gross', CASE WHEN gratuity_taxable = '0' THEN ((pay_billing_unit_rate_arrears.grauity_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'gratuity_after_gross', ((pay_billing_unit_rate_arrears.washing / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'washing', ((pay_billing_unit_rate_arrears.traveling / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'travelling', ((pay_billing_unit_rate_arrears.education / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'education', ((pay_billing_unit_rate_arrears.national_holiday_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'NH', ((pay_billing_unit_rate_arrears.allowances / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'allowances', 0 AS 'cca_billing', 0 AS 'other_allow', CASE WHEN pay_billing_master_history_arrears.ot_policy_billing = '1' THEN ((pay_billing_master_history_arrears.ot_amount_billing / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) ELSE 0 END AS 'hrs_12_ot', pay_billing_master_history_arrears.bill_esic_percent AS 'esic_percent', pay_billing_master_history_arrears.bill_pf_percent AS 'pf_percent', ((pay_billing_unit_rate_arrears.lwf / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'lwf', ((pay_billing_unit_rate_arrears.uniform / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'uniform', ((pay_billing_unit_rate_arrears.relieving_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'relieving_charg', ((pay_billing_unit_rate_arrears.operational_cost / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'operational_cost', pay_attendance_muster.tot_days_present, ROUND(((pay_billing_unit_rate_arrears.sub_total_c / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present), 2) AS 'baseamount', bill_service_charge, pay_billing_master_history_arrears.hours, pay_billing_unit_rate_arrears.sub_total_c, pay_billing_master_history_arrears.bill_ser_operations, pay_billing_master_history_arrears.bill_ser_uniform, pay_billing_unit_rate_arrears.ot_1_hr_amount AS 'ot_rate', pay_attendance_muster.ot_hours, pay_billing_unit_rate_arrears.esic_amount, pay_billing_unit_rate_arrears.esi_on_ot_amount, 0 AS 'emp_cca', pay_billing_unit_rate_arrears.gross AS 'bill_gross', pay_billing_unit_rate_arrears.pf_amount AS 'bill_pf', pay_billing_unit_rate_arrears.uniform AS 'bill_uniform', ((pay_billing_master_history_arrears.group_insurance_billing / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster.tot_days_present) AS 'group_insurance_billing', service_group_insurance_billing, pay_employee_master.Employee_type, 0 AS 'bill_service_charge_amount', pay_billing_master_history_arrears.esic_common_allow, 0 AS 'common_allow', IFNULL(branch_type, 0) AS 'branch_type', pay_billing_master_history_arrears.esic_oa_billing, pay_billing_unit_rate_arrears.month_days, gst_applicable, OPus_NO, pay_attendance_muster.month, pay_attendance_muster.year, pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1', pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2', pay_company_master.CITY AS 'COMP_CITY', pay_company_master.PF_REG_NO, pay_company_master.COMPANY_PAN_NO, pay_company_master.COMPANY_TAN_NO, pay_company_master.COMPANY_CIN_NO, pay_company_master.SERVICE_TAX_REG_NO, pay_company_master.ESIC_REG_NO, (SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST') AS 'unit_gst_no', pay_company_master.COMPANY_NAME, (SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1', UNIT_ADD2, pay_employee_master.Employee_type AS 'EMP_TYPE', pay_company_master.STATE AS 'COMP_STATE', pay_company_master.housekeeiing_sac_code, pay_company_master.Security_sac_code, pay_grade_master.grade_code AS 'GRADE_CODE', pay_client_master.bill_amount, pay_billing_master_history_arrears.chemical_consumables_rate, pay_billing_master_history_arrears.tool_tackles_rate, pay_billing_master_history_arrears.chemical_applicable, pay_billing_master_history_arrears.tool_applicable, pay_unit_master.emp_count, pay_billing_master_history_arrears.basic AS 'actual_basic', pay_billing_master_history_arrears.vda AS 'actual_vda', pay_employee_master.joining_date, pay_client_master.penalty,pay_billing_master_history_arrears. pf_cmn_on FROM pay_employee_master INNER JOIN pay_attendance_muster ON pay_attendance_muster.emp_code = pay_employee_master.emp_code AND pay_attendance_muster.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster.unit_code = pay_unit_master.unit_code AND pay_attendance_muster.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate_arrears ON pay_attendance_muster.unit_code = pay_billing_unit_rate_arrears.unit_code AND pay_attendance_muster.month = pay_billing_unit_rate_arrears.month AND pay_attendance_muster.year = pay_billing_unit_rate_arrears.year INNER JOIN pay_billing_master_history_arrears ON pay_billing_master_history_arrears.comp_code = pay_billing_unit_rate_arrears.comp_code AND pay_billing_master_history_arrears.comp_code = pay_employee_master.comp_code AND pay_billing_master_history_arrears.billing_client_code = pay_billing_unit_rate_arrears.client_code AND pay_billing_master_history_arrears.billing_unit_code = pay_billing_unit_rate_arrears.unit_code AND pay_billing_master_history_arrears.month = pay_billing_unit_rate_arrears.month AND pay_billing_master_history_arrears.year = pay_billing_unit_rate_arrears.year AND pay_employee_master.grade_code = pay_billing_master_history_arrears.designation AND pay_billing_master_history_arrears.designation = pay_billing_unit_rate_arrears.designation AND pay_billing_master_history_arrears.hours = pay_billing_unit_rate_arrears.hours AND pay_billing_master_history_arrears.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history_arrears.comp_code = pay_grade_master.comp_code AND pay_billing_master_history_arrears.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code WHERE  " + where;
                    d.operation("delete  from pay_billing_unit_rate_history_arrears where " + delete_where + "  and bill_type = 'Arrears_bill'");
                    d.operation("insert into pay_billing_unit_rate_history_arrears(comp_code,client_code,unit_code,EMP_CODE,client,state_name,unit_name,unit_city,client_branch_code,emp_name,grade_desc,emp_basic_vda,hra,bonus_gross,leave_gross,gratuity_gross,washing,travelling,education,allowances,cca_billing,other_allow,gross,bonus_after_gross,leave_after_gross,gratuity_after_gross,pf,esic,hrs_12_ot,esic_ot,lwf,uniform,relieving_charg,operational_cost,tot_days_present,Amount,Service_charge,CGST9,IGST18,SGST9,bill_service_charge,NH,hours,fromtodate,sub_total_c,ot_rate,ot_hours,ot_amount,group_insurance_billing,bill_service_charge_amount,branch_type,month_days,gst_applicable,OPus_NO,month,year ,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE,COMP_STATE , housekeeiing_sac_code, Security_sac_code,GRADE_CODE,chemical_consumables_rate,tool_tackles_rate,chemical_applicable,bill_amount ,tool_applicable,emp_count,joining_date,billing_gst_applicable,penalty,bill_type) " + sql);


                }
            }
            else if (ddl_arrears_type.SelectedValue.Equals("policy"))
            {
                //vinod
                string sql = null;
                string delete_where = null;
                string unit = null, unit1 = null;
                if (int.Parse(txt_arrear_month_year.Text.Substring(0, 2)) != 1)
                {
                    if (ddl_unitcode.SelectedValue == "ALL")
                    {

                        unit = "AND unit_code IN (select unit_code from pay_unit_master  where comp_code='" + Session["comp_code"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "' and STATE_NAME ='" + ddl_billing_state.SelectedValue + "' )";
                        unit1 = "AND t1.unit_code IN (select unit_code from pay_unit_master  where comp_code='" + Session["comp_code"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "' and STATE_NAME ='" + ddl_billing_state.SelectedValue + "' )";

                    }
                    else
                    {
                        unit = "AND unit_code='" + ddl_unitcode.SelectedValue + "'";
                        unit1 = "AND t1.unit_code='" + ddl_unitcode.SelectedValue + "'";
                    }
                }
                else
                {
                    if (ddl_unitcode.SelectedValue == "ALL")
                    {

                        unit = "AND unit_code IN (select unit_code from pay_unit_master  where comp_code='" + Session["comp_code"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "' and STATE_NAME ='" + ddl_billing_state.SelectedValue + "' )";
                    }
                    else
                    {
                        unit = "AND t1.unit_code='" + ddl_unitcode.SelectedValue + "'";
                    }
                }

                //string ed_date = "";
                string daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_arrear_month_year.Text + "','%d/%m/%Y'), '%D %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_arrear_monthend.Text + "','%d/%m/%Y'), '%D %b %Y'))) as fromtodate";
                //string start_date_common = get_start_date();
                d.arrears_attendance_update(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, unit1, txt_arrear_month_year.Text, txt_arrear_monthend.Text, unit);

                string where = " pay_company_master.comp_code ='" + Session["comp_code"].ToString() + "'  AND pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' AND pay_attendance_muster_arrears.month = '" + txt_arrear_monthend.Text.Substring(3, 2) + "' AND pay_attendance_muster_arrears.Year = '" + txt_arrear_monthend.Text.Substring(6) + "' and  pay_attendance_muster_arrears.tot_days_present > 0  ORDER BY 4, 3) AS billing_table) AS Final_billing";

                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    where = "pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_attendance_muster_arrears.month = '" + txt_arrear_month_year.Text.Substring(3, 2) + "' and pay_attendance_muster_arrears.Year = '" + txt_arrear_month_year.Text.Substring(6) + "' and pay_attendance_muster_arrears.tot_days_present > 0 and  pay_attendance_muster_arrears.tot_days_present > 0  ORDER BY 4, 3) AS billing_table) AS Final_billing";
                    delete_where = "month='" + txt_arrear_month_year.Text.Substring(3, 2) + "' and Year = '" + txt_arrear_month_year.Text.Substring(6) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "' ";
                }
                else if (ddl_unitcode.SelectedValue == "ALL")
                {
                    where = " pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_attendance_muster_arrears.month = '" + txt_arrear_month_year.Text.Substring(3, 2) + "' and pay_attendance_muster_arrears.Year = '" + txt_arrear_month_year.Text.Substring(6) + "' and pay_attendance_muster_arrears.tot_days_present > 0 ORDER BY 4, 3) AS billing_table) AS Final_billing ";
                    delete_where = "month='" + txt_arrear_month_year.Text.Substring(3, 2) + "' and Year = '" + txt_arrear_month_year.Text.Substring(6) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "' and state_name = '" + ddl_billing_state.SelectedValue + "' ";
                }
                else if (ddl_unitcode.SelectedValue != "ALL")
                {
                    where = " pay_company_master.comp_code = '" + Session["comp_code"].ToString() + "' and pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' and pay_unit_master.state_name = '" + ddl_billing_state.SelectedValue + "' and pay_unit_master.unit_code ='" + ddl_unitcode.SelectedValue + "'   and pay_attendance_muster_arrears.month = '" + txt_arrear_month_year.Text.Substring(3, 2) + "' and pay_attendance_muster_arrears.Year = '" + txt_arrear_month_year.Text.Substring(6) + "' and pay_attendance_muster_arrears.tot_days_present > 0  ORDER BY 4, 3) AS billing_table) AS Final_billing ";
                    delete_where = "month='" + txt_arrear_month_year.Text.Substring(3, 2) + "' and Year = '" + txt_arrear_month_year.Text.Substring(6) + "' and client_code = '" + ddl_client.SelectedValue + "' and comp_code = '" + Session["COMP_CODE"].ToString() + "' and state_name = '" + ddl_billing_state.SelectedValue + "' and pay_billing_unit_rate_history_arrears.unit_code ='" + ddl_unitcode.SelectedValue + "' ";

                }
                int counter = 2;

                bs.Billing(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_arrear_month_year.Text.Substring(3, 2), txt_arrear_month_year.Text.Substring(6), Session["LOGIN_ID"].ToString(), counter, int.Parse(txt_arrear_month_year.Text.Substring(0, 2)), 2, "", "", ddl_arrears_type.SelectedValue);
                sql = "SELECT comp_code,client_code,unit_code,emp_code,client,state_name,unit_name,unit_city,client_branch_code,emp_name,grade_desc,emp_basic_vda,hra,bonus_gross,leave_gross,gratuity_gross,washing,travelling,education,allowances,cca_billing,other_allow,gross,bonus_after_gross,leave_after_gross,gratuity_after_gross,pf,IF(gross > 21000, 0, esic) AS 'esic',hrs_12_ot,IF(gross > 21000, 0, esi_on_ot_amount) AS 'esic_ot',lwf,'0' as 'uniform',relieving_charg,'0' as 'operational_cost',tot_days_present,(Total+ pf+ IF(gross > 21000, 0, esic)+ group_insurance_billing_ser) AS 'Amount',IF((((Total+ pf+ IF(gross > 21000, 0, esic)+ (ot_rate * ot_hours)+ group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total+ pf+ IF(gross > 21000, 0, esic)+ (ot_rate * ot_hours)+ group_insurance_billing_ser) * bill_service_charge) / 100)) AS 'Service_charge',CASE WHEN billing_gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total+ pf+ IF(gross > 21000, 0, esic)+ (ot_rate * ot_hours)+ group_insurance_billing_ser+ group_insurance_billing) + IF((((Total+ pf+ IF(gross > 21000, 0, esic)+ (ot_rate * ot_hours)+ group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total+ pf+ IF(gross > 21000, 0, esic)+ (ot_rate * ot_hours)+ group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'CGST9',CASE WHEN billing_gst_applicable = 1 AND LOCATE(company_state, state_name) != 1 THEN ROUND(((((Total+ pf+ IF(gross > 21000, 0, esic)+ (ot_rate * ot_hours)+ group_insurance_billing_ser+ group_insurance_billing) + IF((((Total+ pf+ IF(gross > 21000, 0, esic)+ (ot_rate * ot_hours)+ group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total+ pf+ IF(gross > 21000, 0, esic)+ (ot_rate * ot_hours)+ group_insurance_billing_ser) * bill_service_charge) / 100))) * 18) / 100), 2) ELSE 0 END AS 'IGST18',CASE WHEN billing_gst_applicable = 1 AND LOCATE(company_state, state_name) THEN ROUND(((((Total+ pf+ IF(gross > 21000, 0, esic) + (ot_rate * ot_hours)+ group_insurance_billing_ser+ group_insurance_billing) + IF((((Total+ pf+ IF(gross > 21000, 0, esic)+ (ot_rate * ot_hours)+ group_insurance_billing_ser) * bill_service_charge) / 100) = 0, bill_service_charge_amount, (((Total+ pf+ IF(gross > 21000, 0, esic)+ (ot_rate * ot_hours)+ group_insurance_billing_ser) * bill_service_charge) / 100))) * 9) / 100), 2) ELSE 0 END AS 'SGST9',bill_service_charge,NH,hours, " + daterange + ",CASE WHEN emp_cca = 0 THEN (sub_total_c - ot_rate) ELSE (bill_gross+ ((bill_gross * esic_percent) / 100)+ bill_pf+ bill_uniform+ group_insurance_billing_ser+ bonus_after_gross+ leave_after_gross+ gratuity_after_gross+ monthlwf) END AS 'sub_total_c',IF(ot_hours > 0, ot_rate, 0) AS 'ot_rate',IF(0 = 1 || 0 = 0, ot_hours, 0) AS 'ot_hours',(ot_rate * ot_hours) AS 'ot_amount',group_insurance_billing,bill_service_charge_amount,branch_type,month_days,gst_applicable,OPus_NO,month,year,COMP_ADDRESS1,COMP_ADDRESS2,COMP_CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,unit_gst_no,COMPANY_NAME,UNIT_full_ADD1,UNIT_ADD2,EMP_TYPE,COMP_STATE,housekeeiing_sac_code,Security_sac_code,GRADE_CODE,chemical_consumables_rate,tool_tackles_rate,chemical_applicable,bill_amount,tool_applicable,emp_count,joining_date,billing_gst_applicable,penalty," + txt_arrear_month_year.Text.Substring(0, 2) + " AS 'start_date'," + txt_arrear_monthend.Text.Substring(0, 2) + " AS 'end_date',material_contract,contract_type,contract_amount,handling_applicable,handling_percent,equmental_applicable,equmental_unit,equmental_rental_rate,equmental_handling_applicable,equmental_handling_percent,dustbin_applicable,dustbin_unit,dustbin_liners_rate,dustbin_handling_applicable,dustbin_handling_percent,femina_applicable,femina_unit,femina_hygiene_rate,femina_handling_applicable,femina_handling_percent,aerosol_applicable,aerosol_unit,aerosol_dispenser_rate,aerosol_handling_applicable,aerosol_handling_percent,chemical_unit FROM ( SELECT comp_code,client_code,unit_code,emp_code,client,company_state,unit_name,state_name,unit_city,client_branch_code,emp_name,grade_desc,emp_basic_vda,hra,bonus_gross,leave_gross,gratuity_gross,washing,travelling,education,allowances,cca_billing,other_allow,(emp_basic_vda+ hra+ bonus_gross+ leave_gross+ washing+ travelling+ education+ allowances+ cca_billing+ other_allow+ gratuity_gross+ hrs_12_ot) AS 'gross',bonus_after_gross,leave_after_gross,gratuity_after_gross,CASE WHEN pf_cmn_on = 0 THEN (((emp_basic_vda) / 100) * pf_percent) WHEN pf_cmn_on = 1 THEN ((emp_basic_vda + hra + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 2 THEN ((emp_basic_vda + bonus_gross + leave_gross + washing + travelling + education + allowances + cca_billing + other_allow + gratuity_gross + hrs_12_ot) / 100) * pf_percent WHEN pf_cmn_on = 3 THEN ((emp_basic_vda + cca_billing + other_allow) / 100) * pf_percent END AS 'pf',(((emp_basic_vda+ hra+ bonus_gross+ leave_gross+ washing+ travelling+ education+ IF(esic_oa_billing = 1, allowances, 0)+ cca_billing+ other_allow+ gratuity_gross+ hrs_12_ot) / 100) * esic_percent) AS 'esic',hrs_12_ot,(((hrs_12_ot) * esic_percent) / 100) AS 'esic_ot',lwf,CASE WHEN bill_ser_uniform = 1 THEN 0 ELSE uniform END AS 'uniform',relieving_charg,CASE WHEN bill_ser_operations = 1 THEN 0 ELSE operational_cost END AS 'operational_cost',tot_days_present,(emp_basic_vda+ hra+ bonus_gross+ leave_gross+ washing+ travelling+ education+ allowances+ cca_billing+ other_allow+ gratuity_gross+ bonus_after_gross+ leave_after_gross+ gratuity_after_gross+ lwf+ CASE WHEN bill_ser_uniform = 0 THEN 0 ELSE uniform END+ relieving_charg+ CASE WHEN bill_ser_operations = 0 THEN 0 ELSE operational_cost END+ NH+ hrs_12_ot+ IF(esic_common_allow = 0, common_allow, 0)) AS 'Total',bill_service_charge,NH,hours,(bill_gross + emp_cca) AS 'bill_gross',sub_total_c,bill_ser_uniform,bill_ser_operations,(ot_rate + esi_on_ot_amount) AS 'ot_rate',ot_hours,esic_amount,esi_on_ot_amount,emp_cca,bill_pf,bill_uniform,esic_percent,IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 0 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing',IF(Employee_type = 'Permanent', CASE WHEN service_group_insurance_billing = 1 THEN group_insurance_billing ELSE 0 END, 0) AS 'group_insurance_billing_ser',bill_service_charge_amount,branch_type,month_days,gst_applicable,OPus_NO,month,year,COMP_ADDRESS1,COMP_ADDRESS2,COMP_CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,unit_gst_no,COMPANY_NAME,UNIT_full_ADD1,UNIT_ADD2,EMP_TYPE,COMP_STATE,housekeeiing_sac_code,Security_sac_code,GRADE_CODE,chemical_consumables_rate,tool_tackles_rate,chemical_applicable,bill_amount,tool_applicable,emp_count,joining_date,billing_gst_applicable,penalty,material_contract,contract_type,contract_amount,handling_applicable,handling_percent,equmental_applicable,equmental_unit,equmental_rental_rate,equmental_handling_applicable,dustbin_applicable,dustbin_unit,dustbin_liners_rate,dustbin_handling_applicable,dustbin_handling_percent,femina_applicable,femina_unit,femina_hygiene_rate,femina_handling_applicable,femina_handling_percent,aerosol_applicable,aerosol_unit,aerosol_dispenser_rate,aerosol_handling_applicable,aerosol_handling_percent,equmental_handling_percent,chemical_unit,pf_cmn_on,monthlwf FROM (SELECT pay_unit_master.comp_code,pay_unit_master.client_code,pay_unit_master.unit_code,pay_employee_master.emp_code,client_name AS 'client',pay_company_master.state AS 'company_state',pay_unit_master.unit_name,pay_unit_master.state_name,pay_unit_master.unit_city,pay_unit_master.client_branch_code,(SELECT CASE pay_employee_master.Employee_type WHEN 'Reliever' THEN CONCAT(pay_employee_master.emp_name, '-', 'Reliever') ELSE pay_employee_master.emp_name END) AS 'emp_name',pay_grade_master.grade_desc,(((pay_billing_master_history_arrears.diff_basic_vda) / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) AS 'emp_basic_vda',((pay_billing_unit_rate_arrears.hra / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) AS 'hra',CASE WHEN bonus_taxable = '1' THEN ((pay_billing_unit_rate_arrears.bonus_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) ELSE 0 END AS 'bonus_gross',CASE WHEN bonus_taxable = '0' THEN ((pay_billing_unit_rate_arrears.bonus_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) ELSE 0 END AS 'bonus_after_gross',CASE WHEN leave_taxable = '1' THEN ((pay_billing_unit_rate_arrears.leave_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) ELSE 0 END AS 'leave_gross',CASE WHEN leave_taxable = '0' THEN ((pay_billing_unit_rate_arrears.leave_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) ELSE 0 END AS 'leave_after_gross',CASE WHEN gratuity_taxable = '1' THEN ((pay_billing_unit_rate_arrears.grauity_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) ELSE 0 END AS 'gratuity_gross',CASE WHEN gratuity_taxable = '0' THEN ((pay_billing_unit_rate_arrears.grauity_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) ELSE 0 END AS 'gratuity_after_gross',((pay_billing_unit_rate_arrears.washing / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) AS 'washing',((pay_billing_unit_rate_arrears.traveling / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) AS 'travelling',((pay_billing_unit_rate_arrears.education / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) AS 'education',((pay_billing_unit_rate_arrears.national_holiday_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) AS 'NH',((pay_billing_unit_rate_arrears.allowances / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) AS 'allowances',0 AS 'cca_billing',0 AS 'other_allow',CASE WHEN pay_billing_master_history_arrears.ot_policy_billing = '1' THEN ((pay_billing_master_history_arrears.ot_amount_billing / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) ELSE 0 END AS 'hrs_12_ot',pay_billing_master_history_arrears.bill_esic_percent AS 'esic_percent',pay_billing_master_history_arrears.bill_pf_percent AS 'pf_percent',CASE WHEN pay_employee_master.employee_type = 'Permanent' THEN pay_billing_unit_rate_arrears.lwf ELSE 0 END AS 'monthlwf',CASE WHEN pay_billing_master_history_arrears.pf_cmn_on = 0 THEN ((pay_billing_unit_rate_arrears.lwf / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) WHEN pay_employee_master.employee_type = 'Permanent' THEN pay_billing_unit_rate_arrears.lwf ELSE 0 END AS 'lwf',((pay_billing_unit_rate_arrears.uniform / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) AS 'uniform',((pay_billing_unit_rate_arrears.relieving_amount / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) AS 'relieving_charg',((pay_billing_unit_rate_arrears.operational_cost / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) AS 'operational_cost',pay_attendance_muster_arrears.tot_days_present,ROUND(((pay_billing_unit_rate_arrears.sub_total_c / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present), 2) AS 'baseamount',bill_service_charge,pay_billing_master_history_arrears.hours,pay_billing_unit_rate_arrears.sub_total_c,pay_billing_master_history_arrears.bill_ser_operations,pay_billing_master_history_arrears.bill_ser_uniform,pay_billing_unit_rate_arrears.ot_1_hr_amount AS 'ot_rate',pay_attendance_muster_arrears.ot_hours,pay_billing_unit_rate_arrears.esic_amount,pay_billing_unit_rate_arrears.esi_on_ot_amount,0 AS 'emp_cca',pay_billing_unit_rate_arrears.gross AS 'bill_gross',pay_billing_unit_rate_arrears.pf_amount AS 'bill_pf',pay_billing_unit_rate_arrears.uniform AS 'bill_uniform',((pay_billing_master_history_arrears.group_insurance_billing / pay_billing_unit_rate_arrears.month_days) * pay_attendance_muster_arrears.tot_days_present) AS 'group_insurance_billing',service_group_insurance_billing,pay_employee_master.Employee_type,0 AS 'bill_service_charge_amount',pay_billing_master_history_arrears.esic_common_allow,0 AS 'common_allow',IFNULL(branch_type, 0) AS 'branch_type',pay_billing_master_history_arrears.esic_oa_billing,pay_billing_unit_rate_arrears.month_days,gst_applicable,OPus_NO,pay_attendance_muster_arrears.month,pay_attendance_muster_arrears.year,pay_company_master.ADDRESS1 AS 'COMP_ADDRESS1',pay_company_master.ADDRESS2 AS 'COMP_ADDRESS2',pay_company_master.CITY AS 'COMP_CITY',pay_company_master.PF_REG_NO,pay_company_master.COMPANY_PAN_NO,pay_company_master.COMPANY_TAN_NO,pay_company_master.COMPANY_CIN_NO,pay_company_master.SERVICE_TAX_REG_NO,pay_company_master.ESIC_REG_NO,(SELECT field2 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND type = 'GST') AS 'unit_gst_no',pay_company_master.COMPANY_NAME,(SELECT field1 FROM pay_zone_master WHERE pay_zone_master.client_code = pay_client_master.client_code AND pay_zone_master.region = pay_unit_master.state_name AND comp_code = pay_company_master.comp_code AND type = 'GST') AS 'UNIT_full_ADD1',UNIT_ADD2,pay_employee_master.Employee_type AS 'EMP_TYPE',pay_company_master.STATE AS 'COMP_STATE',pay_company_master.housekeeiing_sac_code,pay_company_master.Security_sac_code,pay_grade_master.grade_code AS 'GRADE_CODE',pay_client_master.bill_amount,pay_billing_master_history_arrears.chemical_consumables_rate,pay_billing_master_history_arrears.tool_tackles_rate,pay_billing_master_history_arrears.chemical_applicable,pay_billing_master_history_arrears.tool_applicable,pay_unit_master.emp_count,pay_billing_master_history_arrears.diff_basic AS 'actual_basic',pay_billing_master_history_arrears.diff_vda AS 'actual_vda',pay_employee_master.joining_date,pay_billing_master_history_arrears.billing_gst_applicable,pay_client_master.penalty,material_contract,contract_type,contract_amount,handling_applicable,handling_percent,equmental_applicable,equmental_unit,equmental_rental_rate,equmental_handling_applicable,dustbin_applicable,dustbin_unit,dustbin_liners_rate,dustbin_handling_applicable,dustbin_handling_percent,femina_applicable,femina_unit,femina_hygiene_rate,femina_handling_applicable,femina_handling_percent,aerosol_applicable,aerosol_unit,aerosol_dispenser_rate,aerosol_handling_applicable,aerosol_handling_percent,equmental_handling_percent,chemical_unit,pay_billing_master_history_arrears.pf_cmn_on FROM pay_employee_master INNER JOIN pay_attendance_muster_arrears ON pay_attendance_muster_arrears.emp_code = pay_employee_master.emp_code AND pay_attendance_muster_arrears.comp_code = pay_employee_master.comp_code INNER JOIN pay_unit_master ON pay_attendance_muster_arrears.unit_code = pay_unit_master.unit_code AND pay_attendance_muster_arrears.comp_code = pay_unit_master.comp_code INNER JOIN pay_billing_unit_rate_arrears ON pay_attendance_muster_arrears.unit_code = pay_billing_unit_rate_arrears.unit_code AND pay_attendance_muster_arrears.month = pay_billing_unit_rate_arrears.month AND pay_attendance_muster_arrears.year = pay_billing_unit_rate_arrears.year INNER JOIN pay_billing_master_history_arrears ON pay_billing_master_history_arrears.comp_code = pay_billing_unit_rate_arrears.comp_code AND pay_billing_master_history_arrears.comp_code = pay_employee_master.comp_code AND pay_billing_master_history_arrears.billing_client_code = pay_billing_unit_rate_arrears.client_code AND pay_billing_master_history_arrears.billing_unit_code = pay_billing_unit_rate_arrears.unit_code AND pay_billing_master_history_arrears.month = pay_billing_unit_rate_arrears.month AND pay_billing_master_history_arrears.year = pay_billing_unit_rate_arrears.year AND pay_employee_master.grade_code = pay_billing_master_history_arrears.designation AND pay_billing_master_history_arrears.designation = pay_billing_unit_rate_arrears.designation AND pay_billing_master_history_arrears.hours = pay_billing_unit_rate_arrears.hours AND pay_billing_master_history_arrears.type = 'billing' INNER JOIN pay_company_master ON pay_employee_master.comp_code = pay_company_master.comp_code INNER JOIN pay_grade_master ON pay_billing_master_history_arrears.comp_code = pay_grade_master.comp_code AND pay_billing_master_history_arrears.designation = pay_grade_master.GRADE_CODE INNER JOIN pay_client_master ON pay_unit_master.comp_code = pay_client_master.comp_code AND pay_unit_master.client_code = pay_client_master.client_code  WHERE " + where;


                d.operation("delete from pay_billing_unit_rate_history_arrears where " + delete_where);
                d.operation("insert into pay_billing_unit_rate_history_arrears(comp_code,client_code,unit_code,EMP_CODE,client,state_name,unit_name,unit_city,client_branch_code,emp_name,grade_desc,emp_basic_vda,hra,bonus_gross,leave_gross,gratuity_gross,washing,travelling,education,allowances,cca_billing,other_allow,gross,bonus_after_gross,leave_after_gross,gratuity_after_gross,pf,esic,hrs_12_ot,esic_ot,lwf,uniform,relieving_charg,operational_cost,tot_days_present,Amount,Service_charge,CGST9,IGST18,SGST9,bill_service_charge,NH,hours,fromtodate,sub_total_c,ot_rate,ot_hours,ot_amount,group_insurance_billing,bill_service_charge_amount,branch_type,month_days,gst_applicable,OPus_NO,month,year ,COMP_ADDRESS1, COMP_ADDRESS2, COMP_CITY, PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, unit_gst_no, COMPANY_NAME, UNIT_full_ADD1 , UNIT_ADD2, EMP_TYPE,COMP_STATE , housekeeiing_sac_code, Security_sac_code,GRADE_CODE,chemical_consumables_rate,tool_tackles_rate,chemical_applicable,bill_amount ,tool_applicable,emp_count,joining_date,billing_gst_applicable,penalty,start_date,end_date,material_contract, contract_type, contract_amount, handling_applicable, handling_percent, equmental_applicable, equmental_unit, equmental_rental_rate, equmental_handling_applicable, equmental_handling_percent, dustbin_applicable, dustbin_unit, dustbin_liners_rate, dustbin_handling_applicable, dustbin_handling_percent, femina_applicable, femina_unit, femina_hygiene_rate, femina_handling_applicable, femina_handling_percent, aerosol_applicable, aerosol_unit, aerosol_dispenser_rate, aerosol_handling_applicable, aerosol_handling_percent,chemical_unit) " + sql);

            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

        }
    }
    protected void btn_arrears_invoice_Click(object sender, EventArgs e)
    {
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close
        hidtab.Value = "6";

        hidtab.Value = "6";
        arrears_invoice = 1;
        btn_invoice_rpt_Click(null, null);
    }
    protected void btn_arrears_finance_Click(object sender, EventArgs e)
    {
        //17/04/2020 start vinod chnages for all state finance copy of arrears
        //suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        //suraj close
        //17/04/2020 end vinod chnages for all state finance copy of arrears

        hidtab.Value = "6";
        arrears_invoice = 1;
        generate_report(7, 0, billing_type.SelectedValue);
    }
    protected void btn_arrears_attendance_Click(object sender, EventArgs e)
    {
        ////suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        ////suraj close

        hidtab.Value = "6";
        arrears_invoice = 1;
        if (ddl_arrears_type.SelectedValue.Equals("month")) { generate_report(3, 0, billing_type.SelectedValue); }
        else if (ddl_arrears_type.SelectedValue.Equals("policy")) { generate_report(8, 0, billing_type.SelectedValue); }

    }

    protected void btn_final_arrears_invoice_Click(object sender, EventArgs e)
    {
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        hidtab.Value = "6";
        arrears_invoice = 1;
        final_invoice_flag(billing_type.SelectedValue);
        invoice_arrear = 1;
        //paypro_no(4);
        display_ClientBilling();
        btn_invoice_rpt_Click(null, null);
    }


    protected string btnnew_Click(string where, int bill_type)
    {
        string invoice_series = null;
        string billing_type = null;
        string table_name = "pay_billing_unit_rate_history";

        int invauto_no = 0, index = 7;
        string billing_code = "";
        string client_code = ddl_client.SelectedValue;
        int len = 10;
        //client_code
        if (bill_type == 0)
        {
            table_name = "pay_billing_unit_rate_history_arrears";
        }
        invoice_series = d.getsinglestring("select id from pay_client_master where comp_code= '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'");

        invoice_series = int.Parse(invoice_series) < 10 ? "0" + invoice_series : invoice_series;

        //month
        if (ddl_arrears_type.SelectedValue == "policy")
        {
            invoice_series = invoice_series + txt_arrear_month_year.Text.Substring(3, 2);

            //select year

            invoice_series = invoice_series + txt_arrear_month_year.Text.Substring(8);

        }
        else
        {
            invoice_series = invoice_series + txt_month_year.Text.Substring(0, 2);

            //select year

            invoice_series = invoice_series + txt_month_year.Text.Substring(5);
        }
        if (bill_type != 0)
        {
            billing_code = (bill_type == 1 || bill_type == 6) ? "C" : bill_type == 2 ? "M" : bill_type == 3 ? "D" : bill_type == 4 ? "P" : "";
            billing_type = (bill_type == 1 || bill_type == 6) ? "and billing_type = 'Conveyance'" : (bill_type == 2) ? "and billing_type = 'Material'" : (bill_type == 3) ? "and billing_type = 'DeepClean'" : (bill_type == 4) ? "and billing_type = 'PestControl'" : "";
            index = 8;
            table_name = " pay_billing_material_history ";

        }
        //vikas add 11/06/2019
        if (bill_type == 5)
        {
            billing_code = "MR";
            index = 9;
            table_name = "pay_billing_rental_machine";
            invoice_series = invoice_series + billing_code;
            string invoicehis_no = d.getsinglestring("select  MAX(CAST(SUBSTRING(invoice_no, " + index + ") AS UNSIGNED))+1 as 'auto_invoice_no' from  pay_billing_invoice_history  " + where + " and billing_type = 'machine_rental' and invoice_no is not null");
            string invoicenew_no = d.getsinglestring("select  MAX(CAST(SUBSTRING(auto_invoice_no, " + index + ") AS UNSIGNED))+1 as 'auto_invoice_no' from  " + table_name + "  " + where + " and auto_invoice_no is not null");

            invauto_no = (invoicehis_no == "" && invoicenew_no == "") ? invauto_no : int.Parse(invoicehis_no) > int.Parse(invoicenew_no) ? int.Parse(invoicehis_no) : int.Parse(invoicenew_no);
        }
        //R&M Services
         else if (bill_type == 7)
        {
            billing_code = "RM";
            index = 9;
            table_name = "pay_billing_r_m";
            invoice_series = invoice_series + billing_code;
            string invoicehis_no = d.getsinglestring("select  MAX(CAST(SUBSTRING(invoice_no, " + index + ") AS UNSIGNED))+1 as 'auto_invoice_no' from  pay_billing_invoice_history  " + where + " and billing_type = 'r_m_bill' and invoice_no is not null");
            string invoicenew_no = d.getsinglestring("select  MAX(CAST(SUBSTRING(auto_invoice_no, " + index + ") AS UNSIGNED))+1 as 'auto_invoice_no' from  " + table_name + "  " + where + " and auto_invoice_no is not null");

            invauto_no = (invoicehis_no == "" && invoicenew_no == "") ? invauto_no : int.Parse(invoicehis_no) > int.Parse(invoicenew_no) ? int.Parse(invoicehis_no) : int.Parse(invoicenew_no);
        }
        //Administrative Expense
        else if (bill_type == 8)
        {
            billing_code = "AE";
            index = 9;
            table_name = "pay_billing_admini_expense";
            invoice_series = invoice_series + billing_code;
            string invoicehis_no = d.getsinglestring("select  MAX(CAST(SUBSTRING(invoice_no, " + index + ") AS UNSIGNED))+1 as 'auto_invoice_no' from  pay_billing_invoice_history  " + where + " and billing_type = 'administrative_bill' and invoice_no is not null");
            string invoicenew_no = d.getsinglestring("select  MAX(CAST(SUBSTRING(auto_invoice_no, " + index + ") AS UNSIGNED))+1 as 'auto_invoice_no' from  " + table_name + "  " + where + " and auto_invoice_no is not null");

            invauto_no = (invoicehis_no == "" && invoicenew_no == "") ? invauto_no : int.Parse(invoicehis_no) > int.Parse(invoicenew_no) ? int.Parse(invoicehis_no) : int.Parse(invoicenew_no);
        }
        else
        {
            invoice_series = invoice_series + billing_code;

            string invoicehis_no = d.getsinglestring("select  ifnull((MAX(CAST(SUBSTRING(invoice_no, " + index + ") AS UNSIGNED))+1),1) as 'auto_invoice_no' from  pay_billing_invoice_history  " + where + " " + billing_type + " and invoice_no is not null");
            if (table_name == " pay_billing_material_history ")
            {
                billing_type = null;
                billing_type = (bill_type == 1 || bill_type == 6) ? "and type = 'Conveyance'" : (bill_type == 2) ? "and type = 'Material'" : (bill_type == 3) ? "and type = 'DeepClean'" : (bill_type == 4) ? "and type = 'PestControl'" : "";
            }
            string invoicenew_no = d.getsinglestring("select  ifnull((MAX(CAST(SUBSTRING(auto_invoice_no, " + index + ") AS UNSIGNED))+1),1) as 'auto_invoice_no' from  " + table_name + "  " + where + " " + billing_type + " and auto_invoice_no is not null");

            invauto_no = (invoicehis_no == "" && invoicenew_no == "") ? invauto_no : int.Parse(invoicehis_no) > int.Parse(invoicenew_no) ? int.Parse(invoicehis_no) : int.Parse(invoicenew_no);


        }



        if (invauto_no == 0)
        {
            invoice_series = invoice_series + "00001";
        }
        else
        {

            if (invauto_no < 10)
            {
                invoice_series = invoice_series + "0000" + invauto_no;
            }
            else if (invauto_no > 9 && invauto_no < 100)
            {
                invoice_series = invoice_series + "000" + invauto_no;
            }
            else if (invauto_no > 99 && invauto_no < 1000)
            {
                invoice_series = invoice_series + "00" + invauto_no;
            }
            else if (invauto_no > 999 && invauto_no < 10000)
            {
                invoice_series = invoice_series + "0" + invauto_no;
            }
            else
            {
                invoice_series = invoice_series + invauto_no;
            }

        }


        return invoice_series;
    }



    protected void link_image_1_Command(object sender, CommandEventArgs e)
    {
        GridViewRow rwo = (GridViewRow)((LinkButton)sender).NamingContainer;
        string client_code = rwo.Cells[0].Text;
        // string id = rwo.Cells[0].Text;
        string file_name = d.getsinglestring("select image_1 from pay_image_bill_upload where comp_code='" + Session["COMP_CODE"].ToString() + "' and client_code='" + client_code + "' and month_year='" + txt_month_year.Text + "' and state_name='" + ddl_billing_state.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "'   ");
        try
        {
            if (file_name != "")
            {
                downloadfile1(file_name);
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Billing Cannot Be Uploaded !!!')", true);
            }
        }
        catch (Exception ex) { }
        finally
        {
        }
    }
    protected void link_image_2_Command(object sender, CommandEventArgs e)
    {
        GridViewRow rwo = (GridViewRow)((LinkButton)sender).NamingContainer;
        string client_code = rwo.Cells[0].Text;
        //string id = rwo.Cells[0].Text;
        string file_name = d.getsinglestring("select image_2 from pay_image_bill_upload where comp_code='" + Session["COMP_CODE"].ToString() + "' and client_code='" + client_code + "'  and month_year='" + txt_month_year.Text + "'  and state_name='" + ddl_billing_state.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' ");
        try
        {
            if (file_name != "")
            {
                downloadfile1(file_name);
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendance Cannot Be Uploaded !!!')", true);
            }
        }
        catch (Exception ex) { }
        finally
        {
        }
    }
    protected void link_image_3_Command(object sender, CommandEventArgs e)
    {
        GridViewRow rwo = (GridViewRow)((LinkButton)sender).NamingContainer;
        string client_code = rwo.Cells[0].Text;
        // string id = rwo.Cells[0].Text;
        string file_name = d.getsinglestring("select image_3 from pay_image_bill_upload where comp_code='" + Session["COMP_CODE"].ToString() + "' and client_code='" + client_code + "'  and month_year='" + txt_month_year.Text + "'  and state_name='" + ddl_billing_state.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' ");
        try
        {
            if (file_name != "")
            {
                downloadfile1(file_name);
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert(' Finance Cannot Be Uploaded !!!')", true);
            }
        }
        catch (Exception ex) { }
        finally
        {
        }
    }
    protected void link_image_4_Command(object sender, CommandEventArgs e)
    {
        GridViewRow rwo = (GridViewRow)((LinkButton)sender).NamingContainer;
        string client_code = rwo.Cells[0].Text;
        // string id = rwo.Cells[0].Text;
        string file_name = d.getsinglestring("select image_4 from pay_image_bill_upload where comp_code='" + Session["COMP_CODE"].ToString() + "' and client_code='" + client_code + "'  and month_year='" + txt_month_year.Text + "'  and state_name='" + ddl_billing_state.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' ");
        try
        {
            if (file_name != "")
            {
                downloadfile1(file_name);
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert(' Rate Brackup Cannot Be Uploaded !!!')", true);
            }
        }
        catch (Exception ex) { }
        finally
        {
        }
    }
    protected void link_image_5_Command(object sender, CommandEventArgs e)
    {
        GridViewRow rwo = (GridViewRow)((LinkButton)sender).NamingContainer;
        string client_code = rwo.Cells[0].Text;
        //  string id = rwo.Cells[0].Text;
        string file_name = d.getsinglestring("select image_5 from pay_image_bill_upload where comp_code='" + Session["COMP_CODE"].ToString() + "' and client_code='" + client_code + "'  and month_year='" + txt_month_year.Text + "'  and state_name='" + ddl_billing_state.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' ");
        try
        {
            if (file_name != "")
            {
                downloadfile1(file_name);
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('PF Sheet Cannot Be Uploaded !!!')", true);
            }
        }
        catch (Exception ex) { }
        finally
        {
        }
    }
    protected void downloadfile1(string file_name)
    {
        try
        {
            string path2 = Server.MapPath("~\\grade_unit_upload\\" + file_name);
            Response.Clear();
            Response.ContentType = "Application/pdf/jpg/jpeg/png/zip";
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + Path.GetFileName(path2));
            Response.TransmitFile("~\\grade_unit_upload\\" + file_name);
            Response.WriteFile(path2);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
            Response.End();
            Response.Close();

        }
        catch (Exception ex) { }
    }


    protected void gv_image_upload_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        for (int i = 0; i < e.Row.Cells.Count; i++)
        {
            if (e.Row.Cells[i].Text == "&nbsp;")
            {
                e.Row.Cells[i].Text = "";
            }
        }
        e.Row.Cells[0].Visible = false;
        e.Row.Cells[4].Visible = false;
    }
    //end vikas
    protected void billing_type1()
    {
        billing_type.Items.Clear();
        System.Data.DataTable dt_item = new System.Data.DataTable();
        MySqlDataAdapter cmd_item = new MySqlDataAdapter("select distinct billing_id,billing_name from pay_client_billing_details  where pay_client_billing_details.client_code='" + ddl_client.SelectedValue + "'", d.con);


        d.con.Open();
        try
        {
            ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true);
            cmd_item.Fill(dt_item);
            if (dt_item.Rows.Count > 0)
            {
                billing_type.DataSource = dt_item;

                billing_type.DataValueField = dt_item.Columns[0].ToString();
                billing_type.DataTextField = dt_item.Columns[1].ToString();
                billing_type.DataBind();
            }
            dt_item.Dispose();
            d.con.Close();
            billing_type.Items.Insert(0, "Select");

        }
        catch (Exception ex) { throw ex; }
        finally
        {
            d.con.Close();
        }

    }

    //start suraj
    protected Boolean billing_type_validation()
    {

        int result = 0, i = 0;
        string[] bill_type_store = new string[4];

        d.con.Open();
        MySqlCommand cmd = new MySqlCommand("select billing_wise from pay_client_billing_details where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and billing_id = '" + billing_type.SelectedValue + "' and state = '" + ddl_billing_state.SelectedValue + "' order by billingwise_id desc", d.con);
        MySqlDataReader dr = cmd.ExecuteReader();

        while (dr.Read())
        {
            bill_type_store[i] = dr.GetValue(0).ToString();
            i++;
            if (dr.GetValue(0).ToString() == "Statewise")
            {
                if (ddl_billing_state.SelectedValue == "ALL")
                {
                    result = 0;
                }
                else if (ddl_billing_state.SelectedValue != "ALL")
                {
                    if (ddl_unitcode.SelectedValue == "ALL")
                    {
                        //result = 0;
                        if (ddl_invoice_type.SelectedValue == "1")
                        {
                            result = 0;
                        }
                        else
                        {
                            result = 1;
                        }
                    }
                    else
                    {
                        result = 1;
                    }

                    foreach (string bill_type in bill_type_store)
                    {
                        if (bill_type == "Branchwise")
                        {
                            if (ddl_unitcode.SelectedValue != "ALL")
                            {
                                result = 0;
                            }
                        }
                    }

                }
                else
                {
                    result = 1;
                }
            }

            if (dr.GetValue(0).ToString() == "Branchwise")
            {

                if (ddl_billing_state.SelectedValue != "ALL")
                {
                    if (ddl_unitcode.SelectedValue != "ALL")
                    {
                        // result = 0;
                        if (ddl_invoice_type.SelectedValue == "1")
                        {
                            result = 0;
                        }
                        else
                        {
                            result = 1;
                        }
                    }

                    else
                    {
                        result = 1;
                    }
                }
                else
                {
                    result = 1;
                }
            }

            if (dr.GetValue(0).ToString() == "Statewisedesignation")
            {

                if (ddl_billing_state.SelectedValue != "ALL")
                {
                    if (ddl_invoice_type.SelectedValue == "2")
                    {
                        result = 0;
                    }

                    else
                    {
                        result = 1;
                    }
                }
                else
                {
                    result = 1;
                }
            }
            if (dr.GetValue(0).ToString() == "Branchwisedesignation")
            {

                if (ddl_billing_state.SelectedValue != "ALL")
                {
                    if (ddl_unitcode.SelectedValue != "ALL")
                    {

                        if (ddl_invoice_type.SelectedValue == "2")
                        {
                            result = 0;
                        }

                        else
                        {
                            result = 1;
                        }
                    }
                    else
                    {
                        result = 1;
                    }
                }
                else
                {
                    result = 1;
                }
            }
        }
        d.con.Close();
        if (bill_type_store[0] == null)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Select Correct State');", true);
            return true;
        }
        foreach (string bill_type in bill_type_store)
        {
            if (bill_type == null) { break; }
            billing_selection = billing_selection + bill_type + " or ";
        }
        if (billing_selection.Substring(billing_selection.Length - 3, 2).Contains("or"))
        {
            billing_selection = billing_selection.Substring(0, billing_selection.Length - 3);
        }
        if (result > 0)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Select " + billing_selection + " Billing');", true);
            return true;
        }
        return false;

    }
    //end suraj

    protected void material_invoice_flag(int i)
    {
        string auto_invoice_no = null, emp_code = null, unit_code = null;
        int result = 0;
        string bill_type = (i == 1 || i == 6) ? "and billing_type = 'Conveyance'" : (i == 2) ? "and billing_type = 'Material'" : (i == 3) ? "and billing_type = 'DeepClean'" : (i == 4) ? "and billing_type = 'PestControl'" : "";
        string invoice_clause = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'";
        string invoice_history_Where_clause = " where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and unit_code =  '" + ddl_unitcode.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and invoice_type = '" + ddl_invoice_type.SelectedValue + "' and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' and designation = '" + ddl_designation.SelectedValue + "' " + bill_type;
        string bill = (i == 1 || i == 6) ? "  'Conveyance'" : (i == 2) ? "  'Material'" : (i == 3) ? "  'DeepClean'" : (i == 4) ? "  'PestControl'" : "";
        string ctype = "";
        string d_convence = "";
        int drivercon = 0;
        if (i == 6)
        {
            ctype = " and conveyance_type='100'";
            drivercon = 100;
            d_convence = " and drivercon ='100'";
        }
        else if (i == 1)
        {
            ctype = " and conveyance_type !='100'";
            drivercon = 0;
            d_convence = " and drivercon !='100'";
        }
        try
        {
            //vikas add if else condition
            if (i == 5)
            {
                //vikas add 11/06/2019
                string inv_no = d.getsinglestring("select invoice_no from  pay_billing_invoice_history where  comp_code= '" + Session["COMP_CODE"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "' and state_name='" + ddl_billing_state.SelectedValue + "' and unit_code ='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and billing_type='machine_rental'");
                if (!inv_no.Equals(""))
                {
                    auto_invoice_no = inv_no;
                    txt_invoice_no.Text = inv_no;
                }
                else
                {
                    auto_invoice_no = btnnew_Click(invoice_clause, i);
                    txt_invoice_no.Text = auto_invoice_no;
                }


                result = d.operation("update pay_billing_rental_machine set invoice_flag = '1',status_flag = '1',auto_invoice_no='" + auto_invoice_no + "' , billing_date = str_to_date('" + txt_bill_date.Text + "','%d/%m/%Y'), invoice_no='" + txt_invoice_no.Text + "' where  comp_code= '" + Session["COMP_CODE"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "' and state='" + ddl_billing_state.SelectedValue + "' and unit_code ='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "'");

                d.operation("delete from pay_billing_invoice_history  " + invoice_history_Where_clause + " and  billing_type ='machine_rental' ");
                d.operation("insert into pay_billing_invoice_history(Invoice_No,comp_code,CLIENT_CODE,state_name,unit_code,month,year,Invoice_type,designation,billing_type,start_date,end_date,drivercon,region) values('" + auto_invoice_no + "','" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + ddl_billing_state.SelectedValue + "','" + ddl_unitcode.SelectedValue + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + ddl_invoice_type.SelectedValue + "','" + ddl_designation.SelectedValue + "','machine_rental','" + ddl_start_date_common.SelectedValue + "','" + ddl_end_date_common.SelectedValue + "','" + drivercon + "','" + ddlregion.SelectedValue + "')");


            }
            else
            {

                if (d.getsinglestring("select Max(invoice_flag) from pay_billing_material_history  " + where_clause(i) + " " + ctype + "").Equals("0"))
                {
                    if (ddl_client.SelectedValue.Equals("RCPL"))
                    {
                        unit_code = d.get_group_concat("select distinct(unit_code) as 'unit_code' from pay_billing_material_history  " + where_clause(i));
                        unit_code = unit_code.Replace(",", "','");
                        result = d.operation("update pay_billing_material_history set invoice_flag = '1' ,status_flag = '1',billing_date = str_to_date('" + txt_bill_date.Text + "','%d/%m/%Y')  " + where_clause(i) + "  and  unit_code in ('" + unit_code + "')" + ctype + "");


                    }
                    else
                    {
                        string inv_no = d.getsinglestring("select invoice_no from  pay_billing_invoice_history " + invoice_history_Where_clause + " " + d_convence + "");
                        if (!inv_no.Equals(""))
                        {
                            auto_invoice_no = inv_no;
                            txt_invoice_no.Text = inv_no;
                        }
                        else
                        {
                            auto_invoice_no = btnnew_Click(invoice_clause, i);
                            txt_invoice_no.Text = auto_invoice_no;
                        }

                        emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_billing_material_history  " + where_clause(i));
                        emp_code = emp_code.Replace(",", "','");
                        result = d.operation("update pay_billing_material_history set invoice_flag = '1' ,status_flag = '1',auto_invoice_no='" + auto_invoice_no + "' , billing_date = str_to_date('" + txt_bill_date.Text + "','%d/%m/%Y'), invoice_no='" + txt_invoice_no.Text + "'  " + where_clause(i) + "  and  emp_code in ('" + emp_code + "')   " + ctype + " ");
                        d.operation("delete from pay_billing_invoice_history  " + invoice_history_Where_clause + " " + d_convence + "");
                        d.operation("insert into pay_billing_invoice_history(Invoice_No,comp_code,CLIENT_CODE,state_name,unit_code,month,year,Invoice_type,designation,billing_type,start_date,end_date,drivercon,region) values('" + auto_invoice_no + "','" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + ddl_billing_state.SelectedValue + "','" + ddl_unitcode.SelectedValue + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + ddl_invoice_type.SelectedValue + "','" + ddl_designation.SelectedValue + "'," + bill + ",'" + ddl_start_date_common.SelectedValue + "','" + ddl_end_date_common.SelectedValue + "','" + drivercon + "','" + ddlregion.SelectedValue + "')");

                    }
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        { }

    }


    protected string where_clause(int i)
    {

        string where2 = null, bill_type, club_invoice = null;
        try
        {
            bill_type = (i == 1) ? "and type = 'Conveyance'" : (i == 2) ? "and type = 'Material'" : (i == 3) ? "and type = 'DeepClean'" : (i == 4) ? "and type = 'PestControl'" : "";


            if (ddl_invoice_type.SelectedValue == "2")
            {
                club_invoice = "and GRADE_CODE = '" + ddl_designation.SelectedValue + "'";
            }

            club_invoice = club_invoice + " " + bill_type;
            where2 = "where comp_code= '" + Session["COMP_CODE"].ToString() + "' and  client_code='" + ddl_client.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' " + club_invoice;
            if (ddl_billing_state.SelectedValue != "ALL")
            {
                where2 = "where comp_code='" + Session["COMP_CODE"].ToString() + "' and  client_code='" + ddl_client.SelectedValue + "' and state_name='" + ddl_billing_state.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "'" + club_invoice;
            }
            if (ddl_unitcode.SelectedValue != "ALL")
            {

                where2 = "where comp_code= '" + Session["COMP_CODE"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "' and state_name='" + ddl_billing_state.SelectedValue + "' and unit_code ='" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "'" + club_invoice;

            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
        }
        return where2;
    }

    protected void btn_dc_fb_Click(object sender, EventArgs e)
    {
        hidtab.Value = "3";
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        try
        {
            material_invoice_flag(3);
            // display_ClientBilling();
            invoice_fl_dep = 1;
            btn_dc_Click(null, null);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        { }


    }

    protected void btn_material_fbill_Click(object sender, EventArgs e)
    {
        hidtab.Value = "1";
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        gv_material_load();
        string where = "";
        where = " pay_material_details.comp_code='" + Session["comp_code"].ToString() + "' and pay_material_details.client_code= '" + ddl_client.SelectedValue + "' and pay_material_details.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_material_details.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_material_details.year = '" + txt_month_year.Text.Substring(3) + "'  ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = " pay_material_details.comp_code='" + Session["comp_code"].ToString() + "' and pay_material_details.client_code= '" + ddl_client.SelectedValue + "'  and pay_material_details.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_material_details.year = '" + txt_month_year.Text.Substring(3) + "' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = " pay_material_details.comp_code='" + Session["comp_code"].ToString() + "' and pay_material_details.client_code= '" + ddl_client.SelectedValue + "' and pay_material_details.state_name = '" + ddl_billing_state.SelectedValue + "'  and pay_material_details.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_material_details.year = '" + txt_month_year.Text.Substring(3) + "' ";

        }
        string unit = d.getsinglestring("SELECT DISTINCT GROUP_CONCAT(DISTINCT pay_billing_material_history.unit_name) FROM pay_material_details INNER JOIN pay_client_master ON pay_material_details.client_code = pay_client_master.client_code INNER JOIN pay_unit_master ON pay_unit_master.COMP_CODE = pay_material_details.COMP_CODE AND pay_unit_master.unit_code = pay_material_details.unit_code INNER JOIN pay_billing_material_history ON pay_billing_material_history.COMP_CODE = pay_material_details.COMP_CODE AND pay_billing_material_history.unit_code = pay_material_details.unit_code AND pay_billing_material_history.month = pay_material_details.month AND pay_billing_material_history.year = pay_material_details.year WHERE " + where + " AND (pay_material_details.material_flag = 1 || pay_material_details.material_flag != 2) AND pay_billing_material_history.invoice_flag = 0 AND pay_billing_material_history.contract_type = 4 AND pay_material_details.material_status IS NOT NULL ORDER BY pay_billing_material_history.unit_name");
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Material not Approved by Finance for Branch : " + unit + "');", true);
            return;

        }
        try
        {
            material_invoice_flag(2);
            display_ClientBilling();
            gv_material_load();
            invoice_fl_ma = 1;
            btn_material_fixbill_Click(null, null);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        { }


    }
    protected void grd_material_billing_PreRender(object sender, EventArgs e)
    {
        try
        {
            grd_material_billing.UseAccessibleHeader = false;
            grd_material_billing.HeaderRow.TableSection = TableRowSection.TableHeader;
        }
        catch { }//vinod dont apply catch
    }
    protected void hide_aprove()
    {
        string hidde = d.getsinglestring("SELECT invoice_flag FROM   pay_files_timesheet WHERE  comp_code= '" + Session["COMP_CODE"].ToString() + "' and  client_code='" + ddl_client.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "'");
        if (hidde == "1")
        {
            //  btn_approve.Visible = false;
        }

    }
    protected void btn_statewise_breakup_Click(object sender, EventArgs e)
    {
        // attendance_status();
        Notification_panel.Visible = false;
        hidtab.Value = "0";
        generate_report(5, 0, billing_type.SelectedValue);
    }

    protected void gv_machine()
    {
        gv_machine_rent.DataSource = null;
        gv_machine_rent.DataBind();
        if (ddl_billing_state.SelectedValue.Equals("ALL"))
        {
            return;
        }
        string unit_code = " and unit_code ='" + ddl_unitcode.SelectedValue + "'";
        string unit_code1 = " AND billing_unit_code = '" + ddl_unitcode.SelectedValue + "'";
        string unit_code2 = " AND pay_billing_rental_machine.unit_code = '" + ddl_unitcode.SelectedValue + "'";
        if (d.getsinglestring("select billing_wise from pay_client_billing_details where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and billing_id = '" + billing_type.SelectedValue + "' and state = '" + ddl_billing_state.SelectedValue + "' order by billingwise_id desc").Equals("Statewise"))
        {
            unit_code = "";
            unit_code1 = "";
            unit_code2 = "";
        }


        MySqlDataAdapter cmd_item = null;
        string date = d.getsinglestring("SELECT id FROM pay_billing_rental_machine WHERE comp_code= '" + Session["COMP_CODE"].ToString() + "' and  status_flag !='0' and client_code='" + ddl_client.SelectedValue + "' and state='" + ddl_billing_state.SelectedValue + "'" + unit_code + "and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "'");
        if (date == "")
        {
            cmd_item = new MySqlDataAdapter("SELECT pay_machine_rental_details.id, pay_machine_rental_details.policy_id, pay_unit_master.unit_name AS 'billing_unit_code', policy_machine_nane, CASE policy_rate_type WHEN 'Fix Rate' THEN 'Fix Amt' WHEN 'Per Hr. Rate' THEN 'Hrs' WHEN 'Per Day Rate' THEN 'Days' ELSE policy_rate_type END AS 'policy_rate_type',  '0' AS 'policy_m_rate',  policy_m_rate  AS 'policy_m_rate1', policy_m_h_charges, CASE policy_in_pre WHEN '' THEN '0' ELSE policy_in_pre END AS 'policy_in_pre', CASE policy_m_amount WHEN '' THEN '0' ELSE policy_m_amount END AS 'policy_m_amount', pay_machine_rental_details.machine_code FROM pay_machine_rental_details INNER JOIN pay_unit_master ON pay_machine_rental_details.comp_code = pay_unit_master.comp_code AND pay_machine_rental_details.billing_client_code = pay_unit_master.client_code AND pay_machine_rental_details.billing_unit_code = pay_unit_master.unit_code LEFT OUTER JOIN pay_billing_rental_machine ON pay_machine_rental_details.comp_code = pay_billing_rental_machine.comp_code AND pay_machine_rental_details.billing_client_code = pay_billing_rental_machine.client_code AND pay_machine_rental_details.billing_state = pay_billing_rental_machine.state AND pay_machine_rental_details.billing_unit_code = pay_billing_rental_machine.unit_code and pay_machine_rental_details.policy_machine_nane = pay_billing_rental_machine.machine_name WHERE billing_client_code = '" + ddl_client.SelectedValue + "' AND billing_state = '" + ddl_billing_state.SelectedValue + "'" + unit_code1 + " and pay_machine_rental_details.comp_code= '" + Session["COMP_CODE"].ToString() + "'   group by  pay_machine_rental_details . machine_code ", d.con);
            d.con.Open();
        }
        else
        {
            cmd_item = new MySqlDataAdapter("select pay_machin_id AS 'id',policy_id,(select unit_name from pay_unit_master where comp_code='" + Session["COMP_CODE"].ToString() + "' and unit_code = '" + ddl_unitcode.SelectedValue + "') as 'billing_unit_code',machine_name AS 'policy_machine_nane',rent_type AS 'policy_rate_type', rent AS 'policy_m_rate',qty AS 'policy_m_rate1', CASE WHEN handling_per = '0' AND handling_amount = '0' THEN 'No' ELSE 'Yes' END AS 'policy_m_h_charges',handling_per AS 'policy_in_pre',handling_amount AS 'policy_m_amount',machine_code FROM pay_billing_rental_machine WHERE   month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' AND client_code='" + ddl_client.SelectedValue + "'" + unit_code2 + " and comp_code= '" + Session["COMP_CODE"].ToString() + "'", d.con);
        }

        try
        {
            System.Data.DataTable dt_item = new System.Data.DataTable();
            cmd_item.Fill(dt_item);
            if (dt_item.Rows.Count > 0)
            {
                gv_machine_rent.DataSource = dt_item;
                gv_machine_rent.DataBind();

            }
            dt_item.Dispose();

            d.con.Close();

        }
        catch (Exception ex) { throw ex; }
        finally
        {
            d.con.Close();
        }
    }
    protected void ddl_unitcode_SelectedIndexChanged(object sender, EventArgs e)
    {
        gv_machine();
    }
    protected void gv_machine_rent_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        for (int i = 0; i < e.Row.Cells.Count; i++)
        {
            if (e.Row.Cells[i].Text == "&nbsp;")
            {
                e.Row.Cells[i].Text = "";
            }

        }
        e.Row.Cells[0].Visible = false;
        e.Row.Cells[1].Visible = false;
        e.Row.Cells[6].Visible = false;
        e.Row.Cells[7].Visible = false;
        e.Row.Cells[8].Visible = false;
        e.Row.Cells[9].Visible = false;
        e.Row.Cells[10].Visible = false;
    }
    protected void gv_machine_rent_PreRender(object sender, EventArgs e)
    {
        try
        {
            gv_machine_rent.UseAccessibleHeader = false;
            gv_machine_rent.HeaderRow.TableSection = TableRowSection.TableHeader;
        }
        catch { }//vinod dont apply catch
    }
    //vikas 
    protected void btn_process_Click(object sender, EventArgs e)
    {
        //suraj start
        hidtab.Value = "2";
        // //suraj start
        if (billing_type_validation())
        {
            return;
        }
        // //suraj close
        // display_ClientBilling();

        hidtab.Value = "5";

        string unit_name = null;
        string where = " and client_code = '" + ddl_client.SelectedValue + "' ";

        if (!ddl_billing_state.SelectedValue.Equals("ALL"))
        {
            where = where + " and state = '" + ddl_billing_state.SelectedValue + "'";
        }
        if (!ddl_unitcode.SelectedValue.Equals("ALL"))
        {
            where = where + " and unit_code = '" + ddl_unitcode.SelectedValue + "'";
        }

        unit_name = d.getsinglestring("select DISTINCT state from pay_billing_rental_machine where comp_code= '" + Session["COMP_CODE"].ToString() + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and invoice_flag != 0" + where);
        if (unit_name != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + " Already Approve You can not proceed  !!');", true);
            return;
        }
        double total_amount = 0;
        d.operation("delete from pay_billing_rental_machine where invoice_flag=0 and month='" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and comp_code='" + Session["COMP_CODE"].ToString() + "'" + where);
        //gv_machine();
        foreach (GridViewRow row in gv_machine_rent.Rows)
        {
            string id = gv_machine_rent.Rows[row.RowIndex].Cells[0].Text;
            string policy_id = gv_machine_rent.Rows[row.RowIndex].Cells[1].Text;
            string brach = gv_machine_rent.Rows[row.RowIndex].Cells[2].Text;
            string machine_name = gv_machine_rent.Rows[row.RowIndex].Cells[3].Text;
            string rate_type = gv_machine_rent.Rows[row.RowIndex].Cells[4].Text;
            System.Web.UI.WebControls.TextBox qty = (System.Web.UI.WebControls.TextBox)gv_machine_rent.Rows[row.RowIndex].FindControl("txt_rate");
            string policy_rate = gv_machine_rent.Rows[row.RowIndex].Cells[6].Text;
            string handilnh_yn = gv_machine_rent.Rows[row.RowIndex].Cells[7].Text;
            string handling_per = gv_machine_rent.Rows[row.RowIndex].Cells[8].Text;
            string handing_amt = gv_machine_rent.Rows[row.RowIndex].Cells[9].Text;
            string machine_code = gv_machine_rent.Rows[row.RowIndex].Cells[10].Text;


            total_amount = double.Parse(qty.Text) * double.Parse(policy_rate);
            if (handilnh_yn == "Yes")
            {
                if (handling_per != "0")
                {
                    total_amount = total_amount + ((total_amount * double.Parse(handling_per)) / 100);
                }
                else
                {
                    total_amount = total_amount + double.Parse(handing_amt);
                }
            }

            string sql = ("SELECT '" + policy_id + "','" + id + "','" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + ddl_client.SelectedItem.Text + "','" + ddl_billing_state.SelectedValue + "','" + ddl_unitcode.SelectedValue + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + machine_name + "','" + handling_per + "','" + handing_amt + "','" + rate_type + "','" + qty.Text + "','" + total_amount + "','" + machine_code + "',ADDRESS1,ADDRESS2,CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,COMPANY_NAME,(SELECT Field1 FROM pay_zone_master WHERE  client_code = '" + ddl_client.SelectedValue + "' AND pay_zone_master.region = '" + ddl_billing_state.SelectedValue + "' AND comp_code = '" + Session["COMP_CODE"].ToString() + "' AND type = 'GST') as UNIT_full_ADD1,(SELECT Field2 FROM pay_zone_master WHERE  client_code = '" + ddl_client.SelectedValue + "' AND pay_zone_master.region = '" + ddl_billing_state.SelectedValue + "' AND comp_code = '" + Session["COMP_CODE"].ToString() + "' AND type = 'GST') as unit_gst_no,(SELECT unit_name FROM pay_unit_master  where unit_code='" + ddl_unitcode.SelectedValue + "' and comp_code='" + Session["COMP_CODE"].ToString() + "') as UNIT_CITY ,(SELECT  unit_city FROM pay_unit_master  where unit_code='" + ddl_unitcode.SelectedValue + "' and comp_code='" + Session["COMP_CODE"].ToString() + "') as UNIT_NAME,(SELECT UNIT_ADD2 FROM pay_unit_master  where unit_code='" + ddl_unitcode.SelectedValue + "' and comp_code='" + Session["COMP_CODE"].ToString() + "' ) as UNIT_ADD2,'" + policy_rate + "',CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) = SUBSTRING((SELECT Field2 FROM pay_zone_master WHERE  client_code = '" + ddl_client.SelectedValue + "' AND pay_zone_master.region = '" + ddl_billing_state.SelectedValue + "' AND comp_code = '" + Session["COMP_CODE"].ToString() + "' AND type = 'GST'),1, 2) THEN ( " + total_amount + " * 0.09) ELSE 0 END 'CGST',CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) = SUBSTRING((SELECT Field2 FROM pay_zone_master WHERE  client_code = '" + ddl_client.SelectedValue + "' AND pay_zone_master.region = '" + ddl_billing_state.SelectedValue + "' AND comp_code = '" + Session["COMP_CODE"].ToString() + "' AND type = 'GST'),1, 2) THEN ( " + total_amount + " * 0.09) ELSE 0 END 'SGST',CASE WHEN SUBSTRING( SERVICE_TAX_REG_NO ,1, 2) != SUBSTRING((SELECT Field2 FROM pay_zone_master WHERE  client_code = '" + ddl_client.SelectedValue + "' AND pay_zone_master.region = '" + ddl_billing_state.SelectedValue + "' AND comp_code = '" + Session["COMP_CODE"].ToString() + "' AND type = 'GST'),1, 2) THEN ( " + total_amount + " * 0.18) ELSE 0 END 'IGST'   FROM pay_company_master where comp_code='" + Session["COMP_CODE"].ToString() + "'");

            d.operation("INSERT INTO pay_billing_rental_machine (policy_id,pay_machin_id,comp_code,client_code,client_name,state,unit_code,month,year,machine_name,handling_per,handling_amount,rent_type,rent,total,machine_code,COMP_ADDRESS1,COMP_ADDRESS2,COMP_CITY,PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO,COMPANY_NAME,UNIT_full_ADD1,unit_gst_no,UNIT_CITY,UNIT_NAME,UNIT_ADD2,qty,cgst,sgst,igst) " + sql);

            if (ddl_client.SelectedValue == "RCPL")
            {
                btn_material_process_Click(null, null);
            }
        }
    }
    protected void btn_rent_finance_copy_Click(object sender, EventArgs e)
    {
        //suraj start
        hidtab.Value = "2";
        string headerpath = null;
        string footerpath = null, sql = "", invoice = "";
        if (billing_type_validation())
        {
            return;
        }
        //suraj close
        hidtab.Value = "5";

        if (ddl_client.SelectedValue.Equals("RCPL"))
        {
            btn_material_fixbill_Click(sender, e);
            return;
        }
        try
        {
            string daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(LAST_DAY('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01'), '%d %b %Y'))) as start_end_date";

            string start_date_common = get_start_date();
            if (start_date_common != "" && start_date_common != "1")
            {
                daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? 12 : (int.Parse(txt_month_year.Text.Substring(0, 2)) - 1)) + "-" + start_date_common + "','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-" + (int.Parse(start_date_common) - 1) + "','%Y-%m-%d'), '%d %b %Y'))) as start_end_date";
            }

            ReportDocument crystalReport = new ReportDocument();
            System.Data.DataTable dt = new System.Data.DataTable();
            DateTimeFormatInfo mfi = new DateTimeFormatInfo();
            string month_name = mfi.GetMonthName(int.Parse(txt_month_year.Text.Substring(0, 2))).ToString();

            // string query1 = "SELECT billing_date as 'month_days',auto_invoice_no as 'expr1',machine_name as 'type',CONCAT('Total',' ', rent_type) AS 'femina_unit',comp_code,COMPANY_NAME,COMP_ADDRESS1 AS 'ADDRESS1',COMP_ADDRESS2 AS 'ADDRESS2',COMP_CITY AS 'CITY',COMP_STATE AS 'STATE',PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO, state as STATE_NAME,UNIT_full_ADD1 AS 'UNIT_ADD1',UNIT_ADD2,UNIT_CITY,UNIT_NAME,client_name AS 'other',unit_gst_no," + daterange + ",concat('" + month_name + "',' ' ,'" + txt_month_year.Text.Substring(3) + "') AS 'month','' as housekeeiing_sac_code,'' as  Security_sac_code,'' AS 'grand_total','' AS 'Expr1','' AS 'hrs_12_ot', rent as 'emp_name'  ,unit_code,qty as 'equmental_unit',CASE WHEN handling_per > '0' THEN CONCAT(handling_per, '%') WHEN handling_amount > '0' THEN CONCAT(handling_amount, ' Amount') ELSE '' END AS 'chemical_unit', rent * qty AS 'total', CASE WHEN handling_per > '0' THEN (rent * qty) * (handling_per) / 100 WHEN handling_amount > '0' THEN handling_amount ELSE '0' END AS 'equmental_rental_rate',total as 'tool_unit' FROM pay_billing_rental_machine where month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and client_code='" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and  comp_code='" + Session["COMP_CODE"].ToString() + "' ";
            // rahul add Gst_to_be type  start

            string gst_to_be = d.getsinglestring("  select  DISTINCT (`Gst_to_be`) as 'Gst_to_be' from pay_unit_master where comp_code='" + Session["COMP_CODE"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "'");
            // end

            string query1 = "";
            if (ddl_client.SelectedValue == "RCPL")
            {

                query1 = "SELECT IF(pay_billing_unit_rate_history.invoice_flag != 0, DATE_FORMAT(pay_billing_unit_rate_history.billing_date, '%d/%m/%Y'), '') AS 'bill_date', pay_billing_unit_rate_history.comp_code, client AS 'other', pay_billing_unit_rate_history.COMPANY_NAME, pay_billing_unit_rate_history.COMP_ADDRESS1 AS 'ADDRESS1', pay_billing_unit_rate_history.COMP_ADDRESS2 AS 'ADDRESS2', pay_billing_unit_rate_history.COMP_CITY AS 'CITY', pay_billing_unit_rate_history.COMP_STATE AS 'STATE', pay_billing_unit_rate_history.PF_REG_NO, pay_billing_unit_rate_history.COMPANY_PAN_NO, pay_billing_unit_rate_history.COMPANY_TAN_NO, pay_billing_unit_rate_history.COMPANY_CIN_NO, pay_billing_unit_rate_history.SERVICE_TAX_REG_NO, pay_billing_unit_rate_history.ESIC_REG_NO, state_name AS 'STATE_NAME', fromtodate AS 'start_end_date', grade_desc AS 'designation', Amount AS 'total', bill_amount AS 'equmental_handling_percent', CONCAT('" + month_name + "', ' ', '" + txt_month_year.Text.Substring(3) + "') AS 'month', '998519' AS 'housekeeiing_sac_code', Security_sac_code, state_per AS 'tool_unit', pay_billing_unit_rate_history.companyname_gst_no AS 'unit_gst_no', IF(pay_billing_unit_rate_history.invoice_flag != 0, pay_billing_unit_rate_history.auto_invoice_no, '') AS 'Expr1', pay_billing_unit_rate_history.gst_address AS 'UNIT_ADD1', handling_per_amount AS 'tool_handling_percent', (pay_billing_rental_machine.total / 100) * pay_company_group.percent AS 'equmental_rental_rate', handling_percent AS 'hrs_12_ot', pay_billing_unit_rate_history.unit_name FROM pay_billing_material_history AS pay_billing_unit_rate_history INNer JOIN pay_billing_rental_machine ON pay_billing_rental_machine.client_code = pay_billing_unit_rate_history.client_code  AND pay_billing_rental_machine.comp_code = pay_billing_unit_rate_history.comp_code  AND pay_billing_rental_machine.unit_code = pay_billing_unit_rate_history.unit_code AND pay_billing_rental_machine.month = pay_billing_unit_rate_history.month AND pay_billing_rental_machine.year = pay_billing_unit_rate_history.year INNER JOIN pay_company_group  ON pay_billing_rental_machine.client_code = pay_billing_rental_machine.client_code  AND pay_billing_rental_machine.comp_code = pay_billing_rental_machine.comp_code  aND pay_billing_rental_machine.unit_code = pay_billing_rental_machine.unit_code WHERE pay_billing_unit_rate_history.comp_code = '" + Session["COMP_CODE"].ToString() + "' AND pay_billing_unit_rate_history.client_code = '" + ddl_client.SelectedValue + "' AND pay_billing_unit_rate_history.state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_billing_unit_rate_history.unit_code = '" + ddl_unitcode.SelectedValue + "' AND pay_billing_unit_rate_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_billing_unit_rate_history.Year = '" + txt_month_year.Text.Substring(3) + "' AND (emp_code = '' OR emp_code IS NULL) GROUP BY pay_company_group.comp_name ORDER BY pay_billing_unit_rate_history.auto_invoice_no ";
            }
            else if (ddl_client.SelectedValue == "MEDLINE")
            {
                //For Report Table
                if (invoice_machine_rental == 1)
                {
                    sql = "SELECT comp_code, client_code, client_name, state, billing_date, auto_invoice_no, unit_gst_no, month, year, 'machine_rental' AS 'comp_code', SUM(total) AS 'total', SUM(CGST) AS 'CGST', SUM(SGST) AS 'SGST', SUM(IGST) AS 'IGST','" + gst_to_be + "' FROM pay_billing_rental_machine WHERE month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and client_code='" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and  comp_code='" + Session["COMP_CODE"].ToString() + "' ";
                    invoice = d.getsinglestring("select invoice_no from pay_billing_rental_machine WHERE month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and client_code='" + ddl_client.SelectedValue + "'  and  comp_code='" + Session["COMP_CODE"].ToString() + "'");
                    d.operation("delete from pay_report_gst WHERE month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and client_code='" + ddl_client.SelectedValue + "'  and  comp_code='" + Session["COMP_CODE"].ToString() + "' and type = 'machine_rental' and invoice_no= '" + invoice + "' ");
                    d.operation("INSERT INTO pay_report_gst (comp_code,client_code,client_name,state_name,invoice_date, invoice_no, gst_no, month, year,type, Amount, cgst, sgst, igst,gst_to_be)" + sql);
                }
                //if you change sub_total,cgst,sgst,igst in invoice select query then also same changes in report select query same

                query1 = "SELECT date_format(billing_date,'%d/%m/%Y') as 'month_days',auto_invoice_no as 'expr1',machine_name as 'type',CONCAT('Total',' ', rent_type) AS 'femina_unit',pay_billing_rental_machine.comp_code,COMPANY_NAME,COMP_ADDRESS1 AS 'ADDRESS1',COMP_ADDRESS2 AS 'ADDRESS2',COMP_CITY AS 'CITY',COMP_STATE AS 'STATE',PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO, state as STATE_NAME,UNIT_full_ADD1 AS 'UNIT_ADD1',UNIT_ADD2,UNIT_CITY,UNIT_NAME,client_name AS 'other',unit_gst_no," + daterange + ",concat('" + month_name + "',' ' ,'" + txt_month_year.Text.Substring(3) + "') AS 'month','' as housekeeiing_sac_code,'' as  Security_sac_code,'' AS 'grand_total','' AS 'Expr1','' AS 'hrs_12_ot'  ,unit_code,CASE WHEN handling_per > '0' THEN CONCAT(handling_per, '%') WHEN handling_amount > '0' THEN CONCAT(handling_amount, ' Amount') ELSE '' END AS 'chemical_unit', rent * qty AS 'total', CASE WHEN handling_per > '0' THEN (rent * qty) * (handling_per) / 100 WHEN handling_amount > '0' THEN handling_amount ELSE '0' END AS 'equmental_rental_rate',total as 'tool_unit', qty  AS 'emp_name', rent  AS 'equmental_unit',hsn_number as 'dustbin_unit' FROM pay_billing_rental_machine INNER JOIN  pay_item_master  ON  pay_billing_rental_machine . machine_code  =  pay_item_master . ITEM_CODE  where month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and client_code='" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and  pay_billing_rental_machine.comp_code='" + Session["COMP_CODE"].ToString() + "' ";
            }
            else
            {
                //For Report Table
                if (invoice_machine_rental == 1)
                {
                    sql = "SELECT comp_code, client_code, client_name, state, billing_date, auto_invoice_no, unit_gst_no, month, year, 'machine_rental' AS 'comp_code', SUM(total) AS 'total', SUM(CGST) AS 'CGST', SUM(SGST) AS 'SGST', SUM(IGST) AS 'IGST','" + gst_to_be + "' FROM pay_billing_rental_machine WHERE month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and client_code='" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and  comp_code='" + Session["COMP_CODE"].ToString() + "' ";
                    invoice = d.getsinglestring("select invoice_no from pay_billing_rental_machine WHERE month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and client_code='" + ddl_client.SelectedValue + "'  and  comp_code='" + Session["COMP_CODE"].ToString() + "'");
                    d.operation("delete from pay_report_gst WHERE month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and client_code='" + ddl_client.SelectedValue + "'  and  comp_code='" + Session["COMP_CODE"].ToString() + "' and type = 'machine_rental' and invoice_no= '" + invoice + "' ");
                    d.operation("INSERT INTO pay_report_gst (comp_code,client_code,client_name,state_name,invoice_date, invoice_no, gst_no, month, year,type, Amount, cgst, sgst, igst,gst_to_be)" + sql);
                }
                //if you change sub_total,cgst,sgst,igst in invoice select query then also same changes in report select query same

                query1 = "SELECT date_format(billing_date,'%d/%m/%Y') as 'month_days',auto_invoice_no as 'expr1',machine_name as 'type',CONCAT('Total',' ', rent_type) AS 'femina_unit',comp_code,COMPANY_NAME,COMP_ADDRESS1 AS 'ADDRESS1',COMP_ADDRESS2 AS 'ADDRESS2',COMP_CITY AS 'CITY',COMP_STATE AS 'STATE',PF_REG_NO,COMPANY_PAN_NO,COMPANY_TAN_NO,COMPANY_CIN_NO,SERVICE_TAX_REG_NO,ESIC_REG_NO, state as STATE_NAME,UNIT_full_ADD1 AS 'UNIT_ADD1',UNIT_ADD2,UNIT_CITY,UNIT_NAME,client_name AS 'other',unit_gst_no," + daterange + ",concat('" + month_name + "',' ' ,'" + txt_month_year.Text.Substring(3) + "') AS 'month','' as housekeeiing_sac_code,'' as  Security_sac_code,'' AS 'grand_total','' AS 'Expr1','' AS 'hrs_12_ot'  ,unit_code,CASE WHEN handling_per > '0' THEN CONCAT(handling_per, '%') WHEN handling_amount > '0' THEN CONCAT(handling_amount, ' Amount') ELSE '' END AS 'chemical_unit', rent * qty AS 'total', CASE WHEN handling_per > '0' THEN (rent * qty) * (handling_per) / 100 WHEN handling_amount > '0' THEN handling_amount ELSE '0' END AS 'equmental_rental_rate',total as 'tool_unit', qty  AS 'emp_name', rent  AS 'equmental_unit' FROM pay_billing_rental_machine where month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and client_code='" + ddl_client.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' and  comp_code='" + Session["COMP_CODE"].ToString() + "' ";
            }
            MySqlCommand cmd = new MySqlCommand(query1, d.con);
            MySqlDataReader sda = null;
            d.con.Open();
            try
            {
                sda = cmd.ExecuteReader();
                dt.Load(sda);


            }
            catch (Exception ex) { throw ex; }
            if (ddl_client.SelectedValue == "RCPL")
            {
                crystalReport.Load(Server.MapPath("~/client_material_invoice_RG_unit.rpt"));
            }
            else
            {
                if (ddl_client.SelectedValue == "MEDLINE")
                {
                    crystalReport.Load(Server.MapPath("~/machine_fix_bill_medline.rpt"));
                }
                else
                {
                    crystalReport.Load(Server.MapPath("~/machine_fix_bill.rpt"));
                }

                if (Session["COMP_CODE"].ToString() == "C02")
                {
                    headerpath = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "Images\\C02_header.png");
                    footerpath = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "Images\\C02_footer.png");
                    crystalReport.DataDefinition.FormulaFields["headerimagepath1"].Text = @"'" + headerpath + "'";
                    crystalReport.DataDefinition.FormulaFields["footerimagepath"].Text = @"'" + footerpath + "'";
                }
                else
                {
                    headerpath = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "Images\\C01_header.png");
                    footerpath = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "Images\\C01_footer.png");
                    crystalReport.DataDefinition.FormulaFields["headerimagepath1"].Text = @"'" + headerpath + "'";
                    crystalReport.DataDefinition.FormulaFields["footerimagepath"].Text = @"'" + footerpath + "'";
                }
            }

            crystalReport.SetDataSource(dt);
            crystalReport.Refresh();
            crystalReport.ExportToHttpResponse(ExportFormatType.PortableDocFormat, this.Response, false, "TaxInvoice");
        }

        catch (Exception ee)
        {
            throw ee;
        }
        finally
        {
            d.con.Close();

        }
    }
    protected void btn_rent_invoice_Click(object sender, EventArgs e)
    {
        //suraj start
        hidtab.Value = "2";
        if (billing_type_validation())
        {
            return;
        }
        //suraj close
        hidtab.Value = "5";

        if (ddl_client.SelectedValue.Equals("RCPL"))
        {
            btn_material_fc_Click(sender, e);
            return;
        }

        try
        {
            string daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(LAST_DAY('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-01'), '%d %b %Y'))) as start_end_date";

            string start_date_common = get_start_date();
            if (start_date_common != "" && start_date_common != "1")
            {
                daterange = "concat(upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + (int.Parse(txt_month_year.Text.Substring(0, 2)) == 1 ? 12 : (int.Parse(txt_month_year.Text.Substring(0, 2)) - 1)) + "-" + start_date_common + "','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-" + (int.Parse(start_date_common) - 1) + "','%Y-%m-%d'), '%d %b %Y'))) as start_end_date";
            }
            string sql = "SELECT  cast(CASE WHEN handling_per > '0' THEN handling_per else '0' end as char)as 'h_per',auto_invoice_no,DATE_FORMAT(billing_date, '%d-%m-%Y') as 'billing_date'," + daterange + ",COMP_STATE AS 'STATE1',STATE,CLIENT_CODE,UNIT_NAME,machine_name,cast((CASE WHEN  handling_per  > '0' THEN (( rent  *  handling_per  *  qty ) / 100) WHEN  handling_amount  > 0 THEN  handling_amount  ELSE '0' END) as char) AS 'handling',total, rent as 'qty', qty as 'rent',rent*qty as 'rent_qty',cast(CASE WHEN SUBSTRING(service_tax_reg_no,1, 2) = SUBSTRING(unit_gst_no,1, 2) THEN ((total) * 9 / 100) ELSE '0' END as char) AS 'SGCT',cast(CASE WHEN SUBSTRING(service_tax_reg_no,1, 2) = SUBSTRING(unit_gst_no,1, 2) THEN ((total) * 9 / 100) ELSE '0' END as char) AS 'CGCT',cast(CASE WHEN SUBSTRING(service_tax_reg_no,1, 2) != SUBSTRING(unit_gst_no,1, 2) THEN ((total) * 18 / 100) ELSE '0' END as char) AS 'IGCT', rent_type  FROM pay_billing_rental_machine WHERE  comp_code = '" + Session["COMP_CODE"].ToString() + "' AND client_code = '" + ddl_client.SelectedValue + "' AND unit_code = '" + ddl_unitcode.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'";

            MySqlDataAdapter dscmd = new MySqlDataAdapter(sql, d.con);
            DataSet ds = new DataSet();
            dscmd.Fill(ds);

            if (ds.Tables[0].Rows.Count > 0)
            {
                Response.Clear();
                Response.Buffer = true;
                Response.AddHeader("content-disposition", "attachment;filename=Machine_Rental_Finance_copy_" + ddl_client.SelectedItem.Text.Replace(" ", "_") + ".xls");

                Response.Charset = "";
                Response.ContentType = "application/vnd.ms-excel";
                Repeater Repeater1 = new Repeater();
                Repeater1.DataSource = ds;
                Repeater1.HeaderTemplate = new MyTemplate11(ListItemType.Header, ds, 1);
                Repeater1.ItemTemplate = new MyTemplate11(ListItemType.Item, ds, 1);
                Repeater1.FooterTemplate = new MyTemplate11(ListItemType.Footer, null, 1);
                Repeater1.DataBind();

                System.IO.StringWriter stringWrite = new System.IO.StringWriter();
                System.Web.UI.HtmlTextWriter htmlWrite = new HtmlTextWriter(stringWrite);
                Repeater1.RenderControl(htmlWrite);

                string style = @"<style> .textmode { } </style>";
                Response.Write(style);
                Response.Output.Write(stringWrite.ToString());
                Response.Flush();
                Response.End();
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('No Matching Records Found.');", true);
            }
        }
        catch (Exception ex) { throw ex; }
        finally
        {
            d.con.Close();
        }
    }
    public class MyTemplate11 : ITemplate
    {
        ListItemType type;
        LiteralControl lc;
        DataSet ds;
        static int ctr;
        int i;


        public MyTemplate11(ListItemType type, DataSet ds, int i)
        {
            this.type = type;
            this.ds = ds;

            ctr = 0;

        }

        public void InstantiateIn(Control container)
        {


            switch (type)
            {
                case ListItemType.Header:

                    lc = new LiteralControl("<table border=1><tr ><th>SR No.</th><th>BILL NO</th><th>BILL DATE</th><th>INVOICE PERIOD</th><th>STATE</th><th>Location</th><th>Machine Name</th><th>Rent Type</th><th>QTY</th><th>Rate</th><th>Total</th><th>Handling Charges " + ds.Tables[0].Rows[ctr]["h_per"] + "%</th><th>Total</th><th>SGST 9%</th><th>CGST 9%</th><th>IGST 18%</th><th>Total GST</th><th>GRAND TOTAL</th></tr>");
                    break;
                case ListItemType.Item:
                    //3                                                 //location                                     //handling     
                    lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td> <td>" + ds.Tables[0].Rows[ctr]["auto_invoice_no"] + "</td><td>'" + ds.Tables[0].Rows[ctr]["billing_date"] + "</td><td>" + ds.Tables[0].Rows[ctr]["start_end_date"] + "</td><td>" + ds.Tables[0].Rows[ctr]["STATE"] + "</td><td>" + ds.Tables[0].Rows[ctr]["UNIT_NAME"] + "</td><td>" + ds.Tables[0].Rows[ctr]["machine_name"] + "</td><td>" + ds.Tables[0].Rows[ctr]["rent_type"] + "</td><td>" + ds.Tables[0].Rows[ctr]["qty"] + "</td><td>" + ds.Tables[0].Rows[ctr]["rent"] + "</td><td>" + ds.Tables[0].Rows[ctr]["rent_qty"] + "</td><td>" + ds.Tables[0].Rows[ctr]["handling"] + "</td><td>" + ds.Tables[0].Rows[ctr]["total"] + "</td><td>" + ds.Tables[0].Rows[ctr]["SGCT"] + "</td><td>" + ds.Tables[0].Rows[ctr]["CGCT"] + "</td><td>" + ds.Tables[0].Rows[ctr]["IGCT"] + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGCT"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["CGCT"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGCT"].ToString()), 2) + "</td><td>" + Math.Round(double.Parse(ds.Tables[0].Rows[ctr]["SGCT"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["CGCT"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["IGCT"].ToString()) + double.Parse(ds.Tables[0].Rows[ctr]["total"].ToString()), 2) + "</td></tr>");//double.Parse(ds.Tables[0].Rows[ctr]["handling_charge"].ToString()
                    if (ds.Tables[0].Rows.Count == ctr + 1)
                    {
                        lc.Text = lc.Text + "<tr><b><td align=center colspan = 10>Total</td><td>=ROUND(SUM(K2:k" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(L2:L" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(M2:M" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(N2:N" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(O2:O" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(P2:P" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(Q2:Q" + (ctr + 2) + "),2)</td><td>=ROUND(SUM(R2:R" + (ctr + 2) + "),2)</td></b></tr>";
                    }
                    ctr++;

                    break;
                case ListItemType.Footer:
                    lc = new LiteralControl("</table>");
                    ctr = 0;
                    break;
            }
            container.Controls.Add(lc);
        }


    }
    protected void btn_final_inv_Click(object sender, EventArgs e)
    {
        //suraj start
        hidtab.Value = "2";
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        hidtab.Value = "5";

        if (ddl_client.SelectedValue.Equals("RCPL"))
        {
            btn_material_fbill_Click(sender, e);
            return;
        }

        try
        {
            material_invoice_flag(5);
            //  btn_material_fixbill_Click(null, null);
            display_ClientBilling();
            invoice_machine_rental = 1;
            btn_rent_finance_copy_Click(null, null);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        { }
    }
    protected void btn_send_mail_Click(object sender, EventArgs e)
    {
        hidtab.Value = "7";
        ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true);

        //Check if all scanned bills are uploaded.
        if (!chk_invoices_uploaded().Equals(""))
        {
            ClientScript.RegisterStartupScript(GetType(), "alert", "alert('Please upload all scanned Bills / Invoices.');", true);
            return;
        }

        List<string> list4 = new List<string>();// string head_email_id



        char[] seperator1 = { ',' };

        //Check if All State bill XLS is checked
        if (chk_xls_bill_all.Checked)
        {

            ViewState["ALL_STATE"] = "2";
            btn_client_sheet_Click(null, null);
            list4.Add(ViewState["ALL_STATE"].ToString());
        }
        //check if pf

        if (chk_pf_challan.Checked)
        {
            list4 = add_email_files(list4, "PF_CHALLAN", "");
        }

        //check if ECR upload
        if (chk_ecr_file.Checked)
        {
            list4 = add_email_files(list4, "ECR_FILE", "");
        }

        //ESIC to be added in email
        foreach (GridViewRow gvrow in grd_esic_upload.Rows)
        {
            string selected_state = (string)grd_esic_upload.DataKeys[gvrow.RowIndex].Value;

            var checkbox = gvrow.FindControl("chk_state") as System.Web.UI.WebControls.CheckBox;
            if (checkbox.Checked == true)
            {
                list4 = add_email_files(list4, "ESIC", selected_state);
            }
        }

        //Bill uploaded into email
        foreach (GridViewRow gvrow in grd_bill_upload.Rows)
        {
            string selected_state = (string)grd_bill_upload.DataKeys[gvrow.RowIndex].Value;

            var checkbox = gvrow.FindControl("chk_bill") as System.Web.UI.WebControls.CheckBox;
            if (checkbox.Checked == true)
            {
                list4 = add_email_files(list4, "SCANNED_BILL_UPLOAD", selected_state);
            }
        }

        DateTimeFormatInfo mfi = new DateTimeFormatInfo();
        month_name = mfi.GetMonthName(int.Parse(txt_month_year.Text.Substring(0, 2))).ToString();
        month_name = month_name + " " + txt_month_year.Text.Substring(3).ToUpper();
        string where = "";
        List<int> list = new List<int>();
        // List<string> list1 = new List<string>();
        List<string> list3 = new List<string>();
        string from_emailid = "", password = "";

        // list1.Add(txt_mail_id.Text.Trim());
        string comp_name = d.getsinglestring("select COMPANY_NAME  from pay_company_master where comp_code = '" + Session["COMP_CODE"].ToString() + "'");

        d.con.Open();
        string boy_mail = "";
        using (MailMessage mailMessage = new MailMessage())
        {
            MySqlCommand cmd = new MySqlCommand("select Field2,Field3,field4,field5,field6,field7,field8, field9 from pay_zone_master where Field1 ='Invoice/Finance' and  type='client_Email' and comp_code='" + Session["comp_code"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "'", d.con);
            MySqlDataReader dr = cmd.ExecuteReader();
            if (dr.Read())
            {
                from_emailid = dr.GetValue(0).ToString();
                password = dr.GetValue(1).ToString();
                if (from_emailid == "")
                {
                    ClientScript.RegisterStartupScript(GetType(), "alert", "alert('Please enter Invoice/Finance email id in client master.');", true);
                    return;
                }
                else if (password == "")
                {
                    ClientScript.RegisterStartupScript(GetType(), "alert", "alert('Please enter Invoice/Finance password in client master.');", true);
                    return;
                }
                boy_mail = dr.GetValue(2).ToString() + "<br>Asst. Manager- " + dr.GetValue(3).ToString() + "<br>" + comp_name.Replace(",", " ").Trim() + "<br><span style = \"color:red\">(An ISO 9001-2008 Certified Company)</span><br>304, 3rd Floor, Nyati Millennium,Viman Nagar, Pune-411014 <br>Tel:" + dr.GetValue(4).ToString();

                int i = 0;

                //add cc email
                string[] to_email = dr.GetValue(5).ToString().Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
                foreach (string value in to_email)
                {
                    mailMessage.CC.Add(value.ToString());
                    i = 1;
                }

                //add bcc email
                to_email = dr.GetValue(6).ToString().Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
                foreach (string value in to_email)
                {
                    mailMessage.Bcc.Add(value.ToString());
                    i = 1;
                }

                //add to email
                to_email = dr.GetValue(7).ToString().Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
                foreach (string value in to_email)
                {
                    mailMessage.To.Add(value.ToString());
                    i = 1;
                }

                if (i == 0)
                {
                    ClientScript.RegisterStartupScript(GetType(), "alert", "alert('No Email id to send mail. Please add email ids in client master.');", true);
                    return;
                }
            }
            dr.Close();
            d.con.Close();

            string body = "<tr><td style = \"font-family:Georgia;font-size:12pt;\">Dear Sir / Madam,</td></tr><tr><p style = \"font-family:Georgia;font-size:12pt;\"><b>Greetings from the IH&MS....!!!!</b></p></tr><tr><p style = \"font-family:Georgia;font-size:12pt;\">Kindly find the attachment of the soft copy bill for the month of " + month_name + ".</p></tr><tr><p style = \"font-family:Georgia;font-size:12pt;\"></tr><tr><p style = \"font-family:Georgia;font-size:12pt\">Thanks & Regards</p></tr><tr><p style = \"font-size:10pt;\">" + boy_mail + " </p></tr>";


            SmtpClient SmtpServer = new SmtpClient("smtp.gmail.com");
            SmtpServer.Timeout = 180000;
            mailMessage.From = new MailAddress(from_emailid);
            try
            {

                if (list4.Count() > 0)
                {
                    foreach (string mail in list4)
                    {
                        mailMessage.Attachments.Add(new Attachment(mail));
                    }

                    mailMessage.Subject = "SOFT COPY /IH&MS/HOUSEKEEPING MANPOWER/" + get_month((int.Parse(txt_month_year.Text.Substring(0, 2))).ToString()) + " " + txt_month_year.Text.Substring(3) + "/ " + ddl_client.SelectedItem.Text.Replace(",", " ");
                    mailMessage.Body = body;
                    mailMessage.IsBodyHtml = true;
                    SmtpServer.Port = 587;
                    SmtpServer.Credentials = new System.Net.NetworkCredential(from_emailid, password);
                    SmtpServer.EnableSsl = true;
                    SmtpServer.Send(mailMessage);


                    d.operation("update pay_bill_invoices set sent_flag = 1 , sent_date = now() where comp_code = '" + Session["COMP_CODE"].ToString() + "'  " + where + "   and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and sent_flag = 0 ");
                    // }
                    //}
                    ClientScript.RegisterStartupScript(GetType(), "alert", "alert('Mail Send Successfully.');", true);
                }
                else
                {
                    ClientScript.RegisterStartupScript(GetType(), "alert", "alert('Attachment File Not Found Please Upload  File ');", true);
                }
                // list1.Clear();
                list3.Clear();
                list4.Clear();
                lbl_all_state.Visible = false;

            }

            catch (Exception ex)
            {
                ClientScript.RegisterStartupScript(GetType(), "alert", "alert('Mail not send.');", true);
            }
            finally
            {
                d.con.Close();

            }
        }
    }
    protected void btn_report_Click(object sender, EventArgs e)
    {
        attendance_status();
        if (!billing_type.SelectedValue.Equals("Select"))
        {
            display_ClientBilling();
            billing_rate_modal.Visible = true;
        }
    }
    protected void billing_type_SelectedIndexChanged(object sender, EventArgs e)
    {

    }
    protected void paypro_no(int i)
    {
        //pay_pro_no
        string where = "";
        string arrears = "", month = "", year = "";
        //vinod for region
        string where_state = "";
        month = " and month='" + txt_month_year.Text.Substring(0, 2) + "'";
        year = "and year = '" + txt_month_year.Text.Substring(3) + "'";

        if (i == 4)
        {
            arrears = "pay_billing_unit_rate_history_arrears as ";
            if (ddl_arrears_type.SelectedValue == "policy")
            {
                month = " and month='" + txt_arrear_month_year.Text.Substring(3, 2) + "'";
                year = "and year = '" + txt_arrear_month_year.Text.Substring(6) + "'";
            }
            else
            {
                month = " and month='" + txt_month_year.Text.Substring(0, 2) + "'";
                year = "and year = '" + txt_month_year.Text.Substring(3) + "'";
            }
        }
        if (d.getsinglestring("select billingwise_id from pay_client_billing_details where client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
        {
            where_state = " and pay_billing_unit_rate_history.zone = '" + ddlregion.SelectedValue + "'";
        }
        else
        { where_state = ""; }


        if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = " where comp_code='C01' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  " + month + " " + year + "" + where_state;

        }
        else
        {
            where = " where comp_code='C01' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "' and unit_code='" + ddl_unitcode.SelectedValue + "' " + month + " " + year + " " + where_state;
        }

        string Sql = "select emp_code, month,year," + i + ",0,@i:=@i+1 from  " + arrears + "pay_billing_unit_rate_history " + where + " and emp_code not in (select emp_code from pay_emp_paypro where type = " + i + " and month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and emp_code is not null)";
        d.operation("set @i:= (select ifnull(max(pay_pro_no),21000) from pay_emp_paypro where pay_pro_no < 98000);insert into pay_emp_paypro(emp_code,month,year,type,status,pay_pro_no)" + Sql);

    }
    protected void btn_driver_conveyance_Click(object sender, EventArgs e)
    {
        ////suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        ////suraj close
        if (ddl_client.SelectedValue == "ALL")
        {
            string client_name = d1.getsinglestring("SELECT group_concat(distinct client) FROM pay_billing_material_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag = 0  and conveyance_type = 100 and  type = 'Conveyance'");
            string state_name = d1.getsinglestring("SELECT group_concat(distinct state_name) FROM pay_billing_material_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag = 0  and conveyance_type = 100 and type = 'Conveyance'");
            if ((!state_name.Equals("")) || (!state_name.Equals(""))) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Client : " + client_name + " And State : " + state_name + " Not Final So You Can Not Generate Finance Copy For ALL Client !!!');", true); return; }
        }
        gv_con_driver_approve_load();
        string where = "";
        where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "'  ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.state = '" + ddl_billing_state.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' ";

        }
        string unit = d.getsinglestring("SELECT DISTINCT GROUP_CONCAT(DISTINCT pay_billing_material_history.unit_name) FROM pay_conveyance_amount_history INNER JOIN pay_client_master ON pay_conveyance_amount_history.client_code = pay_client_master.client_code INNER JOIN pay_unit_master ON pay_unit_master.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_unit_master.unit_code = pay_conveyance_amount_history.unit_code INNER JOIN pay_billing_material_history ON pay_billing_material_history.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_billing_material_history.unit_code = pay_conveyance_amount_history.unit_code AND pay_billing_material_history.month = pay_conveyance_amount_history.month AND pay_billing_material_history.year = pay_conveyance_amount_history.year WHERE " + where + "    AND (pay_conveyance_amount_history.driver_conv_flag = 1 || pay_conveyance_amount_history.driver_conv_flag = 3)   and  pay_conveyance_amount_history.conveyance_rate = 0 AND pay_billing_material_history.invoice_flag = 0 AND pay_conveyance_amount_history.con_driver_status IS NOT NULL ORDER BY pay_billing_material_history.unit_name");
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Driver Conveyance not Approved by Finance for Branch : " + unit + "');", true);
            return;

        }
        hidtab.Value = "2";
        material(6);
    }
    protected void btn_driver_Click(object sender, EventArgs e)
    {
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        hidtab.Value = "2";
        string where = "";
        string query = "", invoice = null, bill_date = null;
        int month = int.Parse(txt_month_year.Text.Substring(0, 2));
        string start_date_common = get_start_date();
        DateTimeFormatInfo mfi = new DateTimeFormatInfo();
        string month_name = mfi.GetMonthName(int.Parse(txt_month_year.Text.Substring(0, 2))).ToString();

        gv_con_driver_approve_load();
        where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "'  ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.state = '" + ddl_billing_state.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' ";

        }
        string unit = d.getsinglestring("SELECT DISTINCT GROUP_CONCAT(DISTINCT pay_billing_material_history.unit_name) FROM pay_conveyance_amount_history INNER JOIN pay_client_master ON pay_conveyance_amount_history.client_code = pay_client_master.client_code INNER JOIN pay_unit_master ON pay_unit_master.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_unit_master.unit_code = pay_conveyance_amount_history.unit_code INNER JOIN pay_billing_material_history ON pay_billing_material_history.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_billing_material_history.unit_code = pay_conveyance_amount_history.unit_code AND pay_billing_material_history.month = pay_conveyance_amount_history.month AND pay_billing_material_history.year = pay_conveyance_amount_history.year WHERE " + where + "     AND (pay_conveyance_amount_history.driver_conv_flag = 1 || pay_conveyance_amount_history.driver_conv_flag = 3)  and  pay_conveyance_amount_history.conveyance_rate = 0 AND pay_billing_material_history.invoice_flag = 0 AND pay_conveyance_amount_history.con_driver_status IS NOT NULL ORDER BY pay_billing_material_history.unit_name");
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Driver Conveyance not Approved by Finance for Branch : " + unit + "');", true);
            return;

        }
        //invoice and bill date 
        string invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, ddl_invoice_type.SelectedValue, ddl_designation.SelectedValue, txt_month_year.Text, 6, ddlregion.SelectedValue, billing_type.SelectedValue);

        if (invoice_bill_date.Equals(""))
        {
            invoice = "";
            bill_date = "";
        }
        else
        {
            var invoice_bill = invoice_bill_date.Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
            invoice = invoice_bill[0].ToString();
            bill_date = invoice_bill[1].ToString();
        }
        int month1 = int.Parse(txt_month_year.Text.Substring(0, 2)) - 1;
        int year = int.Parse(txt_month_year.Text.Substring(3));
        if (month1 == 0) { month1 = 12; year = year - 1; }
        string sql = "";
        string where1 = "", where_state = "";
        if (ddl_billing_state.SelectedValue.Equals("Maharashtra") && ddl_client.SelectedValue.Equals("BAGIC") && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020) { where_state = " and state='" + ddl_billing_state.SelectedValue + "' and billingwise_id = 5"; }
        //if (!ddl_billing_state.SelectedValue.Equals("ALL")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "'"; }
        if (d.getsinglestring("select billingwise_id from pay_client_billing_details where  client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
        {
            where_state = " and pay_billing_material_history.zone = '" + ddlregion.SelectedValue + "'";
            //material_where_state = " and pay_billing_unit_rate_history.zone = '" + ddlregion.SelectedValue + "'";
        }
        else
        { where_state = ""; }
        string daterange = "concat(upper(DATE_FORMAT(str_to_date('" + year + "-" + month1 + "-01','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(LAST_DAY('" + year + "-" + month1 + "-01'), '%d %b %Y'))) as start_end_date";
        if (start_date_common != "" && start_date_common != "1")
        {
            daterange = "concat(upper(DATE_FORMAT(str_to_date('" + year + "-" + ((month == 1) ? 12 : (int.Parse(txt_month_year.Text.Substring(0, 2)) - 1)) + "-" + start_date_common + "','%Y-%m-%d'), '%d %b %Y')),' TO ',upper(DATE_FORMAT(str_to_date('" + txt_month_year.Text.Substring(3) + "-" + txt_month_year.Text.Substring(0, 2) + "-" + (int.Parse(start_date_common) - 1) + "','%Y-%m-%d'), '%d %b %Y'))) as start_end_date";
        }
        where = "where pay_billing_material_history.comp_code='" + Session["comp_code"].ToString() + "' " + where_state + " and pay_billing_material_history.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_material_history.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_billing_material_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.year = '" + txt_month_year.Text.Substring(3) + "'  AND pay_conveyance_amount_history.conveyance = 'driver_conveyance' AND pay_billing_material_history.conveyance_type = '100' ";
        where1 = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = "where pay_billing_material_history.comp_code='" + Session["comp_code"].ToString() + "' " + where_state + "  and pay_billing_material_history.client_code= '" + ddl_client.SelectedValue + "'  and pay_billing_material_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.year = '" + txt_month_year.Text.Substring(3) + "'  AND pay_billing_material_history.conveyance_type = '100' AND pay_conveyance_amount_history.conveyance = 'driver_conveyance'";
            where1 = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = "where pay_billing_material_history.comp_code='" + Session["comp_code"].ToString() + "' " + where_state + "  and pay_billing_material_history.client_code= '" + ddl_client.SelectedValue + "' and pay_billing_material_history.state_name = '" + ddl_billing_state.SelectedValue + "'  and pay_billing_material_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_material_history.year = '" + txt_month_year.Text.Substring(3) + "'  AND pay_billing_material_history.conveyance_type = '100' AND pay_conveyance_amount_history.conveyance = 'driver_conveyance'";
            where1 = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'";
        }


        crystalReport.Load(Server.MapPath("~/driver_conveyance.rpt"));
        where = where + "  GROUP by state_name ";
        query = "SELECT pay_billing_material_history.comp_code, COMPANY_NAME, COMP_ADDRESS1 AS 'ADDRESS1', COMP_ADDRESS2 AS 'ADDRESS2', COMP_CITY AS 'CITY', COMP_STATE AS 'STATE', PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, STATE_NAME, UNIT_full_ADD1 AS 'UNIT_ADD1', invoice_shipping_address AS 'UNIT_ADD2', UNIT_CITY, UNIT_NAME, client AS 'other', unit_gst_no, grade_desc AS 'designation',  " + daterange + ",   concat('" + month_name + "',' ' ,'" + txt_month_year.Text.Substring(3) + "') AS 'month', housekeeiing_sac_code, SUM(((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) + (((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) * 5 / 100)) AS 'total', SUM(IF(LOCATE(COMP_STATE, state_name), ((((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) + (((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) * 5 / 100)) * 9 / 100), 0)) AS 'SGST', SUM(IF(LOCATE(COMP_STATE, state_name), ((((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) + (((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) * 5 / 100)) * 9 / 100), 0)) AS 'CGST', SUM(IF(LOCATE(COMP_STATE, state_name), 0, ((((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) + (((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + ( total_km)) * 5 / 100)) * 18 / 100))) AS 'IGST', pay_billing_material_history.unit_code FROM pay_billing_material_history INNER JOIN pay_conveyance_amount_history ON pay_conveyance_amount_history.emp_code = pay_billing_material_history.emp_code AND pay_conveyance_amount_history.comp_code = pay_billing_material_history.comp_code  AND pay_conveyance_amount_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' AND pay_conveyance_amount_history.conveyance = 'driver_conveyance' INNER JOIN pay_billing_master ON pay_billing_master.billing_unit_code = pay_billing_material_history.unit_code AND pay_billing_master.comp_code = pay_billing_material_history.comp_code AND pay_billing_master.designation = pay_billing_material_history.GRADE_CODE LEFT JOIN pay_client_billing_details ON pay_client_billing_details.comp_code = pay_billing_material_history.comp_code AND pay_client_billing_details.client_code = pay_billing_material_history.client_code AND pay_client_billing_details.STATE = pay_billing_material_history.state_name AND billing_name = 'Conveyance Billing'" + where;

        // rahul add Gst_to_be type  start

        string gst_to_be = d.getsinglestring("  select  DISTINCT (`Gst_to_be`) as 'Gst_to_be' from pay_unit_master where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'");
        // end


        //For Report Table
        if (invoice_fl_dr == 1)
        {
            sql = "SELECT pay_billing_material_history.comp_code, pay_billing_material_history.client_code, pay_billing_material_history.Client, pay_billing_material_history.STATE_NAME, billing_date, auto_invoice_no, unit_gst_no,IF(grade_code = 'SG', Security_sac_code, housekeeiing_sac_code) AS 'sac_code', COUNT(pay_billing_material_history.emp_code) AS 'emp_count', pay_billing_material_history.month, pay_billing_material_history.year, 'driver_conveyance' AS 'client_code', SUM(((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) + (((food_allowance_rate * food_allowance_days) + (outstation_allowance_rate * outstation_allowance_days) + (outstation_food_allowance_rate * outstation_food_allowance_days) + (night_halt_rate * night_halt_days) + (total_km)) * 5 / 100)) AS 'total', SUM(cgst) AS 'cgst', SUM(sgst) AS 'agst', SUM(igst) AS 'igst','" + gst_to_be + "' FROM pay_billing_material_history INNER JOIN pay_conveyance_amount_history ON pay_conveyance_amount_history.emp_code = pay_billing_material_history.emp_code AND pay_conveyance_amount_history.comp_code = pay_billing_material_history.comp_code  AND pay_conveyance_amount_history.conveyance = 'driver_conveyance' AND pay_conveyance_amount_history.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' INNER JOIN pay_billing_master ON pay_billing_master.billing_unit_code = pay_billing_material_history.unit_code AND pay_billing_master.comp_code = pay_billing_material_history.comp_code AND pay_billing_master.designation = pay_billing_material_history.GRADE_CODE " + where;
            d.operation("delete from pay_report_gst " + where1 + " and type = 'driver_conveyance'");
            d.operation("insert into pay_report_gst (comp_code,client_code,client_name,state_name,invoice_date, invoice_no, gst_no,sac_code,emp_count, month, year,type, Amount, cgst, sgst, igst,gst_to_be) " + sql);
        }
        ReportLoad(query, "Conveyance", invoice, bill_date);
    }
    protected void btn_final_driver_Click(object sender, EventArgs e)
    {
        hidtab.Value = "2";
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close
        gv_con_driver_approve_load();

        string where = "";
        where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.unit_code='" + ddl_unitcode.SelectedValue + "' and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "'  ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {
            where = " pay_conveyance_amount_history.comp_code='" + Session["comp_code"].ToString() + "' and pay_conveyance_amount_history.client_code= '" + ddl_client.SelectedValue + "' and pay_conveyance_amount_history.state = '" + ddl_billing_state.SelectedValue + "'  and pay_conveyance_amount_history.month='" + txt_month_year.Text.Substring(0, 2) + "' and pay_conveyance_amount_history.year = '" + txt_month_year.Text.Substring(3) + "' ";

        }
        string unit = d.getsinglestring("SELECT DISTINCT GROUP_CONCAT(DISTINCT pay_billing_material_history.unit_name) FROM pay_conveyance_amount_history INNER JOIN pay_client_master ON pay_conveyance_amount_history.client_code = pay_client_master.client_code INNER JOIN pay_unit_master ON pay_unit_master.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_unit_master.unit_code = pay_conveyance_amount_history.unit_code INNER JOIN pay_billing_material_history ON pay_billing_material_history.COMP_CODE = pay_conveyance_amount_history.COMP_CODE AND pay_billing_material_history.unit_code = pay_conveyance_amount_history.unit_code AND pay_billing_material_history.month = pay_conveyance_amount_history.month AND pay_billing_material_history.year = pay_conveyance_amount_history.year WHERE " + where + "    AND (pay_conveyance_amount_history.driver_conv_flag = 1 || pay_conveyance_amount_history.driver_conv_flag = 3)   and pay_conveyance_amount_history.conveyance_rate = 0 AND pay_billing_material_history.invoice_flag = 0 AND pay_conveyance_amount_history.con_driver_status IS NOT NULL ORDER BY pay_billing_material_history.unit_name");
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Driver Conveyance not Approved by Finance for Branch : " + unit + "');", true);
            return;

        }
        try
        {
            //  paypro_no(1);
            material_invoice_flag(6);
            display_ClientBilling();
            invoice_fl_dr = 1;
            btn_driver_Click(null, null);
            gv_con_driver_approve_load();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        { }
    }
    private void multisheet(string folder_path)
    {
        string body = string.Empty;
        using (StreamReader reader = new StreamReader(System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "multiple_excel.mht")))
        {
            body = reader.ReadToEnd();
        }
        StringWriter sw = generate_report(3, 1, billing_type.SelectedValue);
        if (sw != null && sw.ToString() != "")
        {
            body = body.Replace("{Attendance}", generate_report(3, 1, billing_type.SelectedValue).ToString());
            body = body.Replace("{Breakup}", generate_report(1, 1, billing_type.SelectedValue).ToString());
            body = body.Replace("{Finance}", generate_report(2, 1, billing_type.SelectedValue).ToString());
            body = body.Replace("{STATE_BREAKUP}", generate_report(5, 1, billing_type.SelectedValue).ToString());

            body = body.Replace("colspan=", "class=3Dxl65 colspan=3D");
            body = body.Replace("=ROUND", "=3DROUND");
            body = body.Replace("=SUM", "=3DSUM");
            //body = body.Replace("bgcolor=yellow", "=class=3Dxl66");
            //body = body.Replace("align=center", " class=3Dxl65 ");
            body = body.Replace("border =", "border=3D");
            body = body.Replace("border=", "border=3D");
            body = body.Replace("<th>", "<th class=3Dxl66>");

            if (ViewState["ALL_STATE"].ToString().Equals("1"))
            {
                System.IO.File.WriteAllText(folder_path + "\\" + ddl_billing_state.SelectedValue + "_" + txt_month_year.Text.Replace("/", "_") + "_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls", body);
            }
            else
            {
                Response.Clear();
                Response.Buffer = true;

                Response.AddHeader("content-disposition", "attachment;filename= " + ddl_billing_state.SelectedValue + "_" + txt_month_year.Text.Replace("/", "_") + "_" + ddl_client.SelectedItem.Text.Replace(" ", "_").Replace(",", "_").Replace(".", "_") + ".xls");
                Response.Charset = "";
                Response.ContentType = "application/vnd.ms-excel";
                //  string style = @"<style> .textmode { } </style>";
                //Response.Write(style);
                Response.Output.Write(body.ToString());
                Response.Flush();
                Response.End();
            }
            ViewState["ALL_STATE"] = 0;
        }
    }

    protected void btn_client_sheet_Click(object sender, EventArgs e)
    {
        string n_state_name = chk_final_invoice();
        if (!n_state_name.Equals(""))
        {
            ClientScript.RegisterStartupScript(GetType(), "alert", "alert('Please Finalize " + n_state_name + " State.');", true);
            return;
        }


        if (ddl_billing_state.SelectedValue.Equals("ALL"))
        {

            string clientdir = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "final_invoice\\" + ddl_client.SelectedValue.Replace(" ", "_") + "_xls");
            string zip_filename = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "final_invoice\\" + ddl_billing_state.SelectedValue + "_" + txt_month_year.Text.Replace("/", "_") + "_" + ddl_client.SelectedItem.ToString().Replace(" ", "_") + "_xls" + ".zip");
            if (System.IO.File.Exists(zip_filename))
            {
                File.Delete(zip_filename);
            }

            string value = ViewState["ALL_STATE"].ToString();

            //check if dir exists
            bool exists = System.IO.Directory.Exists(clientdir);

            if (exists)
            {
                //delete files from dir
                System.IO.DirectoryInfo di = new DirectoryInfo(clientdir);

                foreach (FileInfo file in di.GetFiles())
                {
                    file.Delete();
                }
            }
            else
            {
                System.IO.Directory.CreateDirectory(clientdir);
            }

            MySqlCommand cmd = new MySqlCommand("select distinct(state_name) from pay_billing_unit_rate_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and invoice_flag!=0", d.con1);
            d.con1.Open();
            MySqlDataReader dr = cmd.ExecuteReader();
            if (!dr.HasRows)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('No Invoices for this Month !!!');", true);
                return;
            }
            while (dr.Read())
            {
                ddl_billing_state.SelectedValue = dr.GetValue(0).ToString();
                ViewState["ALL_STATE"] = "1";
                multisheet(clientdir);
            }
            //for all state file
            ddl_billing_state.SelectedValue = "ALL";
            ViewState["ALL_STATE"] = "1";
            multisheet(clientdir);
            //create zip file
            ZipFile.CreateFromDirectory(clientdir, zip_filename);
            System.IO.DirectoryInfo myDirInfo = new DirectoryInfo(clientdir);

            foreach (FileInfo file in myDirInfo.GetFiles())
            {
                file.Delete();
            }
            if (!value.Equals("2"))
            {
                Response.Clear();
                Response.ContentType = "Application/pdf";
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + ddl_billing_state.SelectedValue + "_" + txt_month_year.Text.Replace("/", "_") + "_" + ddl_client.SelectedItem.ToString().Replace(" ", "_") + ".zip");
                Response.TransmitFile(zip_filename);
                Response.End();
            }
            else
            {
                ViewState["ALL_STATE"] = zip_filename;
            }
        }
        else
        {
            multisheet("");
        }
        //create_pdf();
    }


    private void zip_files()
    {
        MySqlCommand cmd = new MySqlCommand("select distinct(state_name) from pay_billing_unit_rate_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and invoice_flag=1", d.con1);
        d.con1.Open();
        string clientdir = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "final_invoice\\" + ddl_client.SelectedValue.Replace(" ", "_"));
        string zip_filename = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "final_invoice\\" + ddl_billing_state.SelectedValue + "_" + txt_month_year.Text.Replace("/", "_") + "_" + ddl_client.SelectedItem.ToString().Replace(" ", "_") + ".zip");
        if (System.IO.File.Exists(zip_filename))
        {
            File.Delete(zip_filename);
        }

        try
        {
            MySqlDataReader dr = cmd.ExecuteReader();
            if (!dr.HasRows)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('No Invoices for this Month !!!');", true);
                return;
            }

            //check if dir exists
            bool exists = System.IO.Directory.Exists(clientdir);

            if (exists)
            {
                //delete files from dir
                System.IO.DirectoryInfo di = new DirectoryInfo(clientdir);

                foreach (FileInfo file in di.GetFiles())
                {
                    file.Delete();
                }
            }
            else
            {
                System.IO.Directory.CreateDirectory(clientdir);
            }

            exists = System.IO.Directory.Exists(zip_filename);
            if (exists)
            {
                File.Delete(zip_filename);
            }

            while (dr.Read())
            {
                ddl_billing_state.SelectedValue = dr.GetValue(0).ToString();
                ViewState["ALL_STATE"] = "1";
                btn_invoice_rpt_Click(null, null);
            }
            crystalReport.Close();
            crystalReport.Clone();
            crystalReport.Dispose();
            GC.Collect();
            GC.WaitForPendingFinalizers();
            ddl_billing_state.SelectedValue = "ALL";
            ZipFile.CreateFromDirectory(clientdir, zip_filename);
            Response.Clear();
            Response.ContentType = "Application/pdf";
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + ddl_billing_state.SelectedValue + "_" + txt_month_year.Text.Replace("/", "_") + "_" + ddl_client.SelectedItem.ToString().Replace(" ", "_") + ".zip");
            Response.TransmitFile(zip_filename);
            Response.End();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            d.con1.Close();
            //delete files and folder
            System.IO.DirectoryInfo myDirInfo = new DirectoryInfo(clientdir);

            foreach (FileInfo file in myDirInfo.GetFiles())
            {
                file.Delete();
            }
        }
    }

    protected void zip_download_Click(object sender, EventArgs e)
    {
        string clientdir = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "final_invoice\\" + ddl_client.SelectedValue.Replace(" ", "_") + "_attendance");
        try
        {
            System.Data.DataTable dt = new System.Data.DataTable();
            dt = d.approve_attendance_download(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 2, ddlregion.SelectedValue);

            if (dt.Rows.Count > 0)
            {
                string zip_filename = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "final_invoice\\" + ddl_client.SelectedItem.ToString().Replace(" ", "_") + "_ATTENDANCE.zip");
                if (System.IO.File.Exists(zip_filename))
                {
                    File.Delete(zip_filename);
                }

                //check if dir exists
                bool exists = System.IO.Directory.Exists(clientdir);

                if (exists)
                {
                    //delete files from dir
                    System.IO.DirectoryInfo di = new DirectoryInfo(clientdir);

                    foreach (FileInfo file in di.GetFiles())
                    {
                        file.Delete();
                    }
                }
                else
                {
                    System.IO.Directory.CreateDirectory(clientdir);
                }

                exists = System.IO.Directory.Exists(zip_filename);
                if (exists)
                {
                    File.Delete(zip_filename);
                }


                foreach (DataRow row in dt.Rows)
                {
                    string file = row.Field<string>("Attendance_file");
                    string new_file = (row.Field<string>("state_name")).ToUpper() + "_" + (row.Field<string>("branch_name")).ToUpper() + Path.GetExtension(file);
                    File.Copy(Server.MapPath("~\\approved_attendance_images\\" + file), clientdir + "\\" + new_file, true);
                }

                ZipFile.CreateFromDirectory(clientdir, zip_filename);
                Response.Clear();
                Response.ContentType = "Application/pdf";
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + ddl_client.SelectedItem.ToString().Replace(" ", "_") + "_ATTENDANCE.zip");
                Response.TransmitFile(zip_filename);
                Response.End();
            }

        }
        catch (Exception ex) { throw ex; }
        finally
        {
            System.IO.DirectoryInfo myDirInfo = new DirectoryInfo(clientdir);

            foreach (FileInfo file in myDirInfo.GetFiles())
            {
                file.Delete();
            }
        }
    }

    protected void btn_upload_pf_Click(object sender, EventArgs e)
    {
        string month = "" + txt_month_year.Text.Substring(0, 2) + "";
        string year = "" + txt_month_year.Text.Substring(3) + "";

        upload_files_inv(up_pf_challan, "PF_CHALLAN", 1, "", month, year);

    }

    protected void btn_ecr_upload_Click(object sender, EventArgs e)
    {
        string month = "" + txt_month_year.Text.Substring(0, 2) + "";
        string year = "" + txt_month_year.Text.Substring(3) + "";

        upload_files_inv(up_ecr_file, "ECR_FILE", 1, "", month, year);
    }

    protected void grd_esic_upload_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        for (int i = 0; i < e.Row.Cells.Count; i++)
        {
            if (e.Row.Cells[i].Text == "&nbsp;")
            {
                e.Row.Cells[i].Text = "";
            }
        }
        try
        {

            if (e.Row.Cells[3].Text == "")
            {
                FileUpload fileUpload = (FileUpload)e.Row.FindControl("fu_esic");
                fileUpload.Visible = true;
                Button btn_upload = (Button)e.Row.FindControl("saveBtn");
                btn_upload.Visible = true;
                LinkButton btn_dwnload = (LinkButton)e.Row.FindControl("lnkDownload");
                btn_dwnload.Visible = false;
                Button btn_delete = (Button)e.Row.FindControl("btn_delete");
                btn_delete.Visible = false;
                CheckBox btn_select = (CheckBox)e.Row.FindControl("chk_state");
                btn_select.Visible = false;

            }
            else
            {
                FileUpload fileUpload = (FileUpload)e.Row.FindControl("fu_esic");
                fileUpload.Visible = false;
                Button btn_upload = (Button)e.Row.FindControl("saveBtn");
                btn_upload.Visible = false;
                LinkButton btn_dwnload = (LinkButton)e.Row.FindControl("lnkDownload");
                btn_dwnload.Visible = true;
                Button btn_delete = (Button)e.Row.FindControl("btn_delete");
                btn_delete.Visible = true;
                CheckBox btn_select = (CheckBox)e.Row.FindControl("chk_state");
                btn_select.Visible = true;
            }
        }
        catch { } //vinod - please dont apply catch
        e.Row.Cells[3].Visible = false;

    }

    private void load_billing_state_gridview()
    {
        //All State bill checklist
        chk_xls_bill_all.Visible = false;
        btn_state_download.Visible = false;
        lbl_all_state.Visible = true;
        if (chk_final_invoice().Equals(""))
        {
            chk_xls_bill_all.Visible = true;
            btn_state_download.Visible = true;
            lbl_all_state.Visible = false;
        }

        //enable disable PF CHallan and ECR file
        try
        {
            chk_pf_challan.Visible = false;
            up_pf_challan.Visible = true;
            btn_upload_pf.Visible = true;
            btn_pf_challan_do.Visible = false;
            btn_pf_challan_de.Visible = false;
            chk_ecr_file.Visible = false;
            up_ecr_file.Visible = true;
            btn_ecr_upload.Visible = true;
            btn_ecr_file_do.Visible = false;
            btn_ecr_file_de.Visible = false;

            d.con.Open();
            MySqlCommand cmd1 = new MySqlCommand("select type from bill_invoice_details where type in ('PF_CHALLAN','ECR_FILE') and month=" + txt_month_year.Text.Substring(0, 2) + " and year=" + txt_month_year.Text.Substring(3) + " and comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_Code = '" + ddl_client.SelectedValue + "'", d.con);
            MySqlDataReader dr2 = cmd1.ExecuteReader();

            while (dr2.Read())
            {
                if (dr2.GetValue(0).ToString().Equals("PF_CHALLAN"))
                {
                    chk_pf_challan.Visible = true;
                    up_pf_challan.Visible = false;
                    btn_upload_pf.Visible = false;
                    btn_pf_challan_do.Visible = true;
                    btn_pf_challan_de.Visible = true;
                }
                else if (dr2.GetValue(0).ToString().Equals("ECR_FILE"))
                {
                    chk_ecr_file.Visible = true;
                    up_ecr_file.Visible = false;
                    btn_ecr_upload.Visible = false;
                    btn_ecr_file_do.Visible = true;
                    btn_ecr_file_de.Visible = true;
                }

            }
            dr2.Dispose();
            d.con.Close();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            d.con.Close();
        }


        //ESIC
        d.con.Open();
        MySqlDataAdapter cmd_item = new MySqlDataAdapter("select distinct pay_unit_master.state_name, concat('~/approved_bills/',bill_invoice_details.file_name) as Value,bill_invoice_details.type from pay_unit_master left outer join bill_invoice_details on pay_unit_master.comp_code = bill_invoice_details.comp_code and pay_unit_master.state_name = bill_invoice_details.state_name and month=" + txt_month_year.Text.Substring(0, 2) + " and year=" + txt_month_year.Text.Substring(3) + " and type='ESIC' where pay_unit_master.comp_code = '" + Session["COMP_CODE"].ToString() + "' and pay_unit_master.client_Code = '" + ddl_client.SelectedValue + "' AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y'))", d.con);
        try
        {
            System.Data.DataTable dt_item = new System.Data.DataTable();
            cmd_item.Fill(dt_item);
            if (dt_item.Rows.Count > 0)
            {
                grd_esic_upload.DataSource = dt_item;
                grd_esic_upload.DataBind();
            }
            dt_item.Dispose();

            d.con.Close();

        }
        catch (Exception ex) { throw ex; }
        finally
        {
            d.con.Close();
        }

        //Bill Upload
        d.con.Open();
        cmd_item = new MySqlDataAdapter("select distinct pay_unit_master.state_name, concat('~/approved_bills/',bill_invoice_details.file_name) as Value,bill_invoice_details.type from pay_unit_master left outer join bill_invoice_details on pay_unit_master.comp_code = bill_invoice_details.comp_code and pay_unit_master.state_name = bill_invoice_details.state_name and pay_unit_master.client_code = bill_invoice_details.client_code and month=" + txt_month_year.Text.Substring(0, 2) + " and year=" + txt_month_year.Text.Substring(3) + " and type='SCANNED_BILL_UPLOAD' where pay_unit_master.comp_code = '" + Session["COMP_CODE"].ToString() + "' and pay_unit_master.client_Code = '" + ddl_client.SelectedValue + "' AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y'))", d.con);
        try
        {
            System.Data.DataTable dt_item = new System.Data.DataTable();
            cmd_item.Fill(dt_item);
            if (dt_item.Rows.Count > 0)
            {
                grd_bill_upload.DataSource = dt_item;
                grd_bill_upload.DataBind();
            }
            dt_item.Dispose();

            d.con.Close();

        }
        catch (Exception ex) { throw ex; }
        finally
        {
            d.con.Close();
        }
    }
    protected void grd_bill_upload_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        for (int i = 0; i < e.Row.Cells.Count; i++)
        {
            if (e.Row.Cells[i].Text == "&nbsp;")
            {
                e.Row.Cells[i].Text = "";
            }
        }
        try
        {

            if (e.Row.Cells[3].Text == "")
            {
                FileUpload fileUpload = (FileUpload)e.Row.FindControl("fu_scan_bill");
                fileUpload.Visible = true;
                Button btn_upload = (Button)e.Row.FindControl("saveBtn");
                btn_upload.Visible = true;
                LinkButton btn_dwnload = (LinkButton)e.Row.FindControl("lnkDownload");
                btn_dwnload.Visible = false;
                Button btn_delete = (Button)e.Row.FindControl("btn_delete");
                btn_delete.Visible = false;
                CheckBox btn_select = (CheckBox)e.Row.FindControl("chk_bill");
                btn_select.Visible = false;
            }
            else
            {
                FileUpload fileUpload = (FileUpload)e.Row.FindControl("fu_scan_bill");
                fileUpload.Visible = false;
                Button btn_upload = (Button)e.Row.FindControl("saveBtn");
                btn_upload.Visible = false;
                LinkButton btn_dwnload = (LinkButton)e.Row.FindControl("lnkDownload");
                btn_dwnload.Visible = true;
                Button btn_delete = (Button)e.Row.FindControl("btn_delete");
                btn_delete.Visible = true;
                CheckBox btn_select = (CheckBox)e.Row.FindControl("chk_bill");
                btn_select.Visible = true;
            }
        }
        catch { } //vinod - please dont apply catch
        e.Row.Cells[3].Visible = false;

    }
    protected void btn_state_download_Click(object sender, EventArgs e)
    {
        //ViewState["ALL_STATE"] = "2";
        btn_client_sheet_Click(null, null);
    }



    private void upload_files_inv(FileUpload file1, string type, int counter, string state_name, string month, string year)
    {
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        hidtab.Value = "7";
        if (!file1.HasFile)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alertmessage", "javascript:alert('Please select file first !!!')", true);
        }
        if (file1.HasFile)
        {
            string fileExt = System.IO.Path.GetExtension(file1.FileName);
            if (fileExt.ToUpper() == ".PDF" || fileExt.ToUpper() == ".ZIP")
            {
                string fileName = Path.GetFileName(file1.PostedFile.FileName);
                file1.PostedFile.SaveAs(Server.MapPath("~/approved_bills/") + fileName);

                string new_file_name = type + "_" + (state_name == "" ? "" : "" + state_name + "_") + ddl_client.SelectedValue + "_" + (month == "" ? "" : "" + month) + "_" + (year == "" ? "" : "" + year) + fileExt;
                File.Copy(Server.MapPath("~/approved_bills/") + fileName, Server.MapPath("~/approved_bills/") + new_file_name, true);
                File.Delete(Server.MapPath("~/approved_bills/") + fileName);

                d.operation("insert into bill_invoice_details (comp_code, client_code, unit_code, state_name, type, month, year, file_name, uploaded_by,uploaded_datetime) values ('" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + (ddl_unitcode.SelectedValue == "ALL" ? null : ddl_unitcode.SelectedValue) + "','" + (counter == 2 ? state_name : (ddl_billing_state.SelectedValue == "ALL" ? null : ddl_billing_state.SelectedValue)) + "','" + type + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + new_file_name + "','" + Session["LOGIN_ID"].ToString() + "',now())");
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alertmessage", "javascript:alert('File uploaded Succsefully !!!')", true);
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alertmessage", "javascript:alert('Please select only ZIP and PDF Files !!!')", true);
            }
            load_billing_state_gridview();
        }
        else
        {
            ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "alertMessage", "alert('Please Select Document !!')", true);
        }
    }

    private string chk_final_invoice()
    {
        return d.getsinglestring("select distinct(state_name) from pay_unit_master where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) and state_name not in (select distinct(state_name) from pay_billing_unit_rate_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and invoice_flag!=0)");
    }

    //check if all invoices uploaded for emailing
    private string chk_invoices_uploaded()
    {
        return d.getsinglestring("select distinct(state_name) from pay_unit_master where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' AND (branch_close_date is null  ||branch_close_date  >= STR_TO_DATE('01/" + txt_month_year.Text + "', '%d/%m/%Y')) and state_name not in (select distinct(state_name) from bill_invoice_details where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and type='SCANNED_BILL_UPLOAD')");
    }

    protected void grd_esic_upload_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName.Equals("save"))
        {
            //GridView Row Index
            int rowIndex = int.Parse(e.CommandArgument.ToString().Trim());

            // ID of the Current Row
            String state = grd_esic_upload.DataKeys[rowIndex].Values["state_name"].ToString().Trim();

            string month = "" + txt_month_year.Text.Substring(0, 2) + "";
            string year = "" + txt_month_year.Text.Substring(3) + "";

            //File Upload Instance of the Current Row
            FileUpload fileUpload = (FileUpload)grd_esic_upload.Rows[rowIndex].FindControl("fu_esic");
            upload_files_inv(fileUpload, "ESIC", 2, state, month, year);
        }
        else if (e.CommandName.Equals("delete_record"))
        {
            //GridView Row Index
            int rowIndex = int.Parse(e.CommandArgument.ToString().Trim());

            // ID of the Current Row
            String state = grd_esic_upload.DataKeys[rowIndex].Values["state_name"].ToString().Trim();

            //Delete File
            string temp = d.getsinglestring("SELECT file_name FROM bill_invoice_details WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' and type = 'ESIC' and state_name='" + state + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");
            if (temp != "")
            {
                File.Delete(Server.MapPath("~/approved_bills/") + temp);
            }
            //Delete record from Database
            d.operation("delete FROM bill_invoice_details WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' and type = 'ESIC' and state_name='" + state + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");
            ClientScript.RegisterStartupScript(GetType(), "alert", "alert('File Deleted Successfully');", true);
        }
        load_billing_state_gridview();
    }
    protected void grd_bill_upload_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName.Equals("save"))
        {
            //GridView Row Index
            int rowIndex = int.Parse(e.CommandArgument.ToString().Trim());

            // ID of the Current Row
            String state = grd_bill_upload.DataKeys[rowIndex].Values["state_name"].ToString().Trim();

            string month = "" + txt_month_year.Text.Substring(0, 2) + "";
            string year = "" + txt_month_year.Text.Substring(3) + "";
            //File Upload Instance of the Current Row
            FileUpload fileUpload = (FileUpload)grd_bill_upload.Rows[rowIndex].FindControl("fu_scan_bill");
            upload_files_inv(fileUpload, "SCANNED_BILL_UPLOAD", 2, state, month, year);
        }
        else if (e.CommandName.Equals("delete_record"))
        {
            //GridView Row Index
            int rowIndex = int.Parse(e.CommandArgument.ToString().Trim());

            // ID of the Current Row
            String state = grd_bill_upload.DataKeys[rowIndex].Values["state_name"].ToString().Trim();

            //Delete File
            string temp = d.getsinglestring("SELECT file_name FROM bill_invoice_details WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and type = 'SCANNED_BILL_UPLOAD' and state_name='" + state + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");
            if (temp != "")
            {
                File.Delete(Server.MapPath("~/approved_bills/") + temp);
            }
            //Delete record from Database
            d.operation("delete FROM bill_invoice_details WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and type = 'SCANNED_BILL_UPLOAD' and state_name='" + state + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");
            ClientScript.RegisterStartupScript(GetType(), "alert", "alert('File Deleted Successfully');", true);
        }
        load_billing_state_gridview();
    }

    private List<string> add_email_files(List<string> list4, string type, string state)
    {
        d.con.Open();
        try
        {

            string where = "";
            if (!state.Equals(""))
            {
                where = " and state_name = '" + state + "'";
            }

            MySqlCommand cmd1 = new MySqlCommand("select file_name from bill_invoice_details where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_Code = '" + ddl_client.SelectedValue + "' and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and type='" + type + "' " + where + "", d.con);
            MySqlDataReader dr2 = cmd1.ExecuteReader();

            while (dr2.Read())
            {
                list4.Add(System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/.")) + "\\approved_bills\\" + dr2.GetValue(0).ToString());
            }
            dr2.Dispose();
            d.con.Close();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            d.con.Close();
        }
        return list4;
    }
    protected void btn_show_Click(object sender, EventArgs e)
    {
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        hidtab.Value = "7";
        load_billing_state_gridview();
        pnl_show_btn.Visible = false;
        pnl_send_email.Visible = true;
    }
    protected void btn_pf_challan_do_Click(object sender, EventArgs e)
    {
        string filePath = d.getsinglestring("select file_name from bill_invoice_details where type = 'PF_CHALLAN' and month=" + txt_month_year.Text.Substring(0, 2) + " and year=" + txt_month_year.Text.Substring(3) + " and comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_Code = '" + ddl_client.SelectedValue + "'");

        if (File.Exists(System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/.")) + "\\approved_bills\\" + filePath))
        {
            string path2 = Server.MapPath("~\\approved_bills\\" + filePath);
            //string unitName = unit_name + "-Attendance" + result;
            //Response.Clear();
            //Response.ContentType = "Application/pdf/jpg/jpeg/png/zip";
            //Response.AppendHeader("Content-Disposition", "attachment; filename=" + unitName);
            //Response.TransmitFile("~\\material_images\\" + filename);
            //Response.WriteFile(path2);
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + Path.GetFileName(path2));
            Response.WriteFile(path2);
            Response.End();
        }
        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('File Not Available !!!')", true);
        }
    }
    protected void btn_pf_challan_de_Click(object sender, EventArgs e)
    {
        string temp = d.getsinglestring("select file_name from bill_invoice_details where type = 'PF_CHALLAN' and month=" + txt_month_year.Text.Substring(0, 2) + " and year=" + txt_month_year.Text.Substring(3) + " and comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_Code = '" + ddl_client.SelectedValue + "'");
        if (temp != "")
        {
            File.Delete(Server.MapPath("~/approved_bills/") + temp);
        }
        //Delete record from Database
        d.operation("delete FROM bill_invoice_details where type = 'PF_CHALLAN' and month=" + txt_month_year.Text.Substring(0, 2) + " and year=" + txt_month_year.Text.Substring(3) + " and comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_Code = '" + ddl_client.SelectedValue + "'");
        ClientScript.RegisterStartupScript(GetType(), "alert", "alert('File Deleted Successfully');", true);
        load_billing_state_gridview();

    }
    protected void btn_ecr_file_do_Click(object sender, EventArgs e)
    {
        string filePath = d.getsinglestring("select file_name from bill_invoice_details where type = 'ECR_FILE' and month=" + txt_month_year.Text.Substring(0, 2) + " and year=" + txt_month_year.Text.Substring(3) + " and comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_Code = '" + ddl_client.SelectedValue + "'");

        if (File.Exists(System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/.")) + "\\approved_bills\\" + filePath))
        {
            string path2 = Server.MapPath("~\\approved_bills\\" + filePath);
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + Path.GetFileName(path2));
            Response.WriteFile(path2);
            Response.End();
        }
        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('File Not Available !!!')", true);
        }

    }
    protected void btn_ecr_file_de_Click(object sender, EventArgs e)
    {
        string temp = d.getsinglestring("select file_name from bill_invoice_details where type = 'ECR_FILE' and month=" + txt_month_year.Text.Substring(0, 2) + " and year=" + txt_month_year.Text.Substring(3) + " and comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_Code = '" + ddl_client.SelectedValue + "'");
        if (temp != "")
        {
            File.Delete(Server.MapPath("~/approved_bills/") + temp);
        }
        //Delete record from Database
        d.operation("delete FROM bill_invoice_details where type = 'ECR_FILE' and month=" + txt_month_year.Text.Substring(0, 2) + " and year=" + txt_month_year.Text.Substring(3) + " and comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_Code = '" + ddl_client.SelectedValue + "'");
        ClientScript.RegisterStartupScript(GetType(), "alert", "alert('File Deleted Successfully');", true);
        load_billing_state_gridview();

    }
    protected void gv_approve_material_RowDataBound(object sender, GridViewRowEventArgs e)
    {

        Color color = System.Drawing.ColorTranslator.FromHtml("#90EE90");
        Color color1 = System.Drawing.ColorTranslator.FromHtml("#FF4C4C");
        Color color2 = System.Drawing.ColorTranslator.FromHtml("#FACC2E");

        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (ddl_billing_state.SelectedValue != "ALL")
            {
                LinkButton lb1 = e.Row.FindControl("lnk_reject_material") as LinkButton;
                lb1.Visible = true;
                if (ddl_unitcode.SelectedValue != "ALL")
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code = '" + ddl_unitcode.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        LinkButton lb4 = e.Row.FindControl("lnk_reject_material") as LinkButton;
                        lb4.Visible = false;
                    }


                }
                else
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code in (SELECT unit_code FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_unit_master.branch_status = 0 ORDER BY 1)  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        LinkButton lb4 = e.Row.FindControl("lnk_reject_material") as LinkButton;
                        lb4.Visible = false;
                    }

                }

            }
            for (int i = 0; i < e.Row.Cells.Count; i++)
            {
                if (e.Row.Cells[i].Text == "&nbsp;")
                {
                    e.Row.Cells[i].Text = "";
                }
                if (e.Row.Cells[5].Text.ToUpper().Equals("APPROVE BY FINANCE"))
                {
                    e.Row.BackColor = color;
                }
                else if (e.Row.Cells[5].Text.ToUpper().Equals("REJECT BY FINANCE"))
                {
                    e.Row.BackColor = color1;
                }
            }
        }
        e.Row.Cells[6].Visible = false;
        e.Row.Cells[8].Visible = false;
    }
    protected void gv_material_load()
    {

        try
        {
            System.Data.DataTable dt = new System.Data.DataTable();


            gv_approve_material.DataSource = null;
            gv_approve_material.DataBind();

            dt = d.approve_material_download(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3));

            if (dt.Rows.Count > 0)
            {
                gv_approve_material.DataSource = dt;
                gv_approve_material.DataBind();
                gv_material_panel.Visible = true;

            }

            if (ddl_billing_state.SelectedValue != "ALL")
            {
                if (ddl_unitcode.SelectedValue != "ALL")
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code = '" + ddl_unitcode.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        btn_material_approve.Visible = false;
                    }
                    else
                    {
                        btn_material_approve.Visible = true;
                    }
                }
                else
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code in(SELECT unit_code FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_unit_master.branch_status = 0 ORDER BY 1)  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        btn_material_approve.Visible = false;

                    }
                    else
                    {
                        btn_material_approve.Visible = true;
                    }
                }

            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

        }

    }
    protected void lnkDownloadMaterial_Command(object sender, CommandEventArgs e)
    {

        string[] commandArgs = e.CommandArgument.ToString().Split(new char[] { ',' });
        string filename = commandArgs[0];
        string unit_name = commandArgs[1];

        if (filename != "")
        {
            downloadfileM(filename, unit_name);
        }

        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attachment File Cannot Be Uploaded !!!')", true);
        }
    }
    protected void downloadfileM(string filename, string unit_name)
    {

        var result = filename.Substring(filename.Length - 4);
        if (result.Contains("jpeg"))
        {
            result = ".jpeg";
        }
        try
        {


            string path2 = Server.MapPath("~\\material_images\\" + filename);
            string unitName = unit_name + "-Attendance" + result;
            Response.Clear();
            Response.ContentType = "Application/pdf/jpg/jpeg/png/zip";
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + unitName);
            Response.TransmitFile("~\\material_images\\" + filename);
            Response.WriteFile(path2);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
            Response.End();
            Response.Close();
        }
        catch (Exception ex) { }
    }

    protected void lnk_approve_CommandMaterial(object sender, CommandEventArgs e)
    {
        try
        {
            int result = 0;
            string unit_code = e.CommandArgument.ToString();
            string emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_billing_material_history where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");
            emp_code = emp_code.Replace(",", "','");

            result = d.operation("update pay_material_details set material_flag = '2', material_status = 'Approve By Finance' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  ");

            if (result > 0)
            {

                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Material Approved Successfully !!');", true);
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        gv_material_load();

    }
    protected void btn_material_approve_Click(object sender, EventArgs e)
    {
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        int result = 0;
        string emp_code = null;
        string unit_code = null;
        foreach (GridViewRow gvrow in gv_approve_material.Rows)
        {
            unit_code = null;
            emp_code = null;
            unit_code = (string)gv_approve_material.DataKeys[gvrow.RowIndex].Value;
            var checkbox = gvrow.FindControl("chk_client") as System.Web.UI.WebControls.CheckBox;
            if (checkbox.Checked == true)
            {

                try
                {
                    emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_billing_material_history where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");
                    emp_code = emp_code.Replace(",", "','");
                    if (!emp_code.Equals(""))
                    {
                        result = d.operation("update pay_material_details set material_flag = '2', material_status = 'Approve By Finance' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  ");
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {
                }
            }

        }
        if (result > 0)
        {
            gv_material_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert(' Material Approved Successfully !!');", true);
        }

        gv_material_load();
    }
    protected void lnk_reject_material_Command(object sender, CommandEventArgs e)
    {
        string unit_code = e.CommandArgument.ToString();
        int result = 0;
        string emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_attendance_muster where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' ");
        emp_code = emp_code.Replace(",", "','");
        if (!emp_code.Equals(""))
        {
            GridViewRow row = (GridViewRow)(((LinkButton)sender)).NamingContainer;
            string reject_reason = (row.FindControl("material_reject_reason") as System.Web.UI.WebControls.TextBox).Text;

            if (reject_reason != "")
            {
                d.operation("update pay_material_details set material_flag = '3' , rejected_reason = '" + reject_reason + "', material_status = 'Reject By Finance' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "' ");

                result = 1;

            }
        }


        if (result > 0)
        {
            //   attendance_status();
            gv_material_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Material Rejected Successfully !!');", true);
        }
        else
        {

            // attendance_status();
            gv_material_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Enter Reason  !!');", true);
        }
        Notification_panel.Visible = false;
    }


    //Employee Conveyance approve
    protected void gv_con_emp_approve_load()
    {

        try
        {
            System.Data.DataTable dt = new System.Data.DataTable();


            gv_con_emp_approve.DataSource = null;
            gv_con_emp_approve.DataBind();

            dt = d.approve_gv_con_emp_download(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), ddlregion.SelectedValue);

            if (dt.Rows.Count > 0)
            {
                gv_con_emp_approve.DataSource = dt;
                gv_con_emp_approve.DataBind();
                gv_con_emp_panel.Visible = true;

            }

            if (ddl_billing_state.SelectedValue != "ALL")
            {
                if (ddl_unitcode.SelectedValue != "ALL")
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code = '" + ddl_unitcode.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "' and conveyance_type != 100  and type='conveyance'");
                    if (i_fah != "0")
                    {
                        btn_con_emp_approve.Visible = false;
                    }
                    else
                    {
                        btn_con_emp_approve.Visible = true;
                    }
                }
                else
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code in(SELECT unit_code FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_unit_master.branch_status = 0 ORDER BY 1)  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "' and conveyance_type != 100  and type='conveyance'");
                    if (i_fah != "0")
                    {
                        btn_con_emp_approve.Visible = false;

                    }
                    else
                    {
                        btn_con_emp_approve.Visible = true;
                    }
                }

            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

        }

    }
    protected void gv_con_emp_approve_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        Color color = System.Drawing.ColorTranslator.FromHtml("#90EE90");
        Color color1 = System.Drawing.ColorTranslator.FromHtml("#FF4C4C");
        Color color2 = System.Drawing.ColorTranslator.FromHtml("#FACC2E");

        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (ddl_billing_state.SelectedValue != "ALL")
            {
                LinkButton lb1 = e.Row.FindControl("lnk_reject_Con_Emp") as LinkButton;
                lb1.Visible = true;
                if (ddl_unitcode.SelectedValue != "ALL")
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code = '" + ddl_unitcode.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "' and conveyance_type != 100 and type='conveyance'");
                    if (i_fah != "0")
                    {
                        LinkButton lb4 = e.Row.FindControl("lnk_reject_Con_Emp") as LinkButton;
                        lb4.Visible = false;
                    }


                }
                else
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code in (SELECT unit_code FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND state_name = '" + ddl_billing_state.SelectedValue + "'  AND pay_unit_master.branch_status = 0 ORDER BY 1)  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "' and conveyance_type != 100  and type='conveyance'");
                    if (i_fah != "0")
                    {
                        LinkButton lb4 = e.Row.FindControl("lnk_reject_Con_Emp") as LinkButton;
                        lb4.Visible = false;
                    }

                }

            }
            for (int i = 0; i < e.Row.Cells.Count; i++)
            {
                if (e.Row.Cells[i].Text == "&nbsp;")
                {
                    e.Row.Cells[i].Text = "";
                }
                if (e.Row.Cells[5].Text.ToUpper().Equals("APPROVE BY FINANCE"))
                {
                    e.Row.BackColor = color;
                }
                else if (e.Row.Cells[5].Text.ToUpper().Equals("REJECT BY FINANCE"))
                {
                    e.Row.BackColor = color1;
                }
            }
        }
        e.Row.Cells[6].Visible = false;
        e.Row.Cells[8].Visible = false;
    }
    protected void lnkDownloadCon_Emp_Command(object sender, CommandEventArgs e)
    {
        string[] commandArgs = e.CommandArgument.ToString().Split(new char[] { ',' });
        string filename = commandArgs[0];
        string unit_name = commandArgs[1];

        if (filename != "")
        {
            downloadfileCE(filename, unit_name);
        }

        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attachment File Cannot Be Uploaded !!!')", true);
        }
    }

    protected void downloadfileCE(string filename, string unit_name)
    {

        var result = filename.Substring(filename.Length - 4);
        if (result.Contains("jpeg"))
        {
            result = ".jpeg";
        }
        try
        {


            string path2 = Server.MapPath("~\\approved_attendance_images\\" + filename);
            string unitName = unit_name + "-Conveyance" + result;
            Response.Clear();
            Response.ContentType = "Application/pdf/jpg/jpeg/png/zip";
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + unitName);
            Response.TransmitFile("~\\approved_attendance_images\\" + filename);
            Response.WriteFile(path2);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
            Response.End();
            Response.Close();





        }
        catch (Exception ex) { }


    }
    protected void lnk_approve_CommandCon_Emp(object sender, CommandEventArgs e)
    {
        try
        {
            int result = 0;
            string unit_code = e.CommandArgument.ToString();


            string emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_billing_material_history where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");




            emp_code = emp_code.Replace(",", "','");

            result = d.operation("update pay_conveyance_amount_history set conveyance_flag = '2', con_emp_status = 'Approve By Finance' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  ");

            if (result > 0)
            {

                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Employee Conveyance Approved Successfully !!');", true);
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        gv_con_emp_approve_load();

    }
    protected void lnk_reject_Con_Emp_Command(object sender, CommandEventArgs e)
    {
        string unit_code = e.CommandArgument.ToString();
        int result = 0;


        string emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_attendance_muster where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and flag != 0");

        emp_code = emp_code.Replace(",", "','");

        if (!emp_code.Equals(""))
        {
            GridViewRow row = (GridViewRow)(((LinkButton)sender)).NamingContainer;
            string reject_reason = (row.FindControl("con_emp_reject_reason") as System.Web.UI.WebControls.TextBox).Text;

            if (reject_reason != "")
            {
                d.operation("update pay_conveyance_amount_history set conveyance_flag = '3' , con_emp_rejected_reason = '" + reject_reason + "', con_emp_status = 'Reject By Finance' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "' and conveyance_rate != 0");

                result = 1;

            }
        }


        if (result > 0)
        {
            //   attendance_status();
            gv_con_emp_approve_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Empolyee Conveyance Rejected Successfully !!');", true);
        }
        else
        {

            // attendance_status();
            gv_con_emp_approve_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Enter Reason  !!');", true);
        }
        Notification_panel.Visible = false;
    }
    protected void btn_con_emp_approve_Click(object sender, EventArgs e)
    {
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        int result = 0;
        string emp_code = null;
        string unit_code = null;
        foreach (GridViewRow gvrow in gv_con_emp_approve.Rows)
        {
            unit_code = null;
            emp_code = null;
            unit_code = (string)gv_con_emp_approve.DataKeys[gvrow.RowIndex].Value;


            var checkbox = gvrow.FindControl("chk_client") as System.Web.UI.WebControls.CheckBox;
            if (checkbox.Checked == true)
            {

                try
                {
                    emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_billing_material_history where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and conveyance_type !=100");




                    emp_code = emp_code.Replace(",", "','");
                    if (!emp_code.Equals(""))
                    {
                        result = d.operation("update pay_conveyance_amount_history set conveyance_flag = '2', con_emp_status = 'Approve By Finance' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and conveyance_rate != 0 ");


                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {
                }
            }

        }
        if (result > 0)
        {
            gv_con_emp_approve_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert(' Empolyee Conveyance Approved Successfully !!');", true);
        }

        gv_con_emp_approve_load();
    }


    //Driver Conveyance Approve
    protected void gv_con_driver_approve_load()
    {

        try
        {
            System.Data.DataTable dt = new System.Data.DataTable();


            gv_con_driver_approve.DataSource = null;
            gv_con_driver_approve.DataBind();

            dt = d.approve_gv_driver_emp_download(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), ddlregion.SelectedValue);

            if (dt.Rows.Count > 0)
            {
                gv_con_driver_approve.DataSource = dt;
                gv_con_driver_approve.DataBind();
                gv_con_driver_panel.Visible = true;

            }

            if (ddl_billing_state.SelectedValue != "ALL")
            {
                if (ddl_unitcode.SelectedValue != "ALL")
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code = '" + ddl_unitcode.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "' AND conveyance_type = 100 ");
                    if (i_fah != "0")
                    {
                        btn_con_driver_approve.Visible = false;
                    }
                    else
                    {
                        btn_con_driver_approve.Visible = true;
                    }
                }
                else
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code in(SELECT unit_code FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_unit_master.branch_status = 0 ORDER BY 1)  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "' AND conveyance_type = 100 ");
                    if (i_fah != "0")
                    {
                        btn_con_driver_approve.Visible = false;

                    }
                    else
                    {
                        btn_con_driver_approve.Visible = true;
                    }
                }

            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

        }

    }
    protected void gv_con_driver_approve_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        Color color = System.Drawing.ColorTranslator.FromHtml("#90EE90");
        Color color1 = System.Drawing.ColorTranslator.FromHtml("#FF4C4C");
        Color color2 = System.Drawing.ColorTranslator.FromHtml("#FACC2E");

        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (ddl_billing_state.SelectedValue != "ALL")
            {
                LinkButton lb1 = e.Row.FindControl("lnk_reject_Driver_Emp") as LinkButton;
                lb1.Visible = true;
                if (ddl_unitcode.SelectedValue != "ALL")
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code = '" + ddl_unitcode.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "' and conveyance_type = 100");
                    if (i_fah != "0")
                    {
                        LinkButton lb4 = e.Row.FindControl("lnk_reject_Driver_Emp") as LinkButton;
                        lb4.Visible = false;
                    }



                }
                else
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_material_history WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code in (SELECT unit_code FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_unit_master.branch_status = 0 ORDER BY 1)  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "' and conveyance_type = 100");
                    if (i_fah != "0")
                    {
                        LinkButton lb4 = e.Row.FindControl("lnk_reject_Driver_Emp") as LinkButton;
                        lb4.Visible = false;
                    }


                }

            }
            for (int i = 0; i < e.Row.Cells.Count; i++)
            {
                if (e.Row.Cells[i].Text == "&nbsp;")
                {
                    e.Row.Cells[i].Text = "";
                }
                if (e.Row.Cells[5].Text.ToUpper().Equals("APPROVE BY FINANCE"))
                {
                    e.Row.BackColor = color;
                }
                else if (e.Row.Cells[5].Text.ToUpper().Equals("REJECT BY FINANCE"))
                {
                    e.Row.BackColor = color1;
                }
            }
        }
        e.Row.Cells[7].Visible = false;
        e.Row.Cells[9].Visible = false;
    }

    protected void lnkDownloadCon_Driver_Command(object sender, CommandEventArgs e)
    {
        string[] commandArgs = e.CommandArgument.ToString().Split(new char[] { ',' });
        string filename = commandArgs[0];
        string unit_name = commandArgs[1];

        if (filename != "")
        {
            downloadfileCD(filename, unit_name);
        }

        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attachment File Cannot Be Uploaded !!!')", true);
        }
    }

    protected void downloadfileCD(string filename, string unit_name)
    {

        var result = filename.Substring(filename.Length - 4);
        if (result.Contains("jpeg"))
        {
            result = ".jpeg";
        }
        try
        {


            string path2 = Server.MapPath("~\\approved_attendance_images\\" + filename);
            string unitName = unit_name + "-Conveyance" + result;
            Response.Clear();
            Response.ContentType = "Application/pdf/jpg/jpeg/png/zip";
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + unitName);
            Response.TransmitFile("~\\approved_attendance_images\\" + filename);
            Response.WriteFile(path2);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
            Response.End();
            Response.Close();





        }
        catch (Exception ex) { }


    }

    protected void lnk_approve_CommandCon_Driver(object sender, CommandEventArgs e)
    {
        try
        {
            int result = 0;
            string unit_code = e.CommandArgument.ToString();


            string emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_billing_material_history where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");




            emp_code = emp_code.Replace(",", "','");

            result = d.operation("update pay_conveyance_amount_history set driver_conv_flag = '2', con_driver_status = 'Approve By Finance' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  ");

            if (result > 0)
            {

                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Employee Conveyance Approved Successfully !!');", true);
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        gv_con_driver_approve_load();

    }

    protected void lnk_reject_Con_Driver_Command(object sender, CommandEventArgs e)
    {
        int rowIndex = int.Parse(e.CommandArgument.ToString().Trim());

        // ID of the Current Row
        String unit_code = gv_con_driver_approve.DataKeys[rowIndex].Values["unit_code"].ToString().Trim();
        String emp_code = gv_con_driver_approve.DataKeys[rowIndex].Values["emp_code"].ToString().Trim();
        //  string unit_code = e.CommandArgument.ToString();
        int result = 0;
        //   string nan = e.Row.Cells[11].ToString();
        //   string emp_code1 = gv_con_driver_approve.SelectedRow.Cells[11].Text;
        string emp_code1 = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_conveyance_amount_history where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and conveyance_rate is not null");

        emp_code1 = emp_code1.Replace(",", "','");

        if (!emp_code1.Equals(""))
        {
            GridViewRow row = (GridViewRow)(((LinkButton)sender)).NamingContainer;
            string reject_reason = (row.FindControl("con_driver_rejected_reason") as System.Web.UI.WebControls.TextBox).Text;

            if (reject_reason != "")
            {
                d.operation("update pay_conveyance_amount_history set driver_conv_flag = '3' , con_driver_rejected_reason = '" + reject_reason + "', con_driver_status = 'Reject By Finance' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and emp_code ='" + emp_code + "' and  conveyance_rate = 0 ");

                result = 1;

            }
        }


        if (result > 0)
        {
            //   attendance_status();
            gv_con_driver_approve_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Driver Conveyance Rejected Successfully !!');", true);
        }
        else
        {

            // attendance_status();
            gv_con_driver_approve_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Enter Reason  !!');", true);
        }
        Notification_panel.Visible = false;
    }
    protected void btn_con_driver_approve_Click(object sender, EventArgs e)
    {
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        int result = 0;
        string emp_code = null;
        string unit_code = null;
        foreach (GridViewRow gvrow in gv_con_driver_approve.Rows)
        {
            unit_code = null;
            emp_code = null;
            unit_code = (string)gv_con_driver_approve.DataKeys[gvrow.RowIndex].Value;


            var checkbox = gvrow.FindControl("chk_client") as System.Web.UI.WebControls.CheckBox;
            var checkemp = gvrow.FindControl("emp_code") as System.Web.UI.WebControls.TextBox;
            if (checkbox.Checked == true)
            {
                emp_code = (string)gv_con_driver_approve.DataKeys[gvrow.RowIndex].Values["emp_code"].ToString();
                try
                {

                    //  emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_billing_material_history where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and conveyance_type = 100");




                    //emp_code = emp_code.Replace(",", "','");
                    if (!emp_code.Equals(""))
                    {
                        result = d.operation("update pay_conveyance_amount_history set driver_conv_flag = '2', con_driver_status = 'Approve By Finance' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and emp_code='" + emp_code + "'and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and  conveyance_rate = 0 ");


                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {
                }
            }

        }
        if (result > 0)
        {
            gv_con_driver_approve_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert(' Driver Conveyance Approved Successfully !!');", true);
        }

        gv_con_driver_approve_load();
    }

    protected void region()
    {
        if (ddl_client.SelectedValue != "Select")
        {
            ddlregion.Items.Clear();
            System.Data.DataTable dt_item2 = new System.Data.DataTable();

            MySqlDataAdapter cmd_item2 = new MySqlDataAdapter("SELECT DISTINCT  pay_zone_master.region FROM pay_client_billing_details INNER JOIN pay_zone_master  ON  pay_client_billing_details . comp_code  =  pay_zone_master . comp_code  AND  pay_client_billing_details . client_code  =  pay_zone_master . client_code  WHERE  pay_client_billing_details . client_code  = '" + ddl_client.SelectedValue + "' and type = 'Region' ", d.con);
            //MySqlDataAdapter cmd_item1 = new MySqlDataAdapter(" Select DISTINCT region from pay_zone_master where comp_code ='" + Session["comp_code"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "' ", d.con);

            d.con.Open();
            try
            {
                cmd_item2.Fill(dt_item2);
                if (dt_item2.Rows.Count > 0)
                {
                    ddlregion.DataSource = dt_item2;
                    ddlregion.DataTextField = dt_item2.Columns[0].ToString();
                    ddlregion.DataValueField = dt_item2.Columns[0].ToString();
                    ddlregion.DataBind();
                }
                dt_item2.Dispose();
                d.con.Close();
                ddlregion.Items.Insert(0, "Select");
                ddlregion.Items.Insert(1, "ALL");
                //  ddl_state_SelectedIndexChanged(null, null);
            }
            catch (Exception ex) { throw ex; }
            finally
            {
                d.con.Close();
            }

        }
    }

    protected void ddl_region_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlregion.SelectedValue != "Select")
        {
            ddl_billing_state.Items.Clear();
            System.Data.DataTable dt_item = new System.Data.DataTable();
            MySqlDataAdapter cmd_item = null;
            if (ddlregion.SelectedValue != "ALL")
            {
                cmd_item = new MySqlDataAdapter("SELECT DISTINCT (STATE_NAME) FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"] + "' AND client_code = '" + ddl_client.SelectedValue + "' AND ZONE = '" + ddlregion.SelectedValue + "' ORDER BY 1", d.con);
            }
            else
            {
                cmd_item = new MySqlDataAdapter("SELECT DISTINCT (STATE_NAME) FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"] + "' AND client_code = '" + ddl_client.SelectedValue + "' ORDER BY 1", d.con);
            }
            d.con.Open();
            try
            {
                ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true);
                cmd_item.Fill(dt_item);
                if (dt_item.Rows.Count > 0)
                {
                    ddl_billing_state.DataSource = dt_item;
                    ddl_billing_state.DataTextField = dt_item.Columns[0].ToString();
                    ddl_billing_state.DataValueField = dt_item.Columns[0].ToString();
                    ddl_billing_state.DataBind();
                }
                dt_item.Dispose();
                d.con.Close();
                ddl_billing_state.Items.Insert(0, "Select");
                ddl_billing_state.Items.Insert(1, "ALL");
                ddl_unitcode.Items.Clear();
            }
            catch (Exception ex)
            {
            }
            finally
            {
                d.con.Close();
            }

        }

    }
    protected void btn_arrears_rate_breakup_Click(object sender, EventArgs e)
    {
        generate_report(6, 0, billing_type.SelectedValue);
    }
    // billing report

    protected void btn_getxl_report_Click(object sender, EventArgs e)
    {
        hidtab.Value = "10";

        if (ddl_report.SelectedValue == "Salary Slip Sending Details")
        {
            export_xl(1);
        }

        if (ddl_report.SelectedValue == "Monthwise Billing Details")
        {
            export_xl(2);
        }



    }
    private void export_xl(int i)
    {
        string t = ddl_bill_type.SelectedValue;
        string sql = null;
        string where_head = "";
        string where_salary = "";
        string where_joining = "";
        string where_billing = "";
        string client = "";

        where_salary = "where pay_pro_master.comp_code = '" + Session["comp_code"].ToString() + "' AND pay_pro_master.client_code = '" + ddl_client.SelectedValue + "' AND pay_pro_master.unit_code = '" + ddl_unitcode.SelectedValue + "'  ";

        where_billing = " WHERE comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and unit_code = '" + ddl_unitcode.SelectedValue + "' ";
        if (ddl_billing_state.SelectedValue == "ALL")
        {

            where_salary = " where pay_pro_master.comp_code = '" + Session["comp_code"].ToString() + "' AND pay_pro_master.client_code = '" + ddl_client.SelectedValue + "' ";

            where_billing = " WHERE comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' ";
        }
        else if (ddl_unitcode.SelectedValue == "ALL")
        {

            where_salary = " where pay_pro_master.comp_code = '" + Session["comp_code"].ToString() + "' AND pay_pro_master.client_code = '" + ddl_client.SelectedValue + "' AND pay_pro_master.state_name = '" + ddl_billing_state.SelectedValue + "' ";

            where_billing = " WHERE comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "' ";
        }
        if (ddl_client.SelectedValue == "ALL")
        {
            where_billing = " WHERE comp_code = '" + Session["comp_code"].ToString() + "' ";
        }
        if (i == 1)
        {

            sql = "SELECT client_name, state_name, unit_name, emp_name, grade,month, year, (CASE WHEN branch_email = 0 THEN 'Not Send' WHEN branch_email = 2 THEN 'Send' ELSE 'Not Send' END) AS 'status' FROM pay_pro_master INNER JOIN pay_client_master ON pay_pro_master.comp_code = pay_client_master.comp_code AND pay_pro_master.client_code = pay_client_master.client_code " + where_salary + " and  pay_pro_master.month = '" + txt_month_year.Text.Substring(0, 2) + "' AND pay_pro_master.year = '" + txt_month_year.Text.Substring(3) + "' and employee_type != 'Reliever'";

        }

        if (i == 2)
        {
            if (ddl_bill_type.SelectedValue == "1")
            {
                client = ",client";
            }

            if ((ddl_bill_type.SelectedValue == "1") || (ddl_bill_type.SelectedValue == "2"))
            {
                sql = "SELECT client, state_name,month,year, sum(Amount + uniform + operational_cost + conveyance_rate + group_insurance_billing + ot_amount + service_charge) AS 'Amount', sum((CGST9) + (SGST9) + (IGST18)) AS 'GST', sum((Amount) + (uniform) + (operational_cost) + (Service_charge) + (ot_amount) + (group_insurance_billing) + (conveyance_rate) + (CGST9) + (SGST9) + (IGST18)) AS 'Grand Total'  FROM pay_billing_unit_rate_history " + where_billing + "and month = '" + txt_month_year.Text.Substring(0, 2) + "' AND year = '" + txt_month_year.Text.Substring(3) + "' and invoice_flag = 1  and  EMP_CODE != '' GROUP BY pay_billing_unit_rate_history.state_name " + client + " ORDER BY 1, 2, 3, 4";
            }
            if (ddl_bill_type.SelectedValue == "3")
            {
                sql = "SELECT client, state_name, unit_name,month,year,  sum(Amount + uniform + operational_cost + conveyance_rate + group_insurance_billing + ot_amount + service_charge) AS 'Amount', sum((CGST9) + (SGST9) + (IGST18)) AS 'GST', sum((Amount) + (uniform) + (operational_cost) + (Service_charge) + (ot_amount) + (group_insurance_billing) + (conveyance_rate) + (CGST9) + (SGST9) + (IGST18)) AS 'Grand Total' FROM pay_billing_unit_rate_history " + where_billing + "and month = '" + txt_month_year.Text.Substring(0, 2) + "' AND year = '" + txt_month_year.Text.Substring(3) + "' and invoice_flag = 1  and  EMP_CODE != '' GROUP BY pay_billing_unit_rate_history.unit_name ORDER BY 1, 2, 3, 4";
            }
        }

        MySqlCommand cmd = new MySqlCommand(sql, d.con);

        MySqlDataAdapter dscmd = new MySqlDataAdapter(cmd);

        DataSet ds = new DataSet();
        dscmd.Fill(ds);

        if (ds.Tables[0].Rows.Count > 0)
        {
            Response.Clear();
            Response.Buffer = true;

            if (i == 1)
            {
                Response.AddHeader("content-disposition", "attachment;filename=SALARY_SLIP_SENDING_DETAILS.xls");
            }

            else if (i == 2)
            {
                if (t == "1")
                {
                    Response.AddHeader("content-disposition", "attachment;filename=BILLING_DETAILS_CLIENTWISE.xls");
                }
                if (t == "2")
                {
                    Response.AddHeader("content-disposition", "attachment;filename=BILLING_DETAILS_STATEWISE.xls");
                }
                if (t == "3")
                {
                    Response.AddHeader("content-disposition", "attachment;filename=BILLING_DETAILS_BRANCHWISE.xls");
                }
            }
            string date1 = txt_month_year.Text;


            Response.Charset = "";
            Response.ContentType = "application/vnd.ms-excel";
            Repeater Repeater1 = new Repeater();
            Repeater1.DataSource = ds;
            Repeater1.HeaderTemplate = new MyTemplate12(ListItemType.Header, ds, i, date1, t, 1);
            Repeater1.ItemTemplate = new MyTemplate12(ListItemType.Item, ds, i, date1, t, 1);
            Repeater1.FooterTemplate = new MyTemplate12(ListItemType.Footer, null, i, date1, t, 1);
            Repeater1.DataBind();

            System.IO.StringWriter stringWrite = new System.IO.StringWriter();
            System.Web.UI.HtmlTextWriter htmlWrite = new HtmlTextWriter(stringWrite);
            Repeater1.RenderControl(htmlWrite);

            string style = @"<style> .textmode { } </style>";
            Response.Write(style);
            Response.Output.Write(stringWrite.ToString());
            Response.Flush();
            Response.End();
        }
        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('No Matching Records Found.');", true);
        }
        d.con.Close();
    }
    public class MyTemplate12 : ITemplate
    {
        ListItemType type;
        LiteralControl lc;
        DataSet ds;
        static int ctr;
        int i;
        static int ctr1;
        string emp_type;
        string date1;
        string t;
        double emp_esic = 0, empr_esic = 0, total = 0;
        string client_name = "";
        int i3 = 1;
        private ListItemType listItemType;
        double amount = 0, gst = 0, grand_total = 0, amount1 = 0, gst1 = 0, grand_total1 = 0;


        protected string getmonth(string month)
        {
            month = (int.Parse(month)).ToString();
            if (month == "1")
            {
                return "JAN";
            }
            else if (month == "2")
            { return "FEB"; }
            else if (month == "3")
            { return "MAR"; }
            else if (month == "4")
            { return "APR"; }
            else if (month == "5")
            { return "MAY"; }
            else if (month == "6")
            { return "JUN"; }
            else if (month == "7")
            { return "JUL"; }
            else if (month == "8")
            { return "AUG"; }
            else if (month == "9")
            { return "SEP"; }
            else if (month == "10")
            { return "OCT"; }
            else if (month == "11")
            { return "NOV"; }
            else if (month == "12")
            { return "DEC"; }
            return "";

        }
        public MyTemplate12(ListItemType type, DataSet ds, int i, string date1, string t, int i3)
        {
            // TODO: Complete member initialization
            this.type = type;
            this.ds = ds;
            this.i = i;
            this.date1 = date1;
            this.t = t;
            this.i3 = i3;
        }
        public void InstantiateIn(Control container)
        {
            switch (type)
            { //Original Bank A/C Number ,PF_IFSC_CODE,BANK_HOLDER_NAME
                case ListItemType.Header:


                    // var today = DateTime.Now;
                    var current_date = date1;


                    if (i == 1)
                    {
                        lc = new LiteralControl("<table border=1><tr><th bgcolor=yellow colspan=9 align=center> SALARY SLIP SENDING DETAILS MONTH " + getmonth(current_date.Substring(0, 2)) + " " + current_date.Substring(3) + "</th></tr><table border=1><tr><th>SR. NO.</th><th>CLIENT NAME</th><th>STATE NAME</th><th>BRANCH NAME</th><th>EMPLOYEE NAME</th><th>DESIGNATION</th><th>MONTH</th><th>YEAR</th><th>STATUS</th></tr>");
                    }

                    else if (i == 2)
                    {
                        if ((t == "1") || (t == "2"))
                        {
                            lc = new LiteralControl("<table border=1><tr><th bgcolor=yellow colspan=8 align=center> BILLING DETAILS MONTH " + getmonth(current_date.Substring(0, 2)) + " " + current_date.Substring(3) + "</th></tr><table border=1><tr><th>SR. NO.</th><th>CLIENT NAME</th><th>STATE NAME</th><th>MONTH</th><th>YEAR</th><th>AMOUNT</th><th>GST</th><th>GRAND TOTAL</th></tr>");
                        }
                        if (t == "3")
                        {
                            lc = new LiteralControl("<table border=1><tr><th bgcolor=yellow colspan=9 align=center> BILLING DETAILS MONTH " + getmonth(current_date.Substring(0, 2)) + " " + current_date.Substring(3) + "</th></tr><table border=1><tr><th>SR. NO.</th><th>CLIENT NAME</th><th>STATE NAME</th><th>BRANCH NAME</th><th>MONTH</th><th>YEAR</th><th>AMOUNT</th><th>GST</th><th>GRAND TOTAL</th></tr>");
                        }

                    }
                    break;
                case ListItemType.Item:
                    if (i == 1)
                    {
                        string bg = "";
                        if (ds.Tables[0].Rows[ctr]["status"].ToString() == "Send")
                        {
                            bg = "bgcolor=green";
                        }
                        else
                        {
                            bg = "bgcolor=red";
                        }
                        lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + ds.Tables[0].Rows[ctr]["client_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["emp_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["GRADE"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["month"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["year"].ToString().ToUpper() + "</td><td " + bg + ">" + ds.Tables[0].Rows[ctr]["status"].ToString().ToUpper() + "</td></tr>");
                    }

                    else if (i == 2)
                    {
                        int set_start_row = 3;
                        if (t == "2")
                        {
                            lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + ds.Tables[0].Rows[ctr]["client"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["month"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["year"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Amount"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["GST"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Grand Total"].ToString().ToUpper() + "</td></tr>");
                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                lc.Text = lc.Text + "<tr><b><td align=center colspan = 5>Total</td><td>=ROUND(SUM(F3:F" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(G3:G" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(H3:H" + (ctr + 3) + "),2)</td></b></tr>";
                            }
                        }

                        if (t == "1")
                        {
                            if (client_name != ds.Tables[0].Rows[ctr]["client"].ToString().ToUpper())
                            {
                                if (client_name != "")
                                {
                                    i3 = i3 + 1;

                                    lc.Text = lc.Text + "<tr><b><td align=center colspan = 5>Total</td><td>" + amount + "</td><td>" + gst + "</td><td>" + grand_total + "</td></b></tr>";

                                    ctr1 = ctr + i3 + 1;
                                    amount = 0; gst = 0; grand_total = 0;

                                }
                            }
                            amount = amount + double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString());
                            gst = gst + double.Parse(ds.Tables[0].Rows[ctr]["GST"].ToString());
                            grand_total = grand_total + double.Parse(ds.Tables[0].Rows[ctr]["Grand Total"].ToString());

                            amount1 = amount1 + double.Parse(ds.Tables[0].Rows[ctr]["Amount"].ToString());
                            gst1 = gst1 + double.Parse(ds.Tables[0].Rows[ctr]["GST"].ToString());
                            grand_total1 = grand_total1 + double.Parse(ds.Tables[0].Rows[ctr]["Grand Total"].ToString());

                            client_name = ds.Tables[0].Rows[ctr]["client"].ToString().ToUpper();
                            // lc = new LiteralControl( "<tr><b><td align=center colspan = 5>Total</td><td>=ROUND(SUM(F3:F" + (ctr + i) + "),2)</td><td>=ROUND(SUM(G3:G" + (ctr + i) + "),2)</td><td>=ROUND(SUM(H3:H" + (ctr + i) + "),2)</td></b></tr>");
                            lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + ds.Tables[0].Rows[ctr]["client"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["month"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["year"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Amount"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["GST"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Grand Total"].ToString().ToUpper() + "</td></tr>");
                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                lc.Text = lc.Text + "<tr><b><td align=center colspan = 5>Total</td><td>" + amount + "</td><td>" + gst + "</td><td>" + grand_total + "</td></b></tr>";

                                lc.Text = lc.Text + "<tr><b><td align=center colspan = 5>GRAND TOTAL</td><td>" + amount1 + "</td><td>" + gst1 + "</td><td>" + grand_total1 + "</td></b></tr>";
                            }
                        }


                        if (t == "3")
                        {
                            lc = new LiteralControl("<tr><td>" + (ctr + 1) + "</td><td>" + ds.Tables[0].Rows[ctr]["client"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["state_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["unit_name"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["month"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["year"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Amount"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["GST"].ToString().ToUpper() + "</td><td>" + ds.Tables[0].Rows[ctr]["Grand Total"].ToString().ToUpper() + "</td></tr>");
                            if (ds.Tables[0].Rows.Count == ctr + 1)
                            {
                                lc.Text = lc.Text + "<tr><b><td align=center colspan = 6>Total</td><td>=ROUND(SUM(G3:G" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(H3:H" + (ctr + 3) + "),2)</td><td>=ROUND(SUM(I3:I" + (ctr + 3) + "),2)</td></b></tr>";
                            }
                        }

                    }
                    ctr++;
                    break;
                case ListItemType.Footer:
                    lc = new LiteralControl("</table>");
                    ctr = 0;
                    break;
            }
            container.Controls.Add(lc);
        }
    }
    protected string getmonth(string month)
    {
        month = (int.Parse(month)).ToString();
        if (month == "1")
        {
            return "JAN";
        }
        else if (month == "2")
        { return "FEB"; }
        else if (month == "3")
        { return "MAR"; }
        else if (month == "4")
        { return "APR"; }
        else if (month == "5")
        { return "MAY"; }
        else if (month == "6")
        { return "JUN"; }
        else if (month == "7")
        { return "JUL"; }
        else if (month == "8")
        { return "AUG"; }
        else if (month == "9")
        { return "SEP"; }
        else if (month == "10")
        { return "OCT"; }
        else if (month == "11")
        { return "NOV"; }
        else if (month == "12")
        { return "DEC"; }
        return "";

    }
    protected void btn_material_report_Click(object sender, EventArgs e)
    {

        try
        {
            Panel_notification_material.Visible = true;

            ViewState["Material_Message"] = 0;
            ViewState["Material_reject_attendance"] = 0;
            ViewState["Material_appro_attendannce"] = 0;
            ViewState["Material_appro_attendannce_finanace"] = 0;
            ViewState["Material_deployment"] = 0;
            ViewState["Material_closed_branch"] = 0;

            DataTable dt_item = new DataTable();
            //Remaining Approve By Admin
            dt_item = d.chk_material(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 0);
            Material_Message = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["Material_Message"] = dt_item.Rows.Count.ToString();
                Material_Message = ViewState["Material_Message"].ToString();
                gv_branches_no_material.DataSource = dt_item;
                gv_branches_no_material.DataBind();

            }
            dt_item.Dispose();

            //approve by admin
            gv_approve_by_admin_material.DataSource = null;
            gv_approve_by_admin_material.DataBind();
            dt_item = d.chk_material(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 1);
            Material_appro_attendannce = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["Material_appro_attendannce"] = dt_item.Rows.Count.ToString();
                Material_appro_attendannce = ViewState["Material_appro_attendannce"].ToString();

                gv_approve_by_admin_material.DataSource = dt_item;
                gv_approve_by_admin_material.DataBind();

            }
            dt_item.Dispose();


            gv_branches_reject_material.DataSource = null;
            gv_branches_reject_material.DataBind();

            //Approve by Finance

            dt_item = d.chk_material(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 2);
            Material_reject_attendance = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["Material_reject_attendance"] = dt_item.Rows.Count.ToString();
                Material_reject_attendance = ViewState["Material_reject_attendance"].ToString();

                gv_branches_reject_material.DataSource = dt_item;
                gv_branches_reject_material.DataBind();

            }
            dt_item.Dispose();


            gv_approve_by_finance_material.DataSource = null;
            gv_approve_by_finance_material.DataBind();

            //Reject by finance

            dt_item = d.chk_material(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 3);
            Material_appro_attendannce_finanace = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["Material_appro_attendannce_finanace"] = dt_item.Rows.Count.ToString();
                Material_appro_attendannce_finanace = ViewState["Material_appro_attendannce_finanace"].ToString();

                gv_approve_by_finance_material.DataSource = dt_item;
                gv_approve_by_finance_material.DataBind();

            }
            dt_item.Dispose();


            Panel_not_appr_material.Visible = true; Panel_appro_atte_material.Visible = true; Panel_reject_Material.Visible = true; Panel_approv_finance_material.Visible = true;


        }
        catch (Exception ex) { throw ex; }
        finally { }


    }

    protected void gridview_conv_1_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        for (int i = 0; i < e.Row.Cells.Count; i++)
        {
            if (e.Row.Cells[i].Text == "&nbsp;")
            {
                e.Row.Cells[i].Text = "";
            }
        }
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //e.Row.Attributes["onmouseover"] = "this.style.cursor='pointer';this.style.textDecoration='underline';";
            //e.Row.Attributes["onmouseout"] = "this.style.textDecoration='none';";
            //e.Row.Attributes["onclick"] = ClientScript.GetPostBackClientHyperlink(this.gridService, "Select$" + e.Row.RowIndex);
        }
    }
    protected void btn_emp_report_Click(object sender, EventArgs e)
    {
        hidtab.Value = "2";
        try
        {
            Panel_notification_conv.Visible = true;
            ViewState["emp_con_remaing"] = 0;
            ViewState["emp_con_approve_admin"] = 0;
            ViewState["emp_con_approve_finance"] = 0;
            ViewState["emp_con_reject_finance"] = 0;


            //ViewState["Conv_Message"] = 0;

            //ViewState["Conv_reject_attendance"] = 0;
            //ViewState["Conv_appro_attendannce"] = 0;
            //ViewState["Conv_reject_attendance"] = 0;
            //ViewState["Conv_appro_attendannce_finanace"] = 0;
            //ViewState["Conv_deployment"] = 0;
            //ViewState["Conv_closed_branch"] = 0;
            //conveyance_count();

            DataTable dt_item = new DataTable();
            //Remaining Approve By Admin
            dt_item = d.chk_emp_con(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 0);
            emp_con_remaing = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["emp_con_remaing"] = dt_item.Rows.Count.ToString();
                emp_con_remaing = ViewState["emp_con_remaing"].ToString();
                gridview_conv_1.DataSource = dt_item;
                gridview_conv_1.DataBind();
                Panel_not_approve_conv.Visible = true;
            }


            //Approve By Admin
            gv_approved_conveyance.DataSource = null;
            gv_approved_conveyance.DataBind();
            dt_item = d.chk_emp_con(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 1);
            emp_con_approve_admin = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["emp_con_approve_admin"] = dt_item.Rows.Count.ToString();
                emp_con_approve_admin = ViewState["emp_con_approve_admin"].ToString();

                gv_approved_conveyance.DataSource = dt_item;
                gv_approved_conveyance.DataBind();
                Panel_appro_con.Visible = true;
            }
            dt_item.Dispose();


            gv_reject_conveyance.DataSource = null;
            gv_reject_conveyance.DataBind();

            //Approve By Finance
            dt_item = d.chk_emp_con(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 2);
            emp_con_approve_finance = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["emp_con_approve_finance"] = dt_item.Rows.Count.ToString();
                emp_con_approve_finance = ViewState["emp_con_approve_finance"].ToString();

                gv_reject_conveyance.DataSource = dt_item;
                gv_reject_conveyance.DataBind();

            }
            dt_item.Dispose();


            gv_app_att_finance_conv.DataSource = null;
            gv_app_att_finance_conv.DataBind();

            //Reject By Finance
            dt_item = d.chk_emp_con(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 3);
            emp_con_reject_finance = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["emp_con_reject_finance"] = dt_item.Rows.Count.ToString();
                emp_con_reject_finance = ViewState["emp_con_reject_finance"].ToString();

                gv_app_att_finance_conv.DataSource = dt_item;
                gv_app_att_finance_conv.DataBind();

            }
            dt_item.Dispose();

            //gv_branch_deployement_conv.DataSource = null;
            //gv_branch_deployement_conv.DataBind();

            Panel_not_approve_conv.Visible = true; Panel_appro_con.Visible = true; Panel_reject_con.Visible = true; Panel_appro_finance_con.Visible = true;



        }
        catch (Exception ex) { throw ex; }
        finally { }

    }
    protected void btn_driver_report_Click(object sender, EventArgs e)
    {
        hidtab.Value = "2";
        try
        {
            Panel_notification_conv_driver.Visible = true;
            ViewState["driver_con_remaing"] = 0;
            ViewState["driver_con_approve_admin"] = 0;
            ViewState["driver_con_approve_finance"] = 0;
            ViewState["driver_con_reject_finance"] = 0;


            //ViewState["Conv_Message"] = 0;

            //ViewState["Conv_reject_attendance"] = 0;
            //ViewState["Conv_appro_attendannce"] = 0;
            //ViewState["Conv_reject_attendance"] = 0;
            //ViewState["Conv_appro_attendannce_finanace"] = 0;
            //ViewState["Conv_deployment"] = 0;
            //ViewState["Conv_closed_branch"] = 0;
            //conveyance_count();

            DataTable dt_item = new DataTable();
            //Remaining Approve By Admin
            driver_con_notapprove_admin.DataSource = null;
            driver_con_notapprove_admin.DataBind();
            dt_item = d.chk_driver_con(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 0);
            driver_con_remaing = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["driver_con_remaing"] = dt_item.Rows.Count.ToString();
                driver_con_remaing = ViewState["driver_con_remaing"].ToString();
                driver_con_notapprove_admin.DataSource = dt_item;
                driver_con_notapprove_admin.DataBind();
                // Panel_not_approve_conv_driver.Visible = true;
            }


            //Approve By Admin
            gv_approved_driver_conveyance.DataSource = null;
            gv_approved_driver_conveyance.DataBind();
            dt_item = d.chk_driver_con(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 1);
            driver_con_approve_admin = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["driver_con_approve_admin"] = dt_item.Rows.Count.ToString();
                driver_con_approve_admin = ViewState["driver_con_approve_admin"].ToString();

                gv_approved_driver_conveyance.DataSource = dt_item;
                gv_approved_driver_conveyance.DataBind();
                Panel_appro_con_driver.Visible = true;
            }
            dt_item.Dispose();

            //Approve By Finance
            driver_con_appro_finance.DataSource = null;
            driver_con_appro_finance.DataBind();

            dt_item = d.chk_driver_con(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 2);
            driver_con_approve_finance = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["driver_con_approve_finance"] = dt_item.Rows.Count.ToString();
                driver_con_approve_finance = ViewState["driver_con_approve_finance"].ToString();

                driver_con_appro_finance.DataSource = dt_item;
                driver_con_appro_finance.DataBind();

            }
            dt_item.Dispose();

            //Reject By Finance
            driver_con_notapprove_fiance.DataSource = null;
            driver_con_notapprove_fiance.DataBind();
            dt_item = d.chk_driver_con(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 3);
            driver_con_reject_finance = "0";
            if (dt_item.Rows.Count > 0)
            {
                ViewState["driver_con_reject_finance"] = dt_item.Rows.Count.ToString();
                driver_con_reject_finance = ViewState["driver_con_reject_finance"].ToString();

                driver_con_notapprove_fiance.DataSource = dt_item;
                driver_con_notapprove_fiance.DataBind();

            }
            dt_item.Dispose();

            // Panel_not_approve_conv_driver.Visible = true;
            Panel_appro_con_driver.Visible = true; Panel_reject_con_driver.Visible = true; Panel_appro_finance_con_driver.Visible = true;



        }
        catch (Exception ex) { throw ex; }
        finally { }

    }


    protected void btn_finance_rpt_ot_Click(object sender, EventArgs e)
    {
        hidtab.Value = "0";
        gv_attendace_load();
        ////suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        ////suraj close


        string unit = d.check_attendance_approve(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 1, ddlregion.SelectedValue);
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendance not Approved by Admin for Branch : " + unit + "');", true);
            return;

        }
        generate_report(9, 0, billing_type.SelectedValue);
    }
    protected void btn_breakup_ot_Click(object sender, EventArgs e)
    {
        hidtab.Value = "0";
        // attendance_status();
        Notification_panel.Visible = false;
        //suraj start
        //if (billing_type_validation())
        //{
        //    return;
        //}
        //suraj close
        if (ddl_client.SelectedValue == "ALL")
        {
            string client_name = d1.getsinglestring("SELECT group_concat(distinct client) FROM pay_billing_unit_rate_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag = 0 And (bill_type is null || bill_type ='')");
            string state_name = d1.getsinglestring("SELECT group_concat(distinct state_name) FROM pay_billing_unit_rate_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag = 0 And (bill_type is null || bill_type ='')");
            if ((!state_name.Equals("")) || (!state_name.Equals(""))) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Client : " + client_name + " And State : " + state_name + " Not Final So You Can Not Generate BreakUp Sheet For ALL Client !!!');", true); return; }
        }
        generate_report(10, 0, billing_type.SelectedValue);
    }
    protected void btn_invoice_ot_Click(object sender, EventArgs e)
    {
        ot_invoice = 1;
        btn_invoice_rpt_Click(null, null);
    }
    protected void btn_ot_final_invoice_Click(object sender, EventArgs e)
    {
        hidtab.Value = "0";

        if (ddl_billing_state.SelectedValue == "ALL")
        {
            zip_files();
            return;
        }

        gv_attendace_load();
        //suraj start
        if (billing_type_validation())
        {
            return;
        }
        //suraj close

        string unit = d.check_attendance_approve(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 2, ddlregion.SelectedValue);
        if (unit != "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendance not Approved by Finance for Branch : " + unit + "');", true);
            return;

        }

        string where_state = "";
        if (!ddl_billing_state.SelectedValue.Equals("ALL")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "'"; }
        if (ddl_billing_state.SelectedValue.Equals("Maharashtra") && ddl_client.SelectedValue.Equals("BAGIC") && int.Parse(txt_month_year.Text.Replace("/", "")) > 42020 && billing_type.SelectedValue.Equals("1")) { where_state = " and state='" + ddl_billing_state.SelectedValue + "' and billingwise_id = 5"; }
        if (d.getsinglestring("select billingwise_id from pay_client_billing_details where client_code = '" + ddl_client.SelectedValue + "' " + where_state).Equals("5"))
        {
            where_state = " and pay_unit_master.zone = '" + ddlregion.SelectedValue + "'";
        }
        else
        { where_state = ""; }


        string branch = d.check_branch_deployment(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3), 2, ddlregion.SelectedValue);
        if (branch != "")
        {
            gv_load_deployment();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Check  This  Branch : " + branch + " Having No Deployment');", true);
            return;

        }




        // paypro_no(0);
        ot_invoice = 1;
        final_invoice_flag(billing_type.SelectedValue);
        display_ClientBilling();
        gv_attendace_load();
        invoice_fl_man = 1;
        btn_invoice_rpt_Click(null, null);

    }
    protected void btn_r_m_proccess_Click(object sender, EventArgs e)
    {
        hidtab.Value = "6";
        string where_check = "", where_check1 = "", where_check2="";
        where_check = " and client_code = '" + ddl_client.SelectedValue + "'";
        where_check2 = " and pay_r_and_m_service.client_code = '" + ddl_client.SelectedValue + "'";
        where_check1 = " and billing_client_code = '" + ddl_client.SelectedValue + "'";
        if (ddl_billing_state.SelectedValue != "ALL")
        {

            where_check = " and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'";
            where_check2 = " and pay_r_and_m_service.client_code = '" + ddl_client.SelectedValue + "' and pay_r_and_m_service.state_name = '" + ddl_billing_state.SelectedValue + "'";
            where_check1 = " and billing_client_code = '" + ddl_client.SelectedValue + "' and billing_state = '" + ddl_billing_state.SelectedValue + "'";
        }
        if (ddl_unitcode.SelectedValue != "ALL")
        {
            where_check = " and client_code = '" + ddl_client.SelectedValue + "'  and unit_code  = '" + ddl_unitcode.SelectedValue + "'";
            where_check2 = " and pay_r_and_m_service.client_code = '" + ddl_client.SelectedValue + "'  and pay_r_and_m_service.unit_code  = '" + ddl_unitcode.SelectedValue + "'";
            where_check1 = " and billing_client_code = '" + ddl_client.SelectedValue + "'  and billing_unit_code  = '" + ddl_unitcode.SelectedValue + "'";
        }

        string unit_na = d1.getsinglestring("SELECT GROUP_CONCAT(DISTINCT unit_name) FROM pay_unit_master INNER JOIN pay_r_and_m_service ON pay_unit_master.comp_code = pay_r_and_m_service.comp_code AND pay_unit_master.client_code = pay_r_and_m_service.client_code AND pay_unit_master.unit_code = pay_r_and_m_service.unit_code WHERE pay_r_and_m_service.comp_code = '" + Session["COMP_CODE"].ToString() + "' AND pay_r_and_m_service.unit_code NOT IN (SELECT billing_unit_code FROM pay_billing_master WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' " + where_check1 + ") and approve_flag=1 " + where_check2);
        if (!unit_na.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_na + "  Not Having Policy You can not Proceed!!!');", true); return; }
        
        string unit_name1 = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_master INNER JOIN pay_r_and_m_service ON pay_r_and_m_service.comp_code = pay_billing_master.comp_code  AND pay_r_and_m_service.client_code = pay_billing_master.billing_client_code AND pay_r_and_m_service.unit_code = pay_billing_master.billing_unit_code and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and approve_flag = 1  inner join pay_unit_master on pay_unit_master.comp_code=pay_billing_master.comp_code and pay_unit_master.client_code=pay_billing_master.billing_client_code and pay_unit_master.unit_code=pay_billing_master.billing_unit_code where pay_billing_master.comp_code = '" + Session["COMP_CODE"].ToString() + "' and (service_charge_r_m is  null || service_charge_r_m =0)" + where_check1);
        if (!unit_name1.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name1 + "  Not Having Policy You can not Proceed!!!');", true); return; }
        

        //string unit_name1 = d1.getsinglestring("SELECT GROUP_CONCAT(DISTINCT unit_name) FROM pay_r_and_m_service INNER JOIN pay_unit_master  ON pay_unit_master.comp_code = pay_r_and_m_service.comp_code AND pay_unit_master.client_code = pay_r_and_m_service.client_code  AND pay_unit_master.unit_code = pay_r_and_m_service.unit_code WHERE pay_r_and_m_service.comp_code = '" + Session["COMP_CODE"].ToString() + "' AND pay_r_and_m_service.unit_code NOT IN (SELECT billing_unit_code FROM pay_billing_master WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' " + where_check1 + " AND service_charge_r_m IS NULL || service_charge_r_m = 0)  and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' AND approve_flag = 1" + where_check);
        //if (!unit_name1.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name1 + "  Not Having Policy You can not Proceed!!!');", true); return; }
       
        string unit_name = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_r_m where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag != 0  and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' " + where_check);
        if (!unit_name.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + "  Already Approve You can not Proceed!!!');", true); return; }
            
        insert_finance_data(6);
        gridview_r_m_load();
        
    }
    protected void btn_r_m_finance_Click(object sender, EventArgs e)
    {
        hidtab.Value = "6";
        generate_report(11, 0, "r_and_m");
        gridview_r_m_load();

    }
    protected void btn_r_m_invoice_Click(object sender, EventArgs e)
    {
        hidtab.Value = "6";
        string invoice_type = "";
        string start_date = get_start_date();
        string txt_month_year1 = "";
        invoice_type = ddl_invoice_type.SelectedValue; txt_month_year1 = txt_month_year.Text;
        string unit_name = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_r_m INNER JOIN pay_r_and_m_service ON pay_r_and_m_service.comp_code = pay_billing_r_m.comp_code  AND pay_r_and_m_service.client_code = pay_billing_r_m.client_code AND pay_r_and_m_service.unit_code = pay_billing_r_m.unit_code   where pay_billing_r_m.comp_code = '" + Session["COMP_CODE"].ToString() + "' and pay_billing_r_m.client_code = '" + ddl_client.SelectedValue + "'and pay_billing_r_m.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_r_m.Year = '" + txt_month_year.Text.Substring(3) + "' and (approve_flag = 1 || approve_flag = 3 || approve_flag = 0)");
        if (!unit_name.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + "  Not Approve By Finance You can not get Invoice!!!');", true); gridview_r_m_load(); return; }
       

        //invoice and bill date 
        string invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, "4", ddl_designation.SelectedValue, txt_month_year.Text, int.Parse(ddl_start_date_common.SelectedValue), int.Parse(ddl_end_date_common.SelectedValue), "r_m_bill", ddlregion.SelectedValue, arrears_invoice, txt_arrear_month_year.Text, ddl_arrears_type.SelectedValue, ot_invoice);

        string invoice = "", bill_date = "";

        if (invoice_bill_date.Equals(""))
        {
            invoice = "";
            bill_date = "";

        }
        else
        {

            var invoice_bill = invoice_bill_date.Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
            if (invoice_bill.Length == 2)
            {
                invoice = invoice_bill[0].ToString();
                bill_date = invoice_bill[1].ToString();
            }
        }

        string dowmloadname = "Invoice";
        string query = null, sql = null, where = "", delete_where="", group_by = "";
        string month = "" + txt_month_year.Text.Substring(0, 2) + "";
        string year = "" + txt_month_year.Text.Substring(3) + "";
        string firstday = "01/" + txt_month_year.Text;
        string month_name = getmonth(month);
         string invoice_month_name = "concat('" + month_name + "',' ' ,'" + year + "')";
        
        where = "  pay_billing_r_m.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_r_m.client_code = '" + ddl_client.SelectedValue + "'  and pay_billing_r_m.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_r_m.Year = '" + txt_month_year.Text.Substring(3) + "' ";
        delete_where = "  comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' ";
        group_by = " group by pay_billing_r_m.client_code";
        string gst_to_be = d.getsinglestring("  select  DISTINCT (`Gst_to_be`) as 'Gst_to_be' from pay_unit_master where comp_code='" + Session["comp_code"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "'");
        
        
        crystalReport.Load(Server.MapPath("~/client_bill_invoice_r_and_m_RLIC.rpt"));
        query = "SELECT  pay_billing_r_m.client_code, pay_billing_r_m.comp_code, case when pay_billing_r_m.client_code = 'RNLIC RM'  then 'RELIANCE NIPPON LIFE INSURANCE CO. LTD.' else client end AS 'other', COMPANY_NAME, COMP_ADDRESS1 AS 'ADDRESS1', COMP_ADDRESS2 AS 'ADDRESS2', COMP_CITY AS 'CITY', COMP_STATE AS 'STATE', PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, state_name AS 'STATE_NAME', UNIT_full_ADD1 AS 'UNIT_ADD1', invoice_shipping_address AS 'UNIT_ADD2', unit_city AS 'UNIT_CITY', unit_gst_no, fromtodate AS 'start_end_date', (SUM(ROUND((amount) + (Service_charge), 2))) AS 'total', IFNULL(SUM(SGST9), 0) AS 'SGST', IFNULL(SUM(CGST9), 0) AS 'CGST', IFNULL(SUM(IGST18), 0) AS 'IGST', " + invoice_month_name + " AS 'month', housekeeiing_sac_code, Security_sac_code, unit_code, CAST(gst_applicable AS CHAR) AS 'ZONE' FROM pay_billing_r_m LEFT JOIN pay_client_billing_details ON pay_client_billing_details.comp_code = pay_billing_r_m.comp_code AND pay_client_billing_details.client_code = pay_billing_r_m.client_code AND pay_client_billing_details.STATE = pay_billing_r_m.state_name AND billing_name = 'R And M Service' where " + where + group_by;

        //For Report Table
        if (invoice_fl_man == 1)
        {
            sql = "SELECT pay_billing_r_m.comp_code, pay_billing_r_m.client_code, client, state_name, billing_date, auto_invoice_no, unit_gst_no, pay_billing_r_m.month, pay_billing_r_m.year, 'r_and_m_bill' AS 'comp_code', (SUM(ROUND((amount) + (Service_charge), 2))) AS 'total', IFNULL(SUM(SGST9), 0) AS 'SGST', IFNULL(SUM(CGST9), 0) AS 'CGST', IFNULL(SUM(IGST18), 0) AS 'IGST',unit_code,start_date,end_date,'" + gst_to_be + "' FROM pay_billing_r_m WHERE  " + where + group_by;
            d.operation("delete from pay_report_gst WHERE " + delete_where + " and type='r_and_m_bill'");
            d.operation("INSERT INTO pay_report_gst (comp_code,client_code,client_name,state_name,invoice_date, invoice_no, gst_no, month, year,type, Amount, cgst, sgst, igst,unit_code,start_date,end_date,gst_to_be)" + sql);
        }

        ReportLoad(query, dowmloadname, invoice, bill_date);
    }
    protected void btn_r_m_final_invoice_Click(object sender, EventArgs e)
    {
        hidtab.Value = "6";
        string unit_name = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_r_m INNER JOIN pay_r_and_m_service ON pay_r_and_m_service.comp_code = pay_billing_r_m.comp_code  AND pay_r_and_m_service.client_code = pay_billing_r_m.client_code AND pay_r_and_m_service.unit_code = pay_billing_r_m.unit_code   where pay_billing_r_m.comp_code = '" + Session["COMP_CODE"].ToString() + "' and pay_billing_r_m.client_code = '" + ddl_client.SelectedValue + "'and pay_billing_r_m.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_r_m.Year = '" + txt_month_year.Text.Substring(3) + "' and (approve_flag = 1 || approve_flag = 3 || approve_flag = 0)");
        if (!unit_name.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + "  Not Approve By Finance You can not Final!!!');", true); gridview_r_m_load(); return; }
        
		 string unit_name1 = d1.getsinglestring("SELECT  GROUP_CONCAT(DISTINCT unit_name) FROM pay_unit_master WHERE pay_unit_master.comp_code = '" + Session["COMP_CODE"].ToString() + "' AND pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' AND unit_code NOT IN (SELECT  unit_code FROM pay_r_and_m_service WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "') AND r_m_applicable = 1");
         if (!unit_name1.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name1 + "  Bill Remaining You can not Final!!!');", true); gridview_r_m_load(); return; }

        r_m_invoice_flag(1);
        invoice_fl_man = 1;
        btn_r_m_invoice_Click(null, null);
    }
    protected void r_m_invoice_flag(int i)
    {
        hidtab.Value = "6";
        string auto_invoice_no = null;
        int result = 0;
        
        string invoice_clause = "where comp_code='" + Session["comp_code"].ToString() + "' and client_code= '" + ddl_client.SelectedValue + "'";
        string invoice_history_Where_clause = " where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'   and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and invoice_type = '" + ddl_invoice_type.SelectedValue + "' and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' ";
        

        try
        {
           
            if (i == 1)
            {
                i=7;
                string inv_no = d.getsinglestring("select invoice_no from  pay_billing_invoice_history where  comp_code= '" + Session["COMP_CODE"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and billing_type='r_m_bill'");
                if (!inv_no.Equals(""))
                {
                    auto_invoice_no = inv_no;
                    txt_invoice_no.Text = inv_no;
                }
                else
                {
                    auto_invoice_no = btnnew_Click(invoice_clause, i);
                    txt_invoice_no.Text = auto_invoice_no;
                }


                result = d.operation("update pay_billing_r_m set invoice_flag = '1',auto_invoice_no='" + auto_invoice_no + "' , billing_date = str_to_date('" + txt_bill_date.Text + "','%d/%m/%Y'), invoice_no='" + txt_invoice_no.Text + "' where  comp_code= '" + Session["COMP_CODE"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "'");

                d.operation("delete from pay_billing_invoice_history  " + invoice_history_Where_clause + " and  billing_type ='r_m_bill' ");
                d.operation("insert into pay_billing_invoice_history(Invoice_No,comp_code,CLIENT_CODE,state_name,unit_code,month,year,Invoice_type,billing_type,start_date,end_date) values('" + auto_invoice_no + "','" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + ddl_billing_state.SelectedValue + "','" + ddl_unitcode.SelectedValue + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + ddl_invoice_type.SelectedValue + "','r_m_bill','" + ddl_start_date_common.SelectedValue + "','" + ddl_end_date_common.SelectedValue + "')");



            }
           else if (i == 2)
            {
                i = 8;
                string inv_no = d.getsinglestring("select invoice_no from  pay_billing_invoice_history where  comp_code= '" + Session["COMP_CODE"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "' and billing_type='administrative_bill'");
                if (!inv_no.Equals(""))
                {
                    auto_invoice_no = inv_no;
                    txt_invoice_no.Text = inv_no;
                }
                else
                {
                    auto_invoice_no = btnnew_Click(invoice_clause, i);
                    txt_invoice_no.Text = auto_invoice_no;
                }


                result = d.operation("update pay_billing_admini_expense set invoice_flag = '1',auto_invoice_no='" + auto_invoice_no + "' , billing_date = str_to_date('" + txt_bill_date.Text + "','%d/%m/%Y'), invoice_no='" + txt_invoice_no.Text + "' where  comp_code= '" + Session["COMP_CODE"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "'  and month='" + txt_month_year.Text.Substring(0, 2) + "' and year='" + txt_month_year.Text.Substring(3) + "'");

                d.operation("delete from pay_billing_invoice_history  " + invoice_history_Where_clause + " and  billing_type ='administrative_bill' ");
                d.operation("insert into pay_billing_invoice_history(Invoice_No,comp_code,CLIENT_CODE,state_name,unit_code,month,year,Invoice_type,billing_type,start_date,end_date) values('" + auto_invoice_no + "','" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + ddl_billing_state.SelectedValue + "','" + ddl_unitcode.SelectedValue + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + ddl_invoice_type.SelectedValue + "','administrative_bill','" + ddl_start_date_common.SelectedValue + "','" + ddl_end_date_common.SelectedValue + "')");



            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        { }

    }
    protected void btn_adex_process_Click(object sender, EventArgs e)
    {
        hidtab.Value = "7";
        string where_check = "", where_check1 = "", where_check2 = "";
        where_check = " and client_code = '" + ddl_client.SelectedValue + "'";
        where_check2 = " and pay_administrative_expense.client_code = '" + ddl_client.SelectedValue + "'";
        where_check1 = " and billing_client_code = '" + ddl_client.SelectedValue + "'";
        if (ddl_billing_state.SelectedValue != "ALL")
        {

            where_check = " and client_code = '" + ddl_client.SelectedValue + "' and state_name = '" + ddl_billing_state.SelectedValue + "'";
            where_check2 = " and pay_administrative_expense.client_code = '" + ddl_client.SelectedValue + "' and pay_administrative_expense.state_name = '" + ddl_billing_state.SelectedValue + "'";
            where_check1 = " and billing_client_code = '" + ddl_client.SelectedValue + "' and billing_state = '" + ddl_billing_state.SelectedValue + "'";
        }
        if (ddl_unitcode.SelectedValue != "ALL")
        {
            where_check = " and client_code = '" + ddl_client.SelectedValue + "'  and unit_code  = '" + ddl_unitcode.SelectedValue + "'";
            where_check2 = " and pay_administrative_expense.client_code = '" + ddl_client.SelectedValue + "'  and pay_administrative_expense.unit_code  = '" + ddl_unitcode.SelectedValue + "'";
            where_check1 = " and billing_client_code = '" + ddl_client.SelectedValue + "'  and billing_unit_code  = '" + ddl_unitcode.SelectedValue + "'";
        }

        string unit_na = d1.getsinglestring("SELECT GROUP_CONCAT(DISTINCT unit_name) FROM pay_unit_master INNER JOIN pay_administrative_expense ON pay_unit_master.comp_code = pay_administrative_expense.comp_code AND pay_unit_master.client_code = pay_administrative_expense.client_code AND pay_unit_master.unit_code = pay_administrative_expense.unit_code WHERE pay_administrative_expense.comp_code = '" + Session["COMP_CODE"].ToString() + "' AND pay_administrative_expense.unit_code NOT IN (SELECT billing_unit_code FROM pay_billing_master WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' " + where_check1 + ") and approve_flag=1 " + where_check2);
        if (!unit_na.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_na + "  Not Having Policy You can not Proceed!!!');", true); return; }
        
       

        string unit_name1 = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_master INNER JOIN pay_administrative_expense ON pay_administrative_expense.comp_code = pay_billing_master.comp_code  AND pay_administrative_expense.client_code = pay_billing_master.billing_client_code AND pay_administrative_expense.unit_code = pay_billing_master.billing_unit_code and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' and approve_flag = 1 inner join pay_unit_master on pay_unit_master.comp_code=pay_billing_master.comp_code and pay_unit_master.client_code=pay_billing_master.billing_client_code and pay_unit_master.unit_code=pay_billing_master.billing_unit_code where pay_billing_master.comp_code = '" + Session["COMP_CODE"].ToString() + "' and (service_charge_admini is  null || service_charge_admini =0)" + where_check1);
        if (!unit_name1.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name1 + "  Not Having Policy You can not Proceed!!!');", true); return; }


        string unit_name = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_admini_expense where comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "' and invoice_flag != 0  and start_date = '" + ddl_start_date_common.SelectedValue + "' and end_date = '" + ddl_end_date_common.SelectedValue + "' " + where_check);
        if (!unit_name.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + "  Already Approve You can not Proceed!!!');", true); return; }

        insert_finance_data(7);
        gridview_admini_load();

    }
    protected void btn_adex_finance_Click(object sender, EventArgs e)
    {
        hidtab.Value = "7";
        generate_report(12, 0, "r_and_m");
        gridview_admini_load();
    }
    protected void btn_adex_invoice_Click(object sender, EventArgs e)
    {
        hidtab.Value = "7";
        string invoice_type = "";
        string start_date = get_start_date();
        string txt_month_year1 = "";
        invoice_type = ddl_invoice_type.SelectedValue; txt_month_year1 = txt_month_year.Text;
        string unit_name = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_admini_expense INNER JOIN pay_administrative_expense ON pay_administrative_expense.comp_code = pay_billing_admini_expense.comp_code  AND pay_administrative_expense.client_code = pay_billing_admini_expense.client_code AND pay_administrative_expense.unit_code = pay_billing_admini_expense.unit_code   where pay_billing_admini_expense.comp_code = '" + Session["COMP_CODE"].ToString() + "' and pay_billing_admini_expense.client_code = '" + ddl_client.SelectedValue + "'and pay_billing_admini_expense.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_admini_expense.Year = '" + txt_month_year.Text.Substring(3) + "' and (approve_flag = 1 || approve_flag = 3 || approve_flag = 0)");
        if (!unit_name.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + "  Not Approve By Finance You can not get Invoice!!!');", true); gridview_admini_load(); return; }
        

        //invoice and bill date 
        string invoice_bill_date = bs.get_invoice_bill_date(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, "5", ddl_designation.SelectedValue, txt_month_year.Text, int.Parse(ddl_start_date_common.SelectedValue), int.Parse(ddl_end_date_common.SelectedValue), "administrative_bill", ddlregion.SelectedValue, arrears_invoice, txt_arrear_month_year.Text, ddl_arrears_type.SelectedValue, ot_invoice);

        string invoice = "", bill_date = "";

        if (invoice_bill_date.Equals(""))
        {
            invoice = "";
            bill_date = "";

        }
        else
        {

            var invoice_bill = invoice_bill_date.Split(new[] { ',' }, System.StringSplitOptions.RemoveEmptyEntries);
            if (invoice_bill.Length == 2)
            {
                invoice = invoice_bill[0].ToString();
                bill_date = invoice_bill[1].ToString();
            }
        }

        string dowmloadname = "Invoice";
        string query = null, sql = null, where = "", delete_where = "", group_by = "";
        string a = txt_month_year.Text;
        string firstday = "01/" + txt_month_year.Text;

        where = "  pay_billing_admini_expense.comp_code = '" + Session["comp_code"].ToString() + "' and pay_billing_admini_expense.client_code = '" + ddl_client.SelectedValue + "'  and pay_billing_admini_expense.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_admini_expense.Year = '" + txt_month_year.Text.Substring(3) + "' ";
        delete_where = "  comp_code = '" + Session["comp_code"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "'  and month = '" + txt_month_year.Text.Substring(0, 2) + "' and Year = '" + txt_month_year.Text.Substring(3) + "' ";
        group_by = " group by pay_billing_admini_expense.client_code";
        string gst_to_be = d.getsinglestring("  select  DISTINCT (`Gst_to_be`) as 'Gst_to_be' from pay_unit_master where comp_code='" + Session["comp_code"].ToString() + "' and client_code='" + ddl_client.SelectedValue + "'");


        crystalReport.Load(Server.MapPath("~/client_bill_invoice_administrative_RLIC.rpt"));
        query = "SELECT  pay_billing_admini_expense.client_code, pay_billing_admini_expense.comp_code, client AS 'other', COMPANY_NAME, COMP_ADDRESS1 AS 'ADDRESS1', COMP_ADDRESS2 AS 'ADDRESS2', COMP_CITY AS 'CITY', COMP_STATE AS 'STATE', PF_REG_NO, COMPANY_PAN_NO, COMPANY_TAN_NO, COMPANY_CIN_NO, SERVICE_TAX_REG_NO, ESIC_REG_NO, state_name AS 'STATE_NAME', UNIT_full_ADD1 AS 'UNIT_ADD1', invoice_shipping_address AS 'UNIT_ADD2', unit_city AS 'UNIT_CITY', unit_gst_no, fromtodate AS 'start_end_date', (SUM(ROUND((amount) + (Service_charge), 2))) AS 'total', IFNULL(SUM(SGST9), 0) AS 'SGST', IFNULL(SUM(CGST9), 0) AS 'CGST', IFNULL(SUM(IGST18), 0) AS 'IGST', CONCAT('May', ' ', '2020') AS 'month', housekeeiing_sac_code, Security_sac_code, unit_code, CAST(gst_applicable AS CHAR) AS 'ZONE' FROM pay_billing_admini_expense LEFT JOIN pay_client_billing_details ON pay_client_billing_details.comp_code = pay_billing_admini_expense.comp_code AND pay_client_billing_details.client_code = pay_billing_admini_expense.client_code AND pay_client_billing_details.STATE = pay_billing_admini_expense.state_name AND billing_name = 'Administrative Expenses' where " + where + group_by;

        //For Report Table
        if (invoice_fl_man == 1)
        {
            sql = "SELECT pay_billing_admini_expense.comp_code, pay_billing_admini_expense.client_code, client, state_name, billing_date, auto_invoice_no, unit_gst_no, pay_billing_admini_expense.month, pay_billing_admini_expense.year, 'administrative_bill' AS 'comp_code', (SUM(ROUND((amount) + (Service_charge), 2))) AS 'total', IFNULL(SUM(SGST9), 0) AS 'SGST', IFNULL(SUM(CGST9), 0) AS 'CGST', IFNULL(SUM(IGST18), 0) AS 'IGST',unit_code,start_date,end_date,'" + gst_to_be + "' FROM pay_billing_admini_expense WHERE  " + where + group_by;
            d.operation("delete from pay_report_gst WHERE " + delete_where + " and type='administrative_bill'");
            d.operation("INSERT INTO pay_report_gst (comp_code,client_code,client_name,state_name,invoice_date, invoice_no, gst_no, month, year,type, Amount, cgst, sgst, igst,unit_code,start_date,end_date,gst_to_be)" + sql);
        }

        ReportLoad(query, dowmloadname, invoice, bill_date);
    }
    protected void btn_adex_final_invoice_Click(object sender, EventArgs e)
    {
        hidtab.Value = "7";
        string unit_name = d1.getsinglestring("SELECT group_concat(distinct unit_name) FROM pay_billing_admini_expense INNER JOIN pay_administrative_expense ON pay_administrative_expense.comp_code = pay_billing_admini_expense.comp_code  AND pay_administrative_expense.client_code = pay_billing_admini_expense.client_code AND pay_administrative_expense.unit_code = pay_billing_admini_expense.unit_code   where pay_billing_admini_expense.comp_code = '" + Session["COMP_CODE"].ToString() + "' and pay_billing_admini_expense.client_code = '" + ddl_client.SelectedValue + "'and pay_billing_admini_expense.month = '" + txt_month_year.Text.Substring(0, 2) + "' and pay_billing_admini_expense.Year = '" + txt_month_year.Text.Substring(3) + "' and (approve_flag = 1 || approve_flag = 3 || approve_flag = 0)");
        if (!unit_name.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name + "  Not Approve By Finance You can not Final!!!');", true); gridview_admini_load(); return; }
        
		 string unit_name1 = d1.getsinglestring("SELECT  GROUP_CONCAT(DISTINCT unit_name) FROM pay_unit_master WHERE pay_unit_master.comp_code = '" + Session["COMP_CODE"].ToString() + "' AND pay_unit_master.client_code = '" + ddl_client.SelectedValue + "' AND unit_code NOT IN (SELECT  unit_code FROM pay_administrative_expense WHERE comp_code = '" + Session["COMP_CODE"].ToString() + "' and MONTH = '" + txt_month_year.Text.Substring(0, 2) + "' AND YEAR='" + txt_month_year.Text.Substring(3, 4) + "') AND administrative_applicable = 1");
         if (!unit_name1.Equals("")) { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch : " + unit_name1 + "  Bill Remaining You can not Final!!!');", true); gridview_admini_load(); return; }

        r_m_invoice_flag(2);
        invoice_fl_man = 1;
        btn_adex_invoice_Click(null, null);
    }
    protected void gridview_r_m_load()
    {

        try
        {
            System.Data.DataTable dt = new System.Data.DataTable();
            gv_r_m_load.DataSource = null;
            gv_r_m_load.DataBind();

            dt = d.approve_r_m_download(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3));

            if (dt.Rows.Count > 0)
            {
                gv_r_m_load.DataSource = dt;
                gv_r_m_load.DataBind();
                gv_r_m_load_panel.Visible = true;

            }

            if (ddl_billing_state.SelectedValue != "ALL")
            {
                if (ddl_unitcode.SelectedValue != "ALL")
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_r_m WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code = '" + ddl_unitcode.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        btn_r_m_aprrove.Visible = false;
                    }
                    else
                    {
                        btn_r_m_aprrove.Visible = true;
                    }
                }
                else
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_r_m WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code in(SELECT unit_code FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_unit_master.branch_status = 0 ORDER BY 1)  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        btn_r_m_aprrove.Visible = false;

                    }
                    else
                    {
                        btn_r_m_aprrove.Visible = true;
                    }
                }

            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

        }

    }
    protected void gv_r_m_load_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        Color color = System.Drawing.ColorTranslator.FromHtml("#90EE90");
        Color color1 = System.Drawing.ColorTranslator.FromHtml("#FF4C4C");
        Color color2 = System.Drawing.ColorTranslator.FromHtml("#FACC2E");
            for (int i = 0; i < e.Row.Cells.Count; i++)
            {
                if (e.Row.Cells[i].Text == "&nbsp;")
                {
                    e.Row.Cells[i].Text = "";
                }
                if (e.Row.Cells[8].Text.ToUpper().Equals("APPROVE BY FINANCE"))
                {
                    e.Row.BackColor = color;
                }
                else if (e.Row.Cells[8].Text.ToUpper().Equals("REJECT BY FINANCE"))
                {
                    e.Row.BackColor = color1;
                }
            }
            e.Row.Cells[4].Visible = false;
    }
    protected void btn_r_m_aprrove_Click(object sender, EventArgs e)
    {
        hidtab.Value = "6";
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        int result = 0;
        string emp_code = null;
        string unit_code = null;
        foreach (GridViewRow gvrow in gv_r_m_load.Rows)
        {
            unit_code = null;
          
            unit_code = (string)gv_r_m_load.DataKeys[gvrow.RowIndex].Value;
            var checkbox = gvrow.FindControl("chk_client_rm") as System.Web.UI.WebControls.CheckBox;
            if (checkbox.Checked == true)
            {

                try
                {
                   
                        result = d.operation("update pay_r_and_m_service set approve_flag = '2', r_m_status = 'Approve By Finance',reject_reason ='' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and approve_flag = 1  ");
                    
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {
                }
            }

        }
        if (result > 0)
        {
            gridview_r_m_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert(' R&M Approved Successfully !!');", true);
        }
        gridview_r_m_load();
    }

    protected void lnk_R_M_Command(object sender, CommandEventArgs e)
    {
        string[] commandArgs = e.CommandArgument.ToString().Split(new char[] { ',' });
        string filename = commandArgs[0];
        string unit_name = commandArgs[1];

        if (filename != "")
        {
            downloadfile_R_M(filename, unit_name);
        }

        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attachment File Cannot Be Uploaded !!!')", true);
        }
    }
    protected void downloadfile_R_M(string filename, string unit_name)
    {
        var result = filename.Substring(filename.Length - 4);
        if (result.Contains("jpeg"))
        {
            result = ".jpeg";
        }
        try
        {
            string path2 = Server.MapPath("~\\r_m_images\\" + filename);
            string unitName = unit_name + "-Attendance" + result;
            Response.Clear();
            Response.ContentType = "Application/pdf/jpg/jpeg/png/zip";
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + unitName);
            Response.TransmitFile("~\\r_m_images\\" + filename);
            Response.WriteFile(path2);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
            Response.End();
            Response.Close();
        }
        catch (Exception ex) { }
    }

    protected void lnk_reject_r_m_Command(object sender, CommandEventArgs e)
    {
         string unit_code = e.CommandArgument.ToString();
        int result = 0;
        //string emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_attendance_muster where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' ");
        //emp_code = emp_code.Replace(",", "','");
        string chk_payment = d.getsinglestring("Select unit_code from pay_pro_r_m where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "' and payment_status=1 ");

        if (chk_payment != "")
        { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch Payment Done You Can Not Reject  !!');", true); gridview_r_m_load(); return; }
        
        if (!unit_code.Equals(""))
        {
            GridViewRow row = (GridViewRow)(((LinkButton)sender)).NamingContainer;
            string reject_reason = (row.FindControl("reject_reason") as System.Web.UI.WebControls.TextBox).Text;

            if (reject_reason != "")
            {
                d.operation("update pay_r_and_m_service set approve_flag = '3' , reject_reason = '" + reject_reason + "', r_m_status = 'Reject By Finance' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "' ");
                result = 1;
            }
        }

        if (result > 0)
        {
            gridview_r_m_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('R&M Rejected Successfully !!');", true);
        }
        else
        {
            gridview_r_m_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Enter Reason  !!');", true);
        }
        Notification_panel.Visible = false;
        gridview_r_m_load();
    }
    protected void gridview_admini_load()
    {

        try
        {
            System.Data.DataTable dt = new System.Data.DataTable();
            GridView_admini.DataSource = null;
            GridView_admini.DataBind();

            dt = d.approve_administrative_exp_download(Session["COMP_CODE"].ToString(), ddl_client.SelectedValue, ddl_billing_state.SelectedValue, ddl_unitcode.SelectedValue, txt_month_year.Text.Substring(0, 2), txt_month_year.Text.Substring(3));

            if (dt.Rows.Count > 0)
            {
                GridView_admini.DataSource = dt;
                GridView_admini.DataBind();
                gv_admini_load_panel.Visible = true;

            }

            if (ddl_billing_state.SelectedValue != "ALL")
            {
                if (ddl_unitcode.SelectedValue != "ALL")
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_admini_expense WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code = '" + ddl_unitcode.SelectedValue + "'  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        btn_admini_approve.Visible = false;
                    }
                    else
                    {
                        btn_admini_approve.Visible = true;
                    }
                }
                else
                {
                    string i_fah = d.getsinglestring("SELECT invoice_flag FROM pay_billing_admini_expense WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND unit_code in(SELECT unit_code FROM pay_unit_master WHERE comp_code = '" + Session["comp_code"].ToString() + "'  AND client_code = '" + ddl_client.SelectedValue + "'  AND state_name = '" + ddl_billing_state.SelectedValue + "' AND pay_unit_master.branch_status = 0 ORDER BY 1)  AND month = '" + txt_month_year.Text.Substring(0, 2).ToString() + "' AND year = '" + txt_month_year.Text.Substring(3).ToString() + "'");
                    if (i_fah != "0")
                    {
                        btn_admini_approve.Visible = false;

                    }
                    else
                    {
                        btn_admini_approve.Visible = true;
                    }
                }

            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

        }

    }
    protected void GridView_admini_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        Color color = System.Drawing.ColorTranslator.FromHtml("#90EE90");
        Color color1 = System.Drawing.ColorTranslator.FromHtml("#FF4C4C");
        Color color2 = System.Drawing.ColorTranslator.FromHtml("#FACC2E");
        for (int i = 0; i < e.Row.Cells.Count; i++)
        {
            if (e.Row.Cells[i].Text == "&nbsp;")
            {
                e.Row.Cells[i].Text = "";
            }
            if (e.Row.Cells[8].Text.ToUpper().Equals("APPROVE BY FINANCE"))
            {
                e.Row.BackColor = color;
            }
            else if (e.Row.Cells[8].Text.ToUpper().Equals("REJECT BY FINANCE"))
            {
                e.Row.BackColor = color1;
            }
        }
        e.Row.Cells[4].Visible = false;
    }
    protected void lnk_admini_expense_Command(object sender, CommandEventArgs e)
    {
        string[] commandArgs = e.CommandArgument.ToString().Split(new char[] { ',' });
        string filename = commandArgs[0];
        string unit_name = commandArgs[1];

        if (filename != "")
        {
            downloadfile_admini(filename, unit_name);
        }

        else
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attachment File Cannot Be Uploaded !!!')", true);
        }
    }
    protected void downloadfile_admini(string filename, string unit_name)
    {
        var result = filename.Substring(filename.Length - 4);
        if (result.Contains("jpeg"))
        {
            result = ".jpeg";
        }
        try
        {
            string path2 = Server.MapPath("~\\administrative_images\\" + filename);
            string unitName = unit_name + "-Attendance" + result;
            Response.Clear();
            Response.ContentType = "Application/pdf/jpg/jpeg/png/zip";
            Response.AppendHeader("Content-Disposition", "attachment; filename=" + unitName);
            Response.TransmitFile("~\\administrative_images\\" + filename);
            Response.WriteFile(path2);
            HttpContext.Current.ApplicationInstance.CompleteRequest();
            Response.End();
            Response.Close();
        }
        catch (Exception ex) { }
    }
    protected void lnk_reject_admini_Command(object sender, CommandEventArgs e)
    {
        string unit_code = e.CommandArgument.ToString();
        int result = 0;
        string chk_payment = d.getsinglestring("Select unit_code from pay_pro_admini_expense where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "' and payment_status = 1");

        if (chk_payment != "")
        { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch Payment Done You Can Not Reject  !!');", true); gridview_admini_load(); return; }
   
            GridViewRow row = (GridViewRow)(((LinkButton)sender)).NamingContainer;
            string reject_reason = (row.FindControl("reject_reason") as System.Web.UI.WebControls.TextBox).Text;

            if (reject_reason != "")
            {
                d.operation("update pay_administrative_expense set approve_flag = '3' , reject_reason = '" + reject_reason + "', admini_status = 'Reject By Finance' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code + "' ");
                result = 1;
            }

        if (result > 0)
        {
            gridview_admini_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Administrative Expenses Rejected Successfully !!');", true);
        }
        else
        {
            gridview_admini_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Enter Reason  !!');", true);
        }
        Notification_panel.Visible = false;
    }
    protected void btn_admini_approve_Click(object sender, EventArgs e)
    {
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        int result = 0;
        string emp_code = null;
        string unit_code = null;
        foreach (GridViewRow gvrow in GridView_admini.Rows)
        {
            unit_code = null;
            emp_code = null;
            unit_code = (string)GridView_admini.DataKeys[gvrow.RowIndex].Value;
            var checkbox = gvrow.FindControl("chk_client_admin") as System.Web.UI.WebControls.CheckBox;
            if (checkbox.Checked == true)
            {

                try
                {
                    emp_code = d.get_group_concat("select distinct(unit_code) as 'unit_code' from pay_billing_admini_expense where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'");
                    emp_code = emp_code.Replace(",", "','");
                    if (!emp_code.Equals(""))
                    {
                        result = d.operation("update pay_administrative_expense set approve_flag = '2', admini_status = 'Approve By Finance',reject_reason='' where COMP_CODE='" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and approve_flag = 1 ");
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {
                }
            }

        }
        if (result > 0)
        {
            gridview_admini_load();
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert(' Administrative Expenses Approved Successfully !!');", true);
        }
        gridview_admini_load();
    }
    protected void btn_reject_Click(object sender, EventArgs e)
    {
        hidtab.Value = "6";
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        int result = 0;
        foreach (GridViewRow gvrow in gv_r_m_load.Rows)
        {
             var checkbox = gvrow.FindControl("chk_client_rm") as System.Web.UI.WebControls.CheckBox;
             if (checkbox.Checked == true)
             {
                 string cell_1_Value = gv_r_m_load.Rows[gvrow.RowIndex].Cells[4].Text;
                 TextBox txt_reject = (TextBox)gvrow.FindControl("reject_reason");
                 string reject_rea_txt = (txt_reject.Text);

                 if (checkbox.Checked == true)
                 {
                     string chk_payment = d.getsinglestring("Select unit_code from pay_pro_r_m where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + cell_1_Value + "' and payment_status=1 ");

                     if (chk_payment != "")
                     { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch Payment Done You Can Not Reject  !!');", true); gridview_r_m_load(); return; }
        
                     if (reject_rea_txt != "")
                     {
                         result = d.operation("update pay_r_and_m_service set approve_flag='3',r_m_status='Reject By Finance', reject_reason='" + reject_rea_txt + "' where client_code='" + ddl_client.SelectedValue + "' and unit_code='" + cell_1_Value + "'and month='" + txt_month_year.Text.Substring(0, 2) + "'and year='" + txt_month_year.Text.Substring(3) + "' ");
                     }
                     else
                     {
                         ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Enter Reject Reason');", true);
                         gridview_r_m_load();
                         return;
                     }
                 }

             }
             else if (checkbox.Checked == true)
             {
                 ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Select Atleast One Record');", true);
                  gridview_r_m_load();
                 return;

             }
        }
        //foreach (GridViewRow gvrow in gv_r_m_load.Rows)
        //{
        //    var checkbox = gvrow.FindControl("chk_client_rm") as System.Web.UI.WebControls.CheckBox;
        //    string cell_1_Value = gv_r_m_load.Rows[gvrow.RowIndex].Cells[4].Text;
        //    TextBox txt_reject = (TextBox)gvrow.FindControl("reject_reason");
        //    string reject_rea_txt = (txt_reject.Text);

        //    if (checkbox.Checked == true)
        //    {
        //        if (reject_rea_txt != "")
        //        {
        //            result = d.operation("update pay_r_and_m_service set approve_flag='3',r_m_status='Reject By Finance', reject_reason='" + reject_rea_txt + "' where client_code='" + ddl_client.SelectedValue + "' and unit_code='" + cell_1_Value + "'and month='" + txt_month_year.Text.Substring(0, 2) + "'and year='" + txt_month_year.Text.Substring(3) + "' ");
        //        }
        //        else
        //        {
        //            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Enter Reject Reason');", true);
        //            gridview_r_m_load();
        //            return;
        //        }
        //    }

        //}
        if (result > 0)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert(' R&M Record Rejected Successfully !!');", true);
            gridview_r_m_load();
        }
        gridview_r_m_load();
    }
    protected void btn_reject_admin_Click(object sender, EventArgs e)
    {
        hidtab.Value = "7";
        try { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "CallMyFunction", "unblock()", true); }
        catch { }
        int result = 0;
        foreach (GridViewRow gvrow in GridView_admini.Rows)
        {
            var checkbox = gvrow.FindControl("chk_client_admin") as System.Web.UI.WebControls.CheckBox;
            string cell_1_Value = GridView_admini.Rows[gvrow.RowIndex].Cells[4].Text;
            TextBox txt_reject = (TextBox)gvrow.FindControl("reject_reason");
            string reject_rea_txt = (txt_reject.Text);
            if (checkbox.Checked == true)
            {
                string chk_payment = d.getsinglestring("Select unit_code from pay_pro_admini_expense where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + cell_1_Value + "' and payment_status = 1");

                if (chk_payment != "")
                { ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('This Branch Payment Done You Can Not Reject  !!');", true); gridview_admini_load(); return; }
   
                if (reject_rea_txt != "")
                {
                    result = d.operation("update pay_administrative_expense set approve_flag='3',admini_status='Reject By Finance', reject_reason='" + reject_rea_txt + "' where client_code='" + ddl_client.SelectedValue + "' and unit_code='" + cell_1_Value + "'and month='" + txt_month_year.Text.Substring(0, 2) + "'and year='" + txt_month_year.Text.Substring(3) + "' ");
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Enter Reject Reason');", true);
                    gridview_admini_load();
                    return;
                }

            }
            //else
            //{
            //    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Select Atleast One Record');", true);
            //    gridview_admini_load();
            //    return;
            //}
        }
        //foreach (GridViewRow gvrow in GridView_admini.Rows)
        //{
        //    var checkbox = gvrow.FindControl("chk_client_admin") as System.Web.UI.WebControls.CheckBox;
        //    string cell_1_Value = GridView_admini.Rows[gvrow.RowIndex].Cells[4].Text;
        //    TextBox txt_reject = (TextBox)gvrow.FindControl("reject_reason");
        //    string reject_rea_txt = (txt_reject.Text);

        //    if (checkbox.Checked == true)
        //    {
        //        if (reject_rea_txt != "")
        //        {
        //            result = d.operation("update pay_administrative_expense set approve_flag='3',admini_status='Reject By Finance', reject_reason='" + reject_rea_txt + "' where client_code='" + ddl_client.SelectedValue + "' and state_name='" + ddl_billing_state.SelectedValue + "'and unit_code='" + cell_1_Value + "'and month='" + txt_month_year.Text.Substring(0, 2) + "'and year='" + txt_month_year.Text.Substring(3) + "' ");
        //        }
        //        else
        //        {
        //            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Enter Reject Reason');", true);
        //            gridview_admini_load();
        //            return;
        //        }
        //    }

        //}
        if (result == 0)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Select Atleast One Record');", true);
            gridview_admini_load();
            return;
        }
        if (result > 0)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert(' Administrative Expeses Record Rejected Successfully !!');", true);
            gridview_admini_load();
        }
    }
	
	 
	

     protected void btn_reject_gv_Click(object sender, EventArgs e)
     {
         string reject_reason = null;


       


        foreach (GridViewRow gvrow in gv_approve_attendace.Rows)
        { 
        
            var checkbox = gvrow.FindControl("chk_client") as System.Web.UI.WebControls.CheckBox;
            if (checkbox.Checked == true)
            {
                string id1 = gv_approve_attendace.Rows[gvrow.RowIndex].Cells[11].Text;
                string unit_code_rej = gv_approve_attendace.Rows[gvrow.RowIndex].Cells[12].Text;

                TextBox txt_returnqty = (TextBox)gvrow.FindControl("reject_reason");
                reject_reason = (txt_returnqty.Text);

                if (reject_reason == "")
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Please Enter Reject Reason')", true);
                    gv_attendace_load();
                    return;

                }


                if (d.getsinglestring("select distinct unit_code from pay_attendance_reject_master where month='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and unit_code='" + unit_code_rej + "' and flag = 0  ") != "")
                {
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendace Sheet Already Rejected !!');", true);
                    // attendance_status();
                    Notification_panel.Visible = false;
                    gv_attendace_load();

                    return;

                }

                int result = 0;


                string emp_code = d.get_group_concat("select distinct(emp_code) as 'emp_code' from pay_attendance_muster where  COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and unit_code='" + unit_code_rej + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and flag != 0");

                emp_code = emp_code.Replace(",", "','");

                if (reject_reason != "")
                {
                    if (emp_code != "")
                    {
                        d.operation("update pay_files_timesheet_history set flag = '1' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code_rej + "' ");
                        result = d.operation("insert into pay_attendance_reject_master(comp_code,client_code,unit_code,month,year,rejected_reason,rejected_date,rejected_by)values('" + Session["COMP_CODE"].ToString() + "','" + ddl_client.SelectedValue + "','" + unit_code_rej + "','" + txt_month_year.Text.Substring(0, 2) + "','" + txt_month_year.Text.Substring(3) + "','" + reject_reason + "',now(),'" + Session["LOGIN_ID"].ToString() + "')");
                        result = d.operation("insert into pay_files_timesheet_history (comp_code, client_code, unit_code, file_name, description, month, year, uploaded_by, uploaded_date,state)(select comp_code, client_code, unit_code, file_name, description, month, year, uploaded_by, uploaded_date,state from pay_files_timesheet where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' AND client_code='" + ddl_client.SelectedValue + "' and unit_code='" + unit_code_rej + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "')");
                        d.operation("update pay_files_timesheet set flag = '1', status='Reject By Finance',reject_status='" + reject_reason + "' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code_rej + "'");
                        d.operation("update pay_attendance_muster set flag = '0' where COMP_CODE = '" + Session["COMP_CODE"].ToString() + "' and  month ='" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "'  and unit_code='" + unit_code_rej + "' and emp_code in ('" + emp_code + "')");
                        result = 1;
                    }
                }


                if (result > 0)
                {
                    //   attendance_status();
                    gv_attendace_load();
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendace Rejected Successfully !!');", true);
                }
                else
                {
                    gv_attendace_load();
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Attendace Not Rejected !!');", true);
                
                }
            }
        
        }

    }
	protected void btn_final_arrears_client_Click(object sender, EventArgs e)
    {
        string n_state_name = chk_final_invoice();
        if (!n_state_name.Equals(""))
        {
            ClientScript.RegisterStartupScript(GetType(), "alert", "alert('Please Finalize " + n_state_name + " State.');", true);
            return;
        }


        if (ddl_billing_state.SelectedValue.Equals("ALL"))
        {

            string clientdir = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "final_invoice\\" + ddl_client.SelectedValue.Replace(" ", "_") + "_xls");
            string zip_filename = System.IO.Path.Combine(HttpContext.Current.Server.MapPath("~/."), "final_invoice\\" + ddl_billing_state.SelectedValue + "_" + txt_month_year.Text.Replace("/", "_") + "_" + ddl_client.SelectedItem.ToString().Replace(" ", "_") + "_xls" + ".zip");
            if (System.IO.File.Exists(zip_filename))
            {
                File.Delete(zip_filename);
            }

            string value = ViewState["ALL_STATE"].ToString();

            //check if dir exists
            bool exists = System.IO.Directory.Exists(clientdir);

            if (exists)
            {
                //delete files from dir
                System.IO.DirectoryInfo di = new DirectoryInfo(clientdir);

                foreach (FileInfo file in di.GetFiles())
                {
                    file.Delete();
                }
            }
            else
            {
                System.IO.Directory.CreateDirectory(clientdir);
            }

            MySqlCommand cmd = new MySqlCommand("select distinct(state_name) from pay_billing_unit_rate_history where comp_code = '" + Session["COMP_CODE"].ToString() + "' and client_code = '" + ddl_client.SelectedValue + "' and month = '" + txt_month_year.Text.Substring(0, 2) + "' and year = '" + txt_month_year.Text.Substring(3) + "' and invoice_flag!=0", d.con1);
            d.con1.Open();
            MySqlDataReader dr = cmd.ExecuteReader();
            if (!dr.HasRows)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('No Invoices for this Month !!!');", true);
                return;
            }
            while (dr.Read())
            {
                ddl_billing_state.SelectedValue = dr.GetValue(0).ToString();
                ViewState["ALL_STATE"] = "1";
                multisheet(clientdir);
            }
            //for all state file
            ddl_billing_state.SelectedValue = "ALL";
            ViewState["ALL_STATE"] = "1";
            multisheet(clientdir);
            //create zip file
            ZipFile.CreateFromDirectory(clientdir, zip_filename);
            System.IO.DirectoryInfo myDirInfo = new DirectoryInfo(clientdir);

            foreach (FileInfo file in myDirInfo.GetFiles())
            {
                file.Delete();
            }
            if (!value.Equals("2"))
            {
                Response.Clear();
                Response.ContentType = "Application/pdf";
                Response.AppendHeader("Content-Disposition", "attachment; filename=" + ddl_billing_state.SelectedValue + "_" + txt_month_year.Text.Replace("/", "_") + "_" + ddl_client.SelectedItem.ToString().Replace(" ", "_") + ".zip");
                Response.TransmitFile(zip_filename);
                Response.End();
            }
            else
            {
                ViewState["ALL_STATE"] = zip_filename;
            }
        }
        else
        {
            multisheet("");
        }
        //create_pdf();

    }

	
}

